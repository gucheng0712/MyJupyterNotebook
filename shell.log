2019-01-15 20:07:30 - shutdown request
2019-01-15 20:07:33 - using System;
2019-01-15 20:07:33 - using System.Collections.Generic;
2019-01-15 20:07:33 - using System.Linq;
2019-01-15 20:07:33 - using System.Text;
2019-01-15 20:07:33 - using System.Threading.Tasks;
2019-01-15 20:07:33 - using ICSharp.Kernel;
2019-01-15 20:07:33 - // Adding default usings. This file is included for each notebook when it starts.
2019-01-16 08:51:00 - using System;
2019-01-16 08:51:00 - using System.Collections.Generic;
2019-01-16 08:51:00 - using System.Linq;
2019-01-16 08:51:00 - using System.Text;
2019-01-16 08:51:00 - using System.Threading.Tasks;
2019-01-16 08:51:00 - using ICSharp.Kernel;
2019-01-16 08:51:00 - // Adding default usings. This file is included for each notebook when it starts.
2019-01-16 08:51:47 - shutdown request
2019-01-16 08:51:47 - using System;
2019-01-16 08:51:47 - using System.Collections.Generic;
2019-01-16 08:51:47 - using System.Linq;
2019-01-16 08:51:47 - using System.Text;
2019-01-16 08:51:47 - using System.Threading.Tasks;
2019-01-16 08:51:47 - using ICSharp.Kernel;
2019-01-16 08:51:47 - // Adding default usings. This file is included for each notebook when it starts.
2019-01-16 08:57:15 - using System;
2019-01-16 08:57:15 - using System.Collections.Generic;
2019-01-16 08:57:15 - using System.Linq;
2019-01-16 08:57:15 - using System.Text;
2019-01-16 08:57:15 - using System.Threading.Tasks;
2019-01-16 08:57:15 - using ICSharp.Kernel;
2019-01-16 08:57:15 - // Adding default usings. This file is included for each notebook when it starts.
2019-03-06 01:13:19 - using System;
2019-03-06 01:13:19 - using System.Collections.Generic;
2019-03-06 01:13:19 - using System.Linq;
2019-03-06 01:13:19 - using System.Text;
2019-03-06 01:13:19 - using System.Threading.Tasks;
2019-03-06 01:13:19 - using ICSharp.Kernel;
2019-03-06 01:13:19 - // Adding default usings. This file is included for each notebook when it starts.
2019-03-06 01:17:29 - string s = "00000000000010101010000011111111111111"
2019-03-06 01:17:29 - int answer = 0
2019-03-06 01:17:29 - for(int i =0,j=s.Length-1;i<j;i++,j++)
2019-03-06 01:17:29 - {
2019-03-06 01:17:29 -     while(i<j&&s[i]=='0')
2019-03-06 01:17:29 -         i++;
2019-03-06 01:17:29 -     while(i<j&&s[j]=='1')
2019-03-06 01:17:29 -         j++;
2019-03-06 01:17:29 -     if(i<j)
2019-03-06 01:17:29 -         answer++;
2019-03-06 01:17:29 - }
2019-03-06 01:17:29 - Console.WriteLine(answer)
2019-03-06 01:17:29 - (1,52): error CS1002: ; expected
2019-03-06 01:17:29 - (2,15): error CS1002: ; expected
2019-03-06 01:17:41 - string s = "00000000000010101010000011111111111111";
2019-03-06 01:17:41 - int answer = 0;
2019-03-06 01:17:41 - for(int i =0,j=s.Length-1;i<j;i++,j++)
2019-03-06 01:17:41 - {
2019-03-06 01:17:41 -     while(i<j&&s[i]=='0')
2019-03-06 01:17:41 -         i++;
2019-03-06 01:17:41 -     while(i<j&&s[j]=='1')
2019-03-06 01:17:41 -         j++;
2019-03-06 01:17:41 -     if(i<j)
2019-03-06 01:17:41 -         answer++;
2019-03-06 01:17:41 - }
2019-03-06 01:17:41 - Console.WriteLine(answer)
2019-03-06 01:17:42 - One or more errors occurred.
2019-03-06 01:17:42 - Index was outside the bounds of the array.
2019-03-06 01:18:01 - string s = "00000000000010101010000011111111111111";
2019-03-06 01:18:01 - int answer = 0;
2019-03-06 01:18:01 - for(int i =0,j=s.Length-1;i<j;i++,j--)
2019-03-06 01:18:01 - {
2019-03-06 01:18:01 -     while(i<j&&s[i]=='0')
2019-03-06 01:18:01 -         i++;
2019-03-06 01:18:01 -     while(i<j&&s[j]=='1')
2019-03-06 01:18:01 -         j--;
2019-03-06 01:18:01 -     if(i<j)
2019-03-06 01:18:01 -         answer++;
2019-03-06 01:18:01 - }
2019-03-06 01:18:01 - Console.WriteLine(answer)
2019-03-06 01:18:52 - string s = "00000000000010101010000011111111111111";
2019-03-06 01:18:52 - int answer = 0;
2019-03-06 01:18:52 - for(int i =0,j=s.Length-1;i<j;i++,j--)
2019-03-06 01:18:52 - {
2019-03-06 01:18:52 -     while(i<j&&s[i]=='0')
2019-03-06 01:18:52 -         i++;
2019-03-06 01:18:52 -     while(i<j&&s[j]=='1')
2019-03-06 01:18:52 -         j--;
2019-03-06 01:18:52 -     if(i<j)
2019-03-06 01:18:52 -         char temp = s[i];
2019-03-06 01:18:52 -         s[i] = s[j];
2019-03-06 01:18:52 -         s[j] = temp;
2019-03-06 01:18:52 - }
2019-03-06 01:18:52 - Console.WriteLine(s)
2019-03-06 01:18:52 - (10,9): error CS1023: Embedded statement cannot be a declaration or labeled statement
2019-03-06 01:18:56 - string s = "00000000000010101010000011111111111111";
2019-03-06 01:18:56 - int answer = 0;
2019-03-06 01:18:56 - for(int i =0,j=s.Length-1;i<j;i++,j--)
2019-03-06 01:18:56 - {
2019-03-06 01:18:56 -     while(i<j&&s[i]=='0')
2019-03-06 01:18:56 -         i++;
2019-03-06 01:18:56 -     while(i<j&&s[j]=='1')
2019-03-06 01:18:56 -         j--;
2019-03-06 01:18:56 -     if(i<j)
2019-03-06 01:18:56 -         char temp = s[i];
2019-03-06 01:18:56 -         s[i] = s[j];
2019-03-06 01:18:56 -         s[j] = temp;
2019-03-06 01:18:56 - }
2019-03-06 01:18:56 - Console.WriteLine(s);
2019-03-06 01:18:56 - (10,9): error CS1023: Embedded statement cannot be a declaration or labeled statement
2019-03-06 01:19:26 - string s = "00000000000010101010000011111111111111";
2019-03-06 01:19:26 - int answer = 0;
2019-03-06 01:19:26 - for(int i =0,j=s.Length-1;i<j;i++,j--)
2019-03-06 01:19:26 - {
2019-03-06 01:19:26 -     while(i<j&&s[i]=='0')
2019-03-06 01:19:26 -         i++;
2019-03-06 01:19:26 -     while(i<j&&s[j]=='1')
2019-03-06 01:19:26 -         j--;
2019-03-06 01:19:26 -     if(i<j){
2019-03-06 01:19:26 -         char temp = s[i];
2019-03-06 01:19:26 -         s[i] = s[j];
2019-03-06 01:19:26 -         s[j] = temp;
2019-03-06 01:19:26 -     }
2019-03-06 01:19:26 - }
2019-03-06 01:19:26 - Console.WriteLine(s);
2019-03-06 01:19:26 - (11,9): error CS0200: Property or indexer 'string.this[int]' cannot be assigned to -- it is read only
2019-03-06 01:19:26 - (12,9): error CS0200: Property or indexer 'string.this[int]' cannot be assigned to -- it is read only
2019-03-06 01:20:20 - char[] s = "00000000000010101010000011111111111111";
2019-03-06 01:20:20 - int answer = 0;
2019-03-06 01:20:20 - for(int i =0,j=s.Length-1;i<j;i++,j--)
2019-03-06 01:20:20 - {
2019-03-06 01:20:20 -     while(i<j&&s[i]=='0')
2019-03-06 01:20:20 -         i++;
2019-03-06 01:20:20 -     while(i<j&&s[j]=='1')
2019-03-06 01:20:20 -         j--;
2019-03-06 01:20:20 -     if(i<j){
2019-03-06 01:20:20 -         char temp = s[i];
2019-03-06 01:20:20 -         s[i] = s[j];
2019-03-06 01:20:20 -         s[j] = temp;
2019-03-06 01:20:20 -     }
2019-03-06 01:20:20 - }
2019-03-06 01:20:20 - Console.WriteLine(s);
2019-03-06 01:20:20 - (1,12): error CS0029: Cannot implicitly convert type 'string' to 'char[]'
2019-03-06 01:21:16 - string str = "00000000000010101010000011111111111111";
2019-03-06 01:21:16 - char[] s = str.ToCharArray();
2019-03-06 01:21:16 - int answer = 0;
2019-03-06 01:21:16 - for(int i =0,j=s.Length-1;i<j;i++,j--)
2019-03-06 01:21:16 - {
2019-03-06 01:21:16 -     while(i<j&&s[i]=='0')
2019-03-06 01:21:16 -         i++;
2019-03-06 01:21:16 -     while(i<j&&s[j]=='1')
2019-03-06 01:21:16 -         j--;
2019-03-06 01:21:16 -     if(i<j){
2019-03-06 01:21:16 -         char temp = s[i];
2019-03-06 01:21:16 -         s[i] = s[j];
2019-03-06 01:21:16 -         s[j] = temp;
2019-03-06 01:21:16 -     }
2019-03-06 01:21:16 - }
2019-03-06 01:21:16 - Console.WriteLine(s);
2019-03-06 11:07:25 - using System;
2019-03-06 11:07:25 - using System.Collections.Generic;
2019-03-06 11:07:25 - using System.Linq;
2019-03-06 11:07:25 - using System.Text;
2019-03-06 11:07:25 - using System.Threading.Tasks;
2019-03-06 11:07:25 - using ICSharp.Kernel;
2019-03-06 11:07:25 - // Adding default usings. This file is included for each notebook when it starts.
2019-03-18 13:29:17 - using System;
2019-03-18 13:29:17 - using System.Collections.Generic;
2019-03-18 13:29:17 - using System.Linq;
2019-03-18 13:29:17 - using System.Text;
2019-03-18 13:29:17 - using System.Threading.Tasks;
2019-03-18 13:29:17 - using ICSharp.Kernel;
2019-03-18 13:29:17 - // Adding default usings. This file is included for each notebook when it starts.
2019-03-18 13:29:18 - Unexpected content type on shell. msg_type is comm_info_request 
2019-03-18 14:13:04 - public int InsertSort(int[] arr)
2019-03-18 14:13:04 - {
2019-03-18 14:13:04 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 14:13:04 -     {
2019-03-18 14:13:04 -         int temp = arr[i];
2019-03-18 14:13:04 -         int j = i;
2019-03-18 14:13:04 -         while (j>0)
2019-03-18 14:13:04 -         {
2019-03-18 14:13:04 -             if(arr[j-1]>temp)
2019-03-18 14:13:04 -             {
2019-03-18 14:13:04 -                 arr[j] = arr[j-1];
2019-03-18 14:13:04 -             }
2019-03-18 14:13:04 -             else
2019-03-18 14:13:04 -             {
2019-03-18 14:13:04 -                 arr[j] = temp;
2019-03-18 14:13:04 -                 break;
2019-03-18 14:13:04 -             }
2019-03-18 14:13:04 -             j--;
2019-03-18 14:13:04 -         }
2019-03-18 14:13:04 -     }
2019-03-18 14:13:04 -     return arr;
2019-03-18 14:13:04 - }
2019-03-18 14:13:04 - int[] arr = [8,6,4,5,2,7,1];
2019-03-18 14:13:04 - print(InsertSort(arr));
2019-03-18 14:13:04 - (26,13): error CS1525: Invalid expression term '['
2019-03-18 14:13:21 - public int InsertSort(int[] arr)
2019-03-18 14:13:21 - {
2019-03-18 14:13:21 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 14:13:21 -     {
2019-03-18 14:13:21 -         int temp = arr[i];
2019-03-18 14:13:21 -         int j = i;
2019-03-18 14:13:21 -         while (j>0)
2019-03-18 14:13:21 -         {
2019-03-18 14:13:21 -             if(arr[j-1]>temp)
2019-03-18 14:13:21 -             {
2019-03-18 14:13:21 -                 arr[j] = arr[j-1];
2019-03-18 14:13:21 -             }
2019-03-18 14:13:21 -             else
2019-03-18 14:13:21 -             {
2019-03-18 14:13:21 -                 arr[j] = temp;
2019-03-18 14:13:21 -                 break;
2019-03-18 14:13:21 -             }
2019-03-18 14:13:21 -             j--;
2019-03-18 14:13:21 -         }
2019-03-18 14:13:21 -     }
2019-03-18 14:13:21 -     return arr;
2019-03-18 14:13:21 - }
2019-03-18 14:13:21 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:13:21 - print(InsertSort(arr));
2019-03-18 14:13:21 - (28,1): error CS0103: The name 'print' does not exist in the current context
2019-03-18 14:13:21 - (23,12): error CS0029: Cannot implicitly convert type 'int[]' to 'int'
2019-03-18 14:13:33 - public int InsertSort(int[] arr)
2019-03-18 14:13:33 - {
2019-03-18 14:13:33 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 14:13:33 -     {
2019-03-18 14:13:33 -         int temp = arr[i];
2019-03-18 14:13:33 -         int j = i;
2019-03-18 14:13:33 -         while (j>0)
2019-03-18 14:13:33 -         {
2019-03-18 14:13:33 -             if(arr[j-1]>temp)
2019-03-18 14:13:33 -             {
2019-03-18 14:13:33 -                 arr[j] = arr[j-1];
2019-03-18 14:13:33 -             }
2019-03-18 14:13:33 -             else
2019-03-18 14:13:33 -             {
2019-03-18 14:13:33 -                 arr[j] = temp;
2019-03-18 14:13:33 -                 break;
2019-03-18 14:13:33 -             }
2019-03-18 14:13:33 -             j--;
2019-03-18 14:13:33 -         }
2019-03-18 14:13:33 -     }
2019-03-18 14:13:33 -     return arr;
2019-03-18 14:13:33 - }
2019-03-18 14:13:33 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:13:33 - Console.WriteLine(InsertSort(arr));
2019-03-18 14:13:33 - (23,12): error CS0029: Cannot implicitly convert type 'int[]' to 'int'
2019-03-18 14:13:58 - public int[] InsertSort(int[] arr)
2019-03-18 14:13:58 - {
2019-03-18 14:13:58 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 14:13:58 -     {
2019-03-18 14:13:58 -         int temp = arr[i];
2019-03-18 14:13:58 -         int j = i;
2019-03-18 14:13:58 -         while (j>0)
2019-03-18 14:13:58 -         {
2019-03-18 14:13:58 -             if(arr[j-1]>temp)
2019-03-18 14:13:58 -             {
2019-03-18 14:13:58 -                 arr[j] = arr[j-1];
2019-03-18 14:13:58 -             }
2019-03-18 14:13:58 -             else
2019-03-18 14:13:58 -             {
2019-03-18 14:13:58 -                 arr[j] = temp;
2019-03-18 14:13:58 -                 break;
2019-03-18 14:13:58 -             }
2019-03-18 14:13:58 -             j--;
2019-03-18 14:13:58 -         }
2019-03-18 14:13:58 -     }
2019-03-18 14:13:58 -     return arr;
2019-03-18 14:13:58 - }
2019-03-18 14:13:58 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:13:58 - Console.WriteLine(InsertSort(arr));
2019-03-18 14:14:56 - public int[] InsertSort(int[] arr)
2019-03-18 14:14:56 - {
2019-03-18 14:14:56 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 14:14:56 -     {
2019-03-18 14:14:56 -         int temp = arr[i];
2019-03-18 14:14:56 -         int j = i;
2019-03-18 14:14:56 -         while (j>0)
2019-03-18 14:14:56 -         {
2019-03-18 14:14:56 -             if(arr[j-1]>temp)
2019-03-18 14:14:56 -             {
2019-03-18 14:14:56 -                 arr[j] = arr[j-1];
2019-03-18 14:14:56 -             }
2019-03-18 14:14:56 -             else
2019-03-18 14:14:56 -             {
2019-03-18 14:14:56 -                 arr[j] = temp;
2019-03-18 14:14:56 -                 break;
2019-03-18 14:14:56 -             }
2019-03-18 14:14:56 -             j--;
2019-03-18 14:14:56 -         }
2019-03-18 14:14:56 -     }
2019-03-18 14:14:56 -     return arr;
2019-03-18 14:14:56 - }
2019-03-18 14:14:56 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:14:56 - InsertSort(arr);
2019-03-18 14:14:56 - foreach(var i in arr)
2019-03-18 14:14:56 -     Console.Write(i+",");
2019-03-18 14:16:27 - public int[] InsertSort(int[] arr)
2019-03-18 14:16:27 - {
2019-03-18 14:16:27 -     int i,j,temp = 0
2019-03-18 14:16:27 -     for (i = 1; i<arr.Length;i++)
2019-03-18 14:16:27 -     {
2019-03-18 14:16:27 -         temp = arr[i];
2019-03-18 14:16:27 -         j = i;
2019-03-18 14:16:27 -         while (j>0)
2019-03-18 14:16:27 -         {
2019-03-18 14:16:27 -             if(arr[j-1]>temp)
2019-03-18 14:16:27 -             {
2019-03-18 14:16:27 -                 arr[j] = arr[j-1];
2019-03-18 14:16:27 -             }
2019-03-18 14:16:27 -             else
2019-03-18 14:16:27 -             {
2019-03-18 14:16:27 -                 arr[j] = temp;
2019-03-18 14:16:27 -                 break;
2019-03-18 14:16:27 -             }
2019-03-18 14:16:27 -             j--;
2019-03-18 14:16:27 -         }
2019-03-18 14:16:27 -     }
2019-03-18 14:16:27 -     return arr;
2019-03-18 14:16:27 - }
2019-03-18 14:16:27 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:16:27 - InsertSort(arr);
2019-03-18 14:16:27 - foreach(var i in arr)
2019-03-18 14:16:27 -     Console.Write(i+",");
2019-03-18 14:16:27 - (4,21): error CS1002: ; expected
2019-03-18 14:16:33 - public int[] InsertSort(int[] arr)
2019-03-18 14:16:33 - {
2019-03-18 14:16:33 -     int i,j,temp = 0;
2019-03-18 14:16:33 -     for (i = 1; i<arr.Length;i++)
2019-03-18 14:16:33 -     {
2019-03-18 14:16:33 -         temp = arr[i];
2019-03-18 14:16:33 -         j = i;
2019-03-18 14:16:33 -         while (j>0)
2019-03-18 14:16:33 -         {
2019-03-18 14:16:33 -             if(arr[j-1]>temp)
2019-03-18 14:16:33 -             {
2019-03-18 14:16:33 -                 arr[j] = arr[j-1];
2019-03-18 14:16:33 -             }
2019-03-18 14:16:33 -             else
2019-03-18 14:16:33 -             {
2019-03-18 14:16:33 -                 arr[j] = temp;
2019-03-18 14:16:33 -                 break;
2019-03-18 14:16:33 -             }
2019-03-18 14:16:33 -             j--;
2019-03-18 14:16:33 -         }
2019-03-18 14:16:33 -     }
2019-03-18 14:16:33 -     return arr;
2019-03-18 14:16:33 - }
2019-03-18 14:16:33 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:16:33 - InsertSort(arr);
2019-03-18 14:16:33 - foreach(var i in arr)
2019-03-18 14:16:33 -     Console.Write(i+",");
2019-03-18 14:16:35 - public int[] InsertSort(int[] arr)
2019-03-18 14:16:35 - {
2019-03-18 14:16:35 -     int i,j,temp = 0;
2019-03-18 14:16:35 -     for (i = 1; i<arr.Length;i++)
2019-03-18 14:16:35 -     {
2019-03-18 14:16:35 -         temp = arr[i];
2019-03-18 14:16:35 -         j = i;
2019-03-18 14:16:35 -         while (j>0)
2019-03-18 14:16:35 -         {
2019-03-18 14:16:35 -             if(arr[j-1]>temp)
2019-03-18 14:16:35 -             {
2019-03-18 14:16:35 -                 arr[j] = arr[j-1];
2019-03-18 14:16:35 -             }
2019-03-18 14:16:35 -             else
2019-03-18 14:16:35 -             {
2019-03-18 14:16:35 -                 arr[j] = temp;
2019-03-18 14:16:35 -                 break;
2019-03-18 14:16:35 -             }
2019-03-18 14:16:35 -             j--;
2019-03-18 14:16:35 -         }
2019-03-18 14:16:35 -     }
2019-03-18 14:16:35 -     return arr;
2019-03-18 14:16:35 - }
2019-03-18 14:16:35 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:16:35 - InsertSort(arr);
2019-03-18 14:16:35 - foreach(var i in arr)
2019-03-18 14:16:35 -     Console.Write(i+",");
2019-03-18 14:16:36 - public int[] InsertSort(int[] arr)
2019-03-18 14:16:36 - {
2019-03-18 14:16:36 -     int i,j,temp = 0;
2019-03-18 14:16:36 -     for (i = 1; i<arr.Length;i++)
2019-03-18 14:16:36 -     {
2019-03-18 14:16:36 -         temp = arr[i];
2019-03-18 14:16:36 -         j = i;
2019-03-18 14:16:36 -         while (j>0)
2019-03-18 14:16:36 -         {
2019-03-18 14:16:36 -             if(arr[j-1]>temp)
2019-03-18 14:16:36 -             {
2019-03-18 14:16:36 -                 arr[j] = arr[j-1];
2019-03-18 14:16:36 -             }
2019-03-18 14:16:36 -             else
2019-03-18 14:16:36 -             {
2019-03-18 14:16:36 -                 arr[j] = temp;
2019-03-18 14:16:36 -                 break;
2019-03-18 14:16:36 -             }
2019-03-18 14:16:36 -             j--;
2019-03-18 14:16:36 -         }
2019-03-18 14:16:36 -     }
2019-03-18 14:16:36 -     return arr;
2019-03-18 14:16:36 - }
2019-03-18 14:16:36 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:16:36 - InsertSort(arr);
2019-03-18 14:16:36 - foreach(var i in arr)
2019-03-18 14:16:36 -     Console.Write(i+",");
2019-03-18 14:16:36 - public int[] InsertSort(int[] arr)
2019-03-18 14:16:36 - {
2019-03-18 14:16:36 -     int i,j,temp = 0;
2019-03-18 14:16:36 -     for (i = 1; i<arr.Length;i++)
2019-03-18 14:16:36 -     {
2019-03-18 14:16:36 -         temp = arr[i];
2019-03-18 14:16:36 -         j = i;
2019-03-18 14:16:36 -         while (j>0)
2019-03-18 14:16:36 -         {
2019-03-18 14:16:36 -             if(arr[j-1]>temp)
2019-03-18 14:16:36 -             {
2019-03-18 14:16:36 -                 arr[j] = arr[j-1];
2019-03-18 14:16:36 -             }
2019-03-18 14:16:36 -             else
2019-03-18 14:16:36 -             {
2019-03-18 14:16:36 -                 arr[j] = temp;
2019-03-18 14:16:36 -                 break;
2019-03-18 14:16:36 -             }
2019-03-18 14:16:36 -             j--;
2019-03-18 14:16:36 -         }
2019-03-18 14:16:36 -     }
2019-03-18 14:16:36 -     return arr;
2019-03-18 14:16:36 - }
2019-03-18 14:16:36 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:16:36 - InsertSort(arr);
2019-03-18 14:16:36 - foreach(var i in arr)
2019-03-18 14:16:36 -     Console.Write(i+",");
2019-03-18 14:16:36 - public int[] InsertSort(int[] arr)
2019-03-18 14:16:36 - {
2019-03-18 14:16:36 -     int i,j,temp = 0;
2019-03-18 14:16:36 -     for (i = 1; i<arr.Length;i++)
2019-03-18 14:16:36 -     {
2019-03-18 14:16:36 -         temp = arr[i];
2019-03-18 14:16:36 -         j = i;
2019-03-18 14:16:36 -         while (j>0)
2019-03-18 14:16:36 -         {
2019-03-18 14:16:36 -             if(arr[j-1]>temp)
2019-03-18 14:16:36 -             {
2019-03-18 14:16:36 -                 arr[j] = arr[j-1];
2019-03-18 14:16:36 -             }
2019-03-18 14:16:36 -             else
2019-03-18 14:16:36 -             {
2019-03-18 14:16:36 -                 arr[j] = temp;
2019-03-18 14:16:36 -                 break;
2019-03-18 14:16:36 -             }
2019-03-18 14:16:36 -             j--;
2019-03-18 14:16:36 -         }
2019-03-18 14:16:36 -     }
2019-03-18 14:16:36 -     return arr;
2019-03-18 14:16:36 - }
2019-03-18 14:16:36 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:16:36 - InsertSort(arr);
2019-03-18 14:16:36 - foreach(var i in arr)
2019-03-18 14:16:36 -     Console.Write(i+",");
2019-03-18 14:18:29 - public int[] InsertSort(int[] arr)
2019-03-18 14:18:29 - {
2019-03-18 14:18:29 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 14:18:29 -     {
2019-03-18 14:18:29 -         int temp = arr[i];
2019-03-18 14:18:29 -         int j = i;
2019-03-18 14:18:29 -         for (j = i; j >= 0; j--) {
2019-03-18 14:18:29 -           if (arr[j - 1] > temp) {
2019-03-18 14:18:29 -             arr[j] = arr[j - 1];
2019-03-18 14:18:29 -           } else {
2019-03-18 14:18:29 -             arr[j] = temp;
2019-03-18 14:18:29 -             break;
2019-03-18 14:18:29 -           }
2019-03-18 14:18:29 -     }
2019-03-18 14:18:29 -     return arr;
2019-03-18 14:18:29 - }
2019-03-18 14:18:29 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:18:29 - InsertSort(arr);
2019-03-18 14:18:29 - foreach(var i in arr)
2019-03-18 14:18:29 -     Console.Write(i+",")
2019-03-18 14:18:29 - (25,25): error CS1513: } expected
2019-03-18 14:18:40 - public int[] InsertSort(int[] arr)
2019-03-18 14:18:40 - {
2019-03-18 14:18:40 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 14:18:40 -     {
2019-03-18 14:18:40 -         int temp = arr[i];
2019-03-18 14:18:40 -         int j = i;
2019-03-18 14:18:40 -         for (j = i; j >= 0; j--) {
2019-03-18 14:18:40 -           if (arr[j - 1] > temp) {
2019-03-18 14:18:40 -             arr[j] = arr[j - 1];
2019-03-18 14:18:40 -           } else {
2019-03-18 14:18:40 -             arr[j] = temp;
2019-03-18 14:18:40 -             break;
2019-03-18 14:18:40 -           }
2019-03-18 14:18:40 -     }
2019-03-18 14:18:40 -     return arr;
2019-03-18 14:18:40 - }
2019-03-18 14:18:40 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:18:40 - InsertSort(arr);
2019-03-18 14:18:40 - foreach(var i in arr)
2019-03-18 14:18:40 -     Console.Write(i+",");
2019-03-18 14:18:40 - (25,26): error CS1513: } expected
2019-03-18 14:18:41 - public int[] InsertSort(int[] arr)
2019-03-18 14:18:41 - {
2019-03-18 14:18:41 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 14:18:41 -     {
2019-03-18 14:18:41 -         int temp = arr[i];
2019-03-18 14:18:41 -         int j = i;
2019-03-18 14:18:41 -         for (j = i; j >= 0; j--) {
2019-03-18 14:18:41 -           if (arr[j - 1] > temp) {
2019-03-18 14:18:41 -             arr[j] = arr[j - 1];
2019-03-18 14:18:41 -           } else {
2019-03-18 14:18:41 -             arr[j] = temp;
2019-03-18 14:18:41 -             break;
2019-03-18 14:18:41 -           }
2019-03-18 14:18:41 -     }
2019-03-18 14:18:41 -     return arr;
2019-03-18 14:18:41 - }
2019-03-18 14:18:41 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:18:41 - InsertSort(arr);
2019-03-18 14:18:41 - foreach(var i in arr)
2019-03-18 14:18:41 -     Console.Write(i+",");
2019-03-18 14:18:41 - (25,26): error CS1513: } expected
2019-03-18 14:18:41 - public int[] InsertSort(int[] arr)
2019-03-18 14:18:41 - {
2019-03-18 14:18:41 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 14:18:41 -     {
2019-03-18 14:18:41 -         int temp = arr[i];
2019-03-18 14:18:41 -         int j = i;
2019-03-18 14:18:41 -         for (j = i; j >= 0; j--) {
2019-03-18 14:18:41 -           if (arr[j - 1] > temp) {
2019-03-18 14:18:41 -             arr[j] = arr[j - 1];
2019-03-18 14:18:41 -           } else {
2019-03-18 14:18:41 -             arr[j] = temp;
2019-03-18 14:18:41 -             break;
2019-03-18 14:18:41 -           }
2019-03-18 14:18:41 -     }
2019-03-18 14:18:41 -     return arr;
2019-03-18 14:18:41 - }
2019-03-18 14:18:41 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:18:41 - InsertSort(arr);
2019-03-18 14:18:41 - foreach(var i in arr)
2019-03-18 14:18:41 -     Console.Write(i+",");
2019-03-18 14:18:41 - (25,26): error CS1513: } expected
2019-03-18 14:18:53 - public int[] InsertSort(int[] arr)
2019-03-18 14:18:53 - {
2019-03-18 14:18:53 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 14:18:53 -     {
2019-03-18 14:18:53 -         int temp = arr[i];
2019-03-18 14:18:53 -         int j = i;
2019-03-18 14:18:53 -         for (j = i; j >= 0; j--) 
2019-03-18 14:18:53 -         {
2019-03-18 14:18:53 -           if (arr[j - 1] > temp) 
2019-03-18 14:18:53 -           {
2019-03-18 14:18:53 -             arr[j] = arr[j - 1];
2019-03-18 14:18:53 -           } else {
2019-03-18 14:18:53 -             arr[j] = temp;
2019-03-18 14:18:53 -             break;
2019-03-18 14:18:53 -           }
2019-03-18 14:18:53 -         }
2019-03-18 14:18:53 -     }
2019-03-18 14:18:53 -     return arr;
2019-03-18 14:18:53 - }
2019-03-18 14:18:53 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:18:53 - InsertSort(arr);
2019-03-18 14:18:53 - foreach(var i in arr)
2019-03-18 14:18:53 -     Console.Write(i+",");
2019-03-18 14:18:53 - One or more errors occurred.
2019-03-18 14:18:53 - Index was outside the bounds of the array.
2019-03-18 14:19:35 - public int[] InsertSort(int[] arr)
2019-03-18 14:19:35 - {
2019-03-18 14:19:35 -     int i, j ,temp = 0;
2019-03-18 14:19:35 -     for ( i = 1; i<arr.Length;i++)
2019-03-18 14:19:35 -     {
2019-03-18 14:19:35 -          temp = arr[i];
2019-03-18 14:19:35 -         j = i;
2019-03-18 14:19:35 -         for (j = i; j >= 0; j--) 
2019-03-18 14:19:35 -         {
2019-03-18 14:19:35 -           if (arr[j - 1] > temp) 
2019-03-18 14:19:35 -           {
2019-03-18 14:19:35 -             arr[j] = arr[j - 1];
2019-03-18 14:19:35 -           } else {
2019-03-18 14:19:35 -             arr[j] = temp;
2019-03-18 14:19:35 -             break;
2019-03-18 14:19:35 -           }
2019-03-18 14:19:35 -         }
2019-03-18 14:19:35 -     }
2019-03-18 14:19:35 -     return arr;
2019-03-18 14:19:35 - }
2019-03-18 14:19:35 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:19:35 - InsertSort(arr);
2019-03-18 14:19:35 - foreach(var i in arr)
2019-03-18 14:19:35 -     Console.Write(i+",");
2019-03-18 14:19:35 - One or more errors occurred.
2019-03-18 14:19:35 - Index was outside the bounds of the array.
2019-03-18 14:20:25 - public int[] InsertSort(int[] arr)
2019-03-18 14:20:25 - {
2019-03-18 14:20:25 -     int i, j ,temp = 0;
2019-03-18 14:20:25 -     for ( i = 1; i<arr.Length;i++)
2019-03-18 14:20:25 -     {
2019-03-18 14:20:25 -          temp = arr[i];
2019-03-18 14:20:25 -         for (j = i; j >= 0; j--) 
2019-03-18 14:20:25 -         {
2019-03-18 14:20:25 -           if (arr[j - 1] > temp) 
2019-03-18 14:20:25 -           {
2019-03-18 14:20:25 -             arr[j] = arr[j - 1];
2019-03-18 14:20:25 -           } else {
2019-03-18 14:20:25 -             arr[j] = temp;
2019-03-18 14:20:25 -             break;
2019-03-18 14:20:25 -           }
2019-03-18 14:20:25 -         }
2019-03-18 14:20:25 -     }
2019-03-18 14:20:25 -     return arr;
2019-03-18 14:20:25 - }
2019-03-18 14:20:25 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:20:25 - InsertSort(arr);
2019-03-18 14:20:25 - foreach(var i in arr)
2019-03-18 14:20:25 -     Console.Write(i+",");
2019-03-18 14:20:25 - One or more errors occurred.
2019-03-18 14:20:25 - Index was outside the bounds of the array.
2019-03-18 14:20:26 - public int[] InsertSort(int[] arr)
2019-03-18 14:20:26 - {
2019-03-18 14:20:26 -     int i, j ,temp = 0;
2019-03-18 14:20:26 -     for ( i = 1; i<arr.Length;i++)
2019-03-18 14:20:26 -     {
2019-03-18 14:20:26 -          temp = arr[i];
2019-03-18 14:20:26 -         for (j = i; j >= 0; j--) 
2019-03-18 14:20:26 -         {
2019-03-18 14:20:26 -           if (arr[j - 1] > temp) 
2019-03-18 14:20:26 -           {
2019-03-18 14:20:26 -             arr[j] = arr[j - 1];
2019-03-18 14:20:26 -           } else {
2019-03-18 14:20:26 -             arr[j] = temp;
2019-03-18 14:20:26 -             break;
2019-03-18 14:20:26 -           }
2019-03-18 14:20:26 -         }
2019-03-18 14:20:26 -     }
2019-03-18 14:20:26 -     return arr;
2019-03-18 14:20:26 - }
2019-03-18 14:20:26 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:20:26 - InsertSort(arr);
2019-03-18 14:20:26 - foreach(var i in arr)
2019-03-18 14:20:26 -     Console.Write(i+",");
2019-03-18 14:20:26 - One or more errors occurred.
2019-03-18 14:20:26 - Index was outside the bounds of the array.
2019-03-18 14:20:26 - public int[] InsertSort(int[] arr)
2019-03-18 14:20:26 - {
2019-03-18 14:20:26 -     int i, j ,temp = 0;
2019-03-18 14:20:26 -     for ( i = 1; i<arr.Length;i++)
2019-03-18 14:20:26 -     {
2019-03-18 14:20:26 -          temp = arr[i];
2019-03-18 14:20:26 -         for (j = i; j >= 0; j--) 
2019-03-18 14:20:26 -         {
2019-03-18 14:20:26 -           if (arr[j - 1] > temp) 
2019-03-18 14:20:26 -           {
2019-03-18 14:20:26 -             arr[j] = arr[j - 1];
2019-03-18 14:20:26 -           } else {
2019-03-18 14:20:26 -             arr[j] = temp;
2019-03-18 14:20:26 -             break;
2019-03-18 14:20:26 -           }
2019-03-18 14:20:26 -         }
2019-03-18 14:20:26 -     }
2019-03-18 14:20:26 -     return arr;
2019-03-18 14:20:26 - }
2019-03-18 14:20:26 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:20:26 - InsertSort(arr);
2019-03-18 14:20:26 - foreach(var i in arr)
2019-03-18 14:20:26 -     Console.Write(i+",");
2019-03-18 14:20:26 - One or more errors occurred.
2019-03-18 14:20:26 - Index was outside the bounds of the array.
2019-03-18 14:20:27 - public int[] InsertSort(int[] arr)
2019-03-18 14:20:27 - {
2019-03-18 14:20:27 -     int i, j ,temp = 0;
2019-03-18 14:20:27 -     for ( i = 1; i<arr.Length;i++)
2019-03-18 14:20:27 -     {
2019-03-18 14:20:27 -          temp = arr[i];
2019-03-18 14:20:27 -         for (j = i; j >= 0; j--) 
2019-03-18 14:20:27 -         {
2019-03-18 14:20:27 -           if (arr[j - 1] > temp) 
2019-03-18 14:20:27 -           {
2019-03-18 14:20:27 -             arr[j] = arr[j - 1];
2019-03-18 14:20:27 -           } else {
2019-03-18 14:20:27 -             arr[j] = temp;
2019-03-18 14:20:27 -             break;
2019-03-18 14:20:27 -           }
2019-03-18 14:20:27 -         }
2019-03-18 14:20:27 -     }
2019-03-18 14:20:27 -     return arr;
2019-03-18 14:20:27 - }
2019-03-18 14:20:27 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:20:27 - InsertSort(arr);
2019-03-18 14:20:27 - foreach(var i in arr)
2019-03-18 14:20:27 -     Console.Write(i+",");
2019-03-18 14:20:27 - One or more errors occurred.
2019-03-18 14:20:27 - Index was outside the bounds of the array.
2019-03-18 14:20:27 - public int[] InsertSort(int[] arr)
2019-03-18 14:20:27 - {
2019-03-18 14:20:27 -     int i, j ,temp = 0;
2019-03-18 14:20:27 -     for ( i = 1; i<arr.Length;i++)
2019-03-18 14:20:27 -     {
2019-03-18 14:20:27 -          temp = arr[i];
2019-03-18 14:20:27 -         for (j = i; j >= 0; j--) 
2019-03-18 14:20:27 -         {
2019-03-18 14:20:27 -           if (arr[j - 1] > temp) 
2019-03-18 14:20:27 -           {
2019-03-18 14:20:27 -             arr[j] = arr[j - 1];
2019-03-18 14:20:27 -           } else {
2019-03-18 14:20:27 -             arr[j] = temp;
2019-03-18 14:20:27 -             break;
2019-03-18 14:20:27 -           }
2019-03-18 14:20:27 -         }
2019-03-18 14:20:27 -     }
2019-03-18 14:20:27 -     return arr;
2019-03-18 14:20:27 - }
2019-03-18 14:20:27 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:20:27 - InsertSort(arr);
2019-03-18 14:20:27 - foreach(var i in arr)
2019-03-18 14:20:27 -     Console.Write(i+",");
2019-03-18 14:20:27 - One or more errors occurred.
2019-03-18 14:20:27 - Index was outside the bounds of the array.
2019-03-18 14:21:30 - public int[] InsertSort(int[] arr)
2019-03-18 14:21:30 - {
2019-03-18 14:21:30 -     int i, j ,temp = 0;
2019-03-18 14:21:30 -     for ( i = 1; i<arr.Length;i++)
2019-03-18 14:21:30 -     {
2019-03-18 14:21:30 -          temp = arr[i];
2019-03-18 14:21:30 -         for (j = i; j >= 0; j--) 
2019-03-18 14:21:30 -         {
2019-03-18 14:21:30 -           if (arr[j - 1] > temp) 
2019-03-18 14:21:30 -           {
2019-03-18 14:21:30 -             arr[j] = arr[j - 1];
2019-03-18 14:21:30 -           } else {
2019-03-18 14:21:30 -             arr[j] = temp;
2019-03-18 14:21:30 -             break;
2019-03-18 14:21:30 -           }
2019-03-18 14:21:30 -         }
2019-03-18 14:21:30 -     }
2019-03-18 14:21:30 -     return arr;
2019-03-18 14:21:30 - }
2019-03-18 14:21:30 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:21:30 - InsertSort(arr);
2019-03-18 14:21:30 - One or more errors occurred.
2019-03-18 14:21:30 - Index was outside the bounds of the array.
2019-03-18 14:21:30 - public int[] InsertSort(int[] arr)
2019-03-18 14:21:30 - {
2019-03-18 14:21:30 -     int i, j ,temp = 0;
2019-03-18 14:21:30 -     for ( i = 1; i<arr.Length;i++)
2019-03-18 14:21:30 -     {
2019-03-18 14:21:30 -          temp = arr[i];
2019-03-18 14:21:30 -         for (j = i; j >= 0; j--) 
2019-03-18 14:21:30 -         {
2019-03-18 14:21:30 -           if (arr[j - 1] > temp) 
2019-03-18 14:21:30 -           {
2019-03-18 14:21:30 -             arr[j] = arr[j - 1];
2019-03-18 14:21:30 -           } else {
2019-03-18 14:21:30 -             arr[j] = temp;
2019-03-18 14:21:30 -             break;
2019-03-18 14:21:30 -           }
2019-03-18 14:21:30 -         }
2019-03-18 14:21:30 -     }
2019-03-18 14:21:30 -     return arr;
2019-03-18 14:21:30 - }
2019-03-18 14:21:30 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:21:30 - InsertSort(arr);
2019-03-18 14:21:30 - One or more errors occurred.
2019-03-18 14:21:30 - Index was outside the bounds of the array.
2019-03-18 14:21:31 - public int[] InsertSort(int[] arr)
2019-03-18 14:21:31 - {
2019-03-18 14:21:31 -     int i, j ,temp = 0;
2019-03-18 14:21:31 -     for ( i = 1; i<arr.Length;i++)
2019-03-18 14:21:31 -     {
2019-03-18 14:21:31 -          temp = arr[i];
2019-03-18 14:21:31 -         for (j = i; j >= 0; j--) 
2019-03-18 14:21:31 -         {
2019-03-18 14:21:31 -           if (arr[j - 1] > temp) 
2019-03-18 14:21:31 -           {
2019-03-18 14:21:31 -             arr[j] = arr[j - 1];
2019-03-18 14:21:31 -           } else {
2019-03-18 14:21:31 -             arr[j] = temp;
2019-03-18 14:21:31 -             break;
2019-03-18 14:21:31 -           }
2019-03-18 14:21:31 -         }
2019-03-18 14:21:31 -     }
2019-03-18 14:21:31 -     return arr;
2019-03-18 14:21:31 - }
2019-03-18 14:21:31 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:21:31 - InsertSort(arr);
2019-03-18 14:21:31 - One or more errors occurred.
2019-03-18 14:21:31 - Index was outside the bounds of the array.
2019-03-18 14:21:31 - public int[] InsertSort(int[] arr)
2019-03-18 14:21:31 - {
2019-03-18 14:21:31 -     int i, j ,temp = 0;
2019-03-18 14:21:31 -     for ( i = 1; i<arr.Length;i++)
2019-03-18 14:21:31 -     {
2019-03-18 14:21:31 -          temp = arr[i];
2019-03-18 14:21:31 -         for (j = i; j >= 0; j--) 
2019-03-18 14:21:31 -         {
2019-03-18 14:21:31 -           if (arr[j - 1] > temp) 
2019-03-18 14:21:31 -           {
2019-03-18 14:21:31 -             arr[j] = arr[j - 1];
2019-03-18 14:21:31 -           } else {
2019-03-18 14:21:31 -             arr[j] = temp;
2019-03-18 14:21:31 -             break;
2019-03-18 14:21:31 -           }
2019-03-18 14:21:31 -         }
2019-03-18 14:21:31 -     }
2019-03-18 14:21:31 -     return arr;
2019-03-18 14:21:31 - }
2019-03-18 14:21:31 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:21:31 - InsertSort(arr);
2019-03-18 14:21:31 - One or more errors occurred.
2019-03-18 14:21:31 - Index was outside the bounds of the array.
2019-03-18 14:23:24 - public int[] InsertSort(int[] arr)
2019-03-18 14:23:24 - {
2019-03-18 14:23:24 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 14:23:24 -     {
2019-03-18 14:23:24 -         int temp = arr[i];
2019-03-18 14:23:24 -         for (j = i-1; j >= 0; j--) 
2019-03-18 14:23:24 -         {
2019-03-18 14:23:24 -           if (arr[j - 1] > temp) 
2019-03-18 14:23:24 -           {
2019-03-18 14:23:24 -             arr[j] = arr[j - 1];
2019-03-18 14:23:24 -           } else {
2019-03-18 14:23:24 -             arr[j] = temp;
2019-03-18 14:23:24 -             break;
2019-03-18 14:23:24 -           }
2019-03-18 14:23:24 -         }
2019-03-18 14:23:24 -     }
2019-03-18 14:23:24 -     return arr;
2019-03-18 14:23:24 - }
2019-03-18 14:23:24 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:23:24 - InsertSort(arr);
2019-03-18 14:23:24 - foreach(var i in arr)
2019-03-18 14:23:24 -     Console.Write(i+",");
2019-03-18 14:23:24 - (8,14): error CS0103: The name 'j' does not exist in the current context
2019-03-18 14:23:24 - (8,23): error CS0103: The name 'j' does not exist in the current context
2019-03-18 14:23:24 - (8,31): error CS0103: The name 'j' does not exist in the current context
2019-03-18 14:23:24 - (10,19): error CS0103: The name 'j' does not exist in the current context
2019-03-18 14:23:24 - (12,17): error CS0103: The name 'j' does not exist in the current context
2019-03-18 14:23:24 - (12,26): error CS0103: The name 'j' does not exist in the current context
2019-03-18 14:23:24 - (14,17): error CS0103: The name 'j' does not exist in the current context
2019-03-18 14:23:45 - public int[] InsertSort(int[] arr)
2019-03-18 14:23:45 - {
2019-03-18 14:23:45 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 14:23:45 -     {
2019-03-18 14:23:45 -         int temp = arr[i];
2019-03-18 14:23:45 -         for (int j = i; j >= 0; j--) 
2019-03-18 14:23:45 -         {
2019-03-18 14:23:45 -           if (arr[j - 1] > temp) 
2019-03-18 14:23:45 -           {
2019-03-18 14:23:45 -             arr[j] = arr[j - 1];
2019-03-18 14:23:45 -           } else {
2019-03-18 14:23:45 -             arr[j] = temp;
2019-03-18 14:23:45 -             break;
2019-03-18 14:23:45 -           }
2019-03-18 14:23:45 -         }
2019-03-18 14:23:45 -     }
2019-03-18 14:23:45 -     return arr;
2019-03-18 14:23:45 - }
2019-03-18 14:23:45 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:23:45 - InsertSort(arr);
2019-03-18 14:23:45 - foreach(var i in arr)
2019-03-18 14:23:45 -     Console.Write(i+",");
2019-03-18 14:23:45 - One or more errors occurred.
2019-03-18 14:23:45 - Index was outside the bounds of the array.
2019-03-18 14:23:48 - public int[] InsertSort(int[] arr)
2019-03-18 14:23:48 - {
2019-03-18 14:23:48 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 14:23:48 -     {
2019-03-18 14:23:48 -         int temp = arr[i];
2019-03-18 14:23:48 -         for (int j = i-1; j >= 0; j--) 
2019-03-18 14:23:48 -         {
2019-03-18 14:23:48 -           if (arr[j - 1] > temp) 
2019-03-18 14:23:48 -           {
2019-03-18 14:23:48 -             arr[j] = arr[j - 1];
2019-03-18 14:23:48 -           } else {
2019-03-18 14:23:48 -             arr[j] = temp;
2019-03-18 14:23:48 -             break;
2019-03-18 14:23:48 -           }
2019-03-18 14:23:48 -         }
2019-03-18 14:23:48 -     }
2019-03-18 14:23:48 -     return arr;
2019-03-18 14:23:48 - }
2019-03-18 14:23:48 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:23:48 - InsertSort(arr);
2019-03-18 14:23:48 - foreach(var i in arr)
2019-03-18 14:23:48 -     Console.Write(i+",");
2019-03-18 14:23:48 - One or more errors occurred.
2019-03-18 14:23:48 - Index was outside the bounds of the array.
2019-03-18 14:23:49 - public int[] InsertSort(int[] arr)
2019-03-18 14:23:49 - {
2019-03-18 14:23:49 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 14:23:49 -     {
2019-03-18 14:23:49 -         int temp = arr[i];
2019-03-18 14:23:49 -         for (int j = i-1; j >= 0; j--) 
2019-03-18 14:23:49 -         {
2019-03-18 14:23:49 -           if (arr[j - 1] > temp) 
2019-03-18 14:23:49 -           {
2019-03-18 14:23:49 -             arr[j] = arr[j - 1];
2019-03-18 14:23:49 -           } else {
2019-03-18 14:23:49 -             arr[j] = temp;
2019-03-18 14:23:49 -             break;
2019-03-18 14:23:49 -           }
2019-03-18 14:23:49 -         }
2019-03-18 14:23:49 -     }
2019-03-18 14:23:49 -     return arr;
2019-03-18 14:23:49 - }
2019-03-18 14:23:49 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:23:49 - InsertSort(arr);
2019-03-18 14:23:49 - foreach(var i in arr)
2019-03-18 14:23:49 -     Console.Write(i+",");
2019-03-18 14:23:49 - One or more errors occurred.
2019-03-18 14:23:49 - Index was outside the bounds of the array.
2019-03-18 14:23:49 - public int[] InsertSort(int[] arr)
2019-03-18 14:23:49 - {
2019-03-18 14:23:49 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 14:23:49 -     {
2019-03-18 14:23:49 -         int temp = arr[i];
2019-03-18 14:23:49 -         for (int j = i-1; j >= 0; j--) 
2019-03-18 14:23:49 -         {
2019-03-18 14:23:49 -           if (arr[j - 1] > temp) 
2019-03-18 14:23:49 -           {
2019-03-18 14:23:49 -             arr[j] = arr[j - 1];
2019-03-18 14:23:49 -           } else {
2019-03-18 14:23:49 -             arr[j] = temp;
2019-03-18 14:23:49 -             break;
2019-03-18 14:23:49 -           }
2019-03-18 14:23:49 -         }
2019-03-18 14:23:49 -     }
2019-03-18 14:23:49 -     return arr;
2019-03-18 14:23:49 - }
2019-03-18 14:23:49 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:23:49 - InsertSort(arr);
2019-03-18 14:23:49 - foreach(var i in arr)
2019-03-18 14:23:49 -     Console.Write(i+",");
2019-03-18 14:23:49 - One or more errors occurred.
2019-03-18 14:23:49 - Index was outside the bounds of the array.
2019-03-18 14:23:50 - public int[] InsertSort(int[] arr)
2019-03-18 14:23:50 - {
2019-03-18 14:23:50 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 14:23:50 -     {
2019-03-18 14:23:50 -         int temp = arr[i];
2019-03-18 14:23:50 -         for (int j = i-1; j >= 0; j--) 
2019-03-18 14:23:50 -         {
2019-03-18 14:23:50 -           if (arr[j - 1] > temp) 
2019-03-18 14:23:50 -           {
2019-03-18 14:23:50 -             arr[j] = arr[j - 1];
2019-03-18 14:23:50 -           } else {
2019-03-18 14:23:50 -             arr[j] = temp;
2019-03-18 14:23:50 -             break;
2019-03-18 14:23:50 -           }
2019-03-18 14:23:50 -         }
2019-03-18 14:23:50 -     }
2019-03-18 14:23:50 -     return arr;
2019-03-18 14:23:50 - }
2019-03-18 14:23:50 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:23:50 - InsertSort(arr);
2019-03-18 14:23:50 - foreach(var i in arr)
2019-03-18 14:23:50 -     Console.Write(i+",");
2019-03-18 14:23:50 - One or more errors occurred.
2019-03-18 14:23:50 - Index was outside the bounds of the array.
2019-03-18 14:24:19 - public int[] InsertSort(int[] arr)
2019-03-18 14:24:19 - {
2019-03-18 14:24:19 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 14:24:19 -     {
2019-03-18 14:24:19 -         int temp = arr[i];
2019-03-18 14:24:19 -         for (int j = i-1; j >= 0; j--) 
2019-03-18 14:24:19 -         {
2019-03-18 14:24:19 -           if (arr[j] > temp) 
2019-03-18 14:24:19 -           {
2019-03-18 14:24:19 -             arr[j] = arr[j - 1];
2019-03-18 14:24:19 -           } else {
2019-03-18 14:24:19 -             arr[j] = temp;
2019-03-18 14:24:19 -             break;
2019-03-18 14:24:19 -           }
2019-03-18 14:24:19 -         }
2019-03-18 14:24:19 -     }
2019-03-18 14:24:19 -     return arr;
2019-03-18 14:24:19 - }
2019-03-18 14:24:19 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:24:19 - InsertSort(arr);
2019-03-18 14:24:19 - foreach(var i in arr)
2019-03-18 14:24:19 -     Console.Write(i+",");
2019-03-18 14:24:19 - One or more errors occurred.
2019-03-18 14:24:19 - Index was outside the bounds of the array.
2019-03-18 14:24:43 - public int[] InsertSort(int[] arr)
2019-03-18 14:24:43 - {
2019-03-18 14:24:43 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 14:24:43 -     {
2019-03-18 14:24:43 -         int temp = arr[i];
2019-03-18 14:24:43 -         for (int j = i-1; j >= 0; j--) 
2019-03-18 14:24:43 -         {
2019-03-18 14:24:43 -           if (arr[j] > temp) 
2019-03-18 14:24:43 -           {
2019-03-18 14:24:43 -             arr[j+1] = arr[j];
2019-03-18 14:24:43 -           } else {
2019-03-18 14:24:43 -             arr[j+1] = temp;
2019-03-18 14:24:43 -             break;
2019-03-18 14:24:43 -           }
2019-03-18 14:24:43 -         }
2019-03-18 14:24:43 -     }
2019-03-18 14:24:43 -     return arr;
2019-03-18 14:24:43 - }
2019-03-18 14:24:43 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:24:43 - InsertSort(arr);
2019-03-18 14:24:43 - foreach(var i in arr)
2019-03-18 14:24:43 -     Console.Write(i+",");
2019-03-18 14:24:44 - public int[] InsertSort(int[] arr)
2019-03-18 14:24:44 - {
2019-03-18 14:24:44 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 14:24:44 -     {
2019-03-18 14:24:44 -         int temp = arr[i];
2019-03-18 14:24:44 -         for (int j = i-1; j >= 0; j--) 
2019-03-18 14:24:44 -         {
2019-03-18 14:24:44 -           if (arr[j] > temp) 
2019-03-18 14:24:44 -           {
2019-03-18 14:24:44 -             arr[j+1] = arr[j];
2019-03-18 14:24:44 -           } else {
2019-03-18 14:24:44 -             arr[j+1] = temp;
2019-03-18 14:24:44 -             break;
2019-03-18 14:24:44 -           }
2019-03-18 14:24:44 -         }
2019-03-18 14:24:44 -     }
2019-03-18 14:24:44 -     return arr;
2019-03-18 14:24:44 - }
2019-03-18 14:24:44 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:24:44 - InsertSort(arr);
2019-03-18 14:24:44 - foreach(var i in arr)
2019-03-18 14:24:44 -     Console.Write(i+",");
2019-03-18 14:24:45 - public int[] InsertSort(int[] arr)
2019-03-18 14:24:45 - {
2019-03-18 14:24:45 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 14:24:45 -     {
2019-03-18 14:24:45 -         int temp = arr[i];
2019-03-18 14:24:45 -         for (int j = i-1; j >= 0; j--) 
2019-03-18 14:24:45 -         {
2019-03-18 14:24:45 -           if (arr[j] > temp) 
2019-03-18 14:24:45 -           {
2019-03-18 14:24:45 -             arr[j+1] = arr[j];
2019-03-18 14:24:45 -           } else {
2019-03-18 14:24:45 -             arr[j+1] = temp;
2019-03-18 14:24:45 -             break;
2019-03-18 14:24:45 -           }
2019-03-18 14:24:45 -         }
2019-03-18 14:24:45 -     }
2019-03-18 14:24:45 -     return arr;
2019-03-18 14:24:45 - }
2019-03-18 14:24:45 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:24:45 - InsertSort(arr);
2019-03-18 14:24:45 - foreach(var i in arr)
2019-03-18 14:24:45 -     Console.Write(i+",");
2019-03-18 14:24:45 - public int[] InsertSort(int[] arr)
2019-03-18 14:24:45 - {
2019-03-18 14:24:45 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 14:24:45 -     {
2019-03-18 14:24:45 -         int temp = arr[i];
2019-03-18 14:24:45 -         for (int j = i-1; j >= 0; j--) 
2019-03-18 14:24:45 -         {
2019-03-18 14:24:45 -           if (arr[j] > temp) 
2019-03-18 14:24:45 -           {
2019-03-18 14:24:45 -             arr[j+1] = arr[j];
2019-03-18 14:24:45 -           } else {
2019-03-18 14:24:45 -             arr[j+1] = temp;
2019-03-18 14:24:45 -             break;
2019-03-18 14:24:45 -           }
2019-03-18 14:24:45 -         }
2019-03-18 14:24:45 -     }
2019-03-18 14:24:45 -     return arr;
2019-03-18 14:24:45 - }
2019-03-18 14:24:45 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:24:45 - InsertSort(arr);
2019-03-18 14:24:45 - foreach(var i in arr)
2019-03-18 14:24:45 -     Console.Write(i+",");
2019-03-18 14:24:45 - public int[] InsertSort(int[] arr)
2019-03-18 14:24:45 - {
2019-03-18 14:24:45 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 14:24:45 -     {
2019-03-18 14:24:45 -         int temp = arr[i];
2019-03-18 14:24:45 -         for (int j = i-1; j >= 0; j--) 
2019-03-18 14:24:45 -         {
2019-03-18 14:24:45 -           if (arr[j] > temp) 
2019-03-18 14:24:45 -           {
2019-03-18 14:24:45 -             arr[j+1] = arr[j];
2019-03-18 14:24:45 -           } else {
2019-03-18 14:24:45 -             arr[j+1] = temp;
2019-03-18 14:24:45 -             break;
2019-03-18 14:24:45 -           }
2019-03-18 14:24:45 -         }
2019-03-18 14:24:45 -     }
2019-03-18 14:24:45 -     return arr;
2019-03-18 14:24:45 - }
2019-03-18 14:24:45 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:24:45 - InsertSort(arr);
2019-03-18 14:24:45 - foreach(var i in arr)
2019-03-18 14:24:45 -     Console.Write(i+",");
2019-03-18 14:24:46 - public int[] InsertSort(int[] arr)
2019-03-18 14:24:46 - {
2019-03-18 14:24:46 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 14:24:46 -     {
2019-03-18 14:24:46 -         int temp = arr[i];
2019-03-18 14:24:46 -         for (int j = i-1; j >= 0; j--) 
2019-03-18 14:24:46 -         {
2019-03-18 14:24:46 -           if (arr[j] > temp) 
2019-03-18 14:24:46 -           {
2019-03-18 14:24:46 -             arr[j+1] = arr[j];
2019-03-18 14:24:46 -           } else {
2019-03-18 14:24:46 -             arr[j+1] = temp;
2019-03-18 14:24:46 -             break;
2019-03-18 14:24:46 -           }
2019-03-18 14:24:46 -         }
2019-03-18 14:24:46 -     }
2019-03-18 14:24:46 -     return arr;
2019-03-18 14:24:46 - }
2019-03-18 14:24:46 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:24:46 - InsertSort(arr);
2019-03-18 14:24:46 - foreach(var i in arr)
2019-03-18 14:24:46 -     Console.Write(i+",");
2019-03-18 14:25:53 - public int[] InsertSort(int[] dataArray)
2019-03-18 14:25:53 - {
2019-03-18 14:25:53 -     for (int i = 1; i < dataArray.Length; i++)
2019-03-18 14:25:53 -     {
2019-03-18 14:25:53 -         int iValue = dataArray[i];
2019-03-18 14:25:53 -         bool isInserted = false;
2019-03-18 14:25:53 -         // 拿到i位置的元素跟前面所有的元素作比较
2019-03-18 14:25:53 -         for (int j = i - 1; j >= 0; j--)
2019-03-18 14:25:53 -         {
2019-03-18 14:25:53 -             if (dataArray[j] > iValue) // 如果发现比i大的,就让它向后移动
2019-03-18 14:25:53 -             {
2019-03-18 14:25:53 -                 dataArray[j + 1] = dataArray[j];
2019-03-18 14:25:53 -             }
2019-03-18 14:25:53 -             else
2019-03-18 14:25:53 -             {
2019-03-18 14:25:53 -                 //如果发现一个比i小的值,就不移动了
2019-03-18 14:25:53 -                 dataArray[j + 1] = iValue;
2019-03-18 14:25:53 -                 isInserted = true;
2019-03-18 14:25:53 -                 break;
2019-03-18 14:25:53 -             }
2019-03-18 14:25:53 -         }
2019-03-18 14:25:53 -         if (!isInserted)
2019-03-18 14:25:53 -         {
2019-03-18 14:25:53 -             dataArray[0] = iValue;
2019-03-18 14:25:53 -         }
2019-03-18 14:25:53 -     }
2019-03-18 14:25:53 -     return dataArray;
2019-03-18 14:25:53 - }
2019-03-18 14:25:53 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:25:53 - InsertSort(arr);
2019-03-18 14:25:53 - foreach(var i in arr)
2019-03-18 14:25:53 -     Console.Write(i+",");
2019-03-18 14:26:58 - public int[] InsertSort(int[] arr)
2019-03-18 14:26:58 - {
2019-03-18 14:26:58 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 14:26:58 -     {
2019-03-18 14:26:58 -         int temp = arr[i];
2019-03-18 14:26:58 -         for (int j = i-1; j >= 0; j--) 
2019-03-18 14:26:58 -         {
2019-03-18 14:26:58 -           if (arr[j] > temp) 
2019-03-18 14:26:58 -           {
2019-03-18 14:26:58 -             arr[j+1] = arr[j];
2019-03-18 14:26:58 -           } else {
2019-03-18 14:26:58 -             arr[j+1] = temp;
2019-03-18 14:26:58 -             dataArray[0] =temp;
2019-03-18 14:26:58 -             break;
2019-03-18 14:26:58 -           }
2019-03-18 14:26:58 -         }
2019-03-18 14:26:58 -     }
2019-03-18 14:26:58 -     return arr;
2019-03-18 14:26:58 - }
2019-03-18 14:26:58 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:26:58 - InsertSort(arr);
2019-03-18 14:26:58 - foreach(var i in arr)
2019-03-18 14:26:58 -     Console.Write(i+",");
2019-03-18 14:26:58 - (15,13): error CS0103: The name 'dataArray' does not exist in the current context
2019-03-18 14:27:07 - public int[] InsertSort(int[] arr)
2019-03-18 14:27:07 - {
2019-03-18 14:27:07 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 14:27:07 -     {
2019-03-18 14:27:07 -         int temp = arr[i];
2019-03-18 14:27:07 -         for (int j = i-1; j >= 0; j--) 
2019-03-18 14:27:07 -         {
2019-03-18 14:27:07 -           if (arr[j] > temp) 
2019-03-18 14:27:07 -           {
2019-03-18 14:27:07 -             arr[j+1] = arr[j];
2019-03-18 14:27:07 -           } else {
2019-03-18 14:27:07 -             arr[j+1] = temp;
2019-03-18 14:27:07 -             arr[0] =temp;
2019-03-18 14:27:07 -             break;
2019-03-18 14:27:07 -           }
2019-03-18 14:27:07 -         }
2019-03-18 14:27:07 -     }
2019-03-18 14:27:07 -     return arr;
2019-03-18 14:27:07 - }
2019-03-18 14:27:07 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:27:07 - InsertSort(arr);
2019-03-18 14:27:07 - foreach(var i in arr)
2019-03-18 14:27:07 -     Console.Write(i+",");
2019-03-18 14:28:55 - public int[] InsertSort(int[] arr)
2019-03-18 14:28:55 - {
2019-03-18 14:28:55 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 14:28:55 -     {
2019-03-18 14:28:55 -         int temp = arr[i];
2019-03-18 14:28:55 -         bool isInserted = false;
2019-03-18 14:28:55 -         for (int j = i-1; j >= 0; j--) 
2019-03-18 14:28:55 -         {
2019-03-18 14:28:55 -           if (arr[j] > temp) 
2019-03-18 14:28:55 -           {
2019-03-18 14:28:55 -             arr[j+1] = arr[j];
2019-03-18 14:28:55 -           } else {
2019-03-18 14:28:55 -             arr[j+1] = temp;
2019-03-18 14:28:55 -             isInserted=true;
2019-03-18 14:28:55 -             break;
2019-03-18 14:28:55 -           }
2019-03-18 14:28:55 -         }
2019-03-18 14:28:55 -         if(!isInserted){
2019-03-18 14:28:55 -         arr[0]= temp;
2019-03-18 14:28:55 -     }
2019-03-18 14:28:55 -     }
2019-03-18 14:28:55 -     return arr;
2019-03-18 14:28:55 - }
2019-03-18 14:28:55 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:28:55 - InsertSort(arr);
2019-03-18 14:28:55 - foreach(var i in arr)
2019-03-18 14:28:55 -     Console.Write(i+",");
2019-03-18 14:29:59 - public int[] InsertSort(int[] arr)
2019-03-18 14:29:59 - {
2019-03-18 14:29:59 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 14:29:59 -     {
2019-03-18 14:29:59 -         int temp = arr[i];
2019-03-18 14:29:59 -         for (int j = i; j >= 0; j--) 
2019-03-18 14:29:59 -         {
2019-03-18 14:29:59 -           if (arr[j-1] > temp) 
2019-03-18 14:29:59 -           {
2019-03-18 14:29:59 -             arr[j] = arr[j-1];
2019-03-18 14:29:59 -           } else {
2019-03-18 14:29:59 -             arr[j] = temp;
2019-03-18 14:29:59 -             break;
2019-03-18 14:29:59 -           }
2019-03-18 14:29:59 -         }
2019-03-18 14:29:59 -     }
2019-03-18 14:29:59 -     return arr;
2019-03-18 14:29:59 - }
2019-03-18 14:29:59 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:29:59 - InsertSort(arr);
2019-03-18 14:29:59 - foreach(var i in arr)
2019-03-18 14:29:59 -     Console.Write(i+",");
2019-03-18 14:29:59 - One or more errors occurred.
2019-03-18 14:29:59 - Index was outside the bounds of the array.
2019-03-18 14:30:03 - public int[] InsertSort(int[] arr)
2019-03-18 14:30:03 - {
2019-03-18 14:30:03 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 14:30:03 -     {
2019-03-18 14:30:03 -         int temp = arr[i];
2019-03-18 14:30:03 -         for (int j = i; j >= 0; j--) 
2019-03-18 14:30:03 -         {
2019-03-18 14:30:03 -           if (arr[j-1] > temp) 
2019-03-18 14:30:03 -           {
2019-03-18 14:30:03 -             arr[j] = arr[j+1];
2019-03-18 14:30:03 -           } else {
2019-03-18 14:30:03 -             arr[j] = temp;
2019-03-18 14:30:03 -             break;
2019-03-18 14:30:03 -           }
2019-03-18 14:30:03 -         }
2019-03-18 14:30:03 -     }
2019-03-18 14:30:03 -     return arr;
2019-03-18 14:30:03 - }
2019-03-18 14:30:03 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:30:03 - InsertSort(arr);
2019-03-18 14:30:03 - foreach(var i in arr)
2019-03-18 14:30:03 -     Console.Write(i+",");
2019-03-18 14:30:03 - One or more errors occurred.
2019-03-18 14:30:03 - Index was outside the bounds of the array.
2019-03-18 14:30:13 - public int[] InsertSort(int[] arr)
2019-03-18 14:30:13 - {
2019-03-18 14:30:13 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 14:30:13 -     {
2019-03-18 14:30:13 -         int temp = arr[i];
2019-03-18 14:30:13 -         for (int j = i; j > 0; j--) 
2019-03-18 14:30:13 -         {
2019-03-18 14:30:13 -           if (arr[j-1] > temp) 
2019-03-18 14:30:13 -           {
2019-03-18 14:30:13 -             arr[j] = arr[j+1];
2019-03-18 14:30:13 -           } else {
2019-03-18 14:30:13 -             arr[j] = temp;
2019-03-18 14:30:13 -             break;
2019-03-18 14:30:13 -           }
2019-03-18 14:30:13 -         }
2019-03-18 14:30:13 -     }
2019-03-18 14:30:13 -     return arr;
2019-03-18 14:30:13 - }
2019-03-18 14:30:13 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:30:13 - InsertSort(arr);
2019-03-18 14:30:13 - foreach(var i in arr)
2019-03-18 14:30:13 -     Console.Write(i+",");
2019-03-18 14:30:13 - One or more errors occurred.
2019-03-18 14:30:13 - Index was outside the bounds of the array.
2019-03-18 14:30:46 - public int[] InsertSort(int[] arr)
2019-03-18 14:30:46 - {
2019-03-18 14:30:46 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 14:30:46 -     {
2019-03-18 14:30:46 -         int temp = arr[i];
2019-03-18 14:30:46 -         for (int j = i+1; j >= 0; j--) 
2019-03-18 14:30:46 -         {
2019-03-18 14:30:46 -           if (arr[j-1] > temp) 
2019-03-18 14:30:46 -           {
2019-03-18 14:30:46 -             arr[j] = arr[j-1];
2019-03-18 14:30:46 -           } else {
2019-03-18 14:30:46 -             arr[j] = temp;
2019-03-18 14:30:46 -             break;
2019-03-18 14:30:46 -           }
2019-03-18 14:30:46 -         }
2019-03-18 14:30:46 -     }
2019-03-18 14:30:46 -     return arr;
2019-03-18 14:30:46 - }
2019-03-18 14:30:46 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:30:46 - InsertSort(arr);
2019-03-18 14:30:46 - foreach(var i in arr)
2019-03-18 14:30:46 -     Console.Write(i+",");
2019-03-18 14:30:46 - One or more errors occurred.
2019-03-18 14:30:46 - Index was outside the bounds of the array.
2019-03-18 14:31:02 - public int[] InsertSort(int[] arr)
2019-03-18 14:31:02 - {
2019-03-18 14:31:02 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 14:31:02 -     {
2019-03-18 14:31:02 -         int temp = arr[i];
2019-03-18 14:31:02 -         for (int j = arr.Length; j >= 0; j--) 
2019-03-18 14:31:02 -         {
2019-03-18 14:31:02 -           if (arr[j-1] > temp) 
2019-03-18 14:31:02 -           {
2019-03-18 14:31:02 -             arr[j] = arr[j-1];
2019-03-18 14:31:02 -           } else {
2019-03-18 14:31:02 -             arr[j] = temp;
2019-03-18 14:31:02 -             break;
2019-03-18 14:31:02 -           }
2019-03-18 14:31:02 -         }
2019-03-18 14:31:02 -     }
2019-03-18 14:31:02 -     return arr;
2019-03-18 14:31:02 - }
2019-03-18 14:31:02 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:31:02 - InsertSort(arr);
2019-03-18 14:31:02 - foreach(var i in arr)
2019-03-18 14:31:02 -     Console.Write(i+",");
2019-03-18 14:31:02 - One or more errors occurred.
2019-03-18 14:31:02 - Index was outside the bounds of the array.
2019-03-18 14:31:17 - public int[] InsertSort(int[] arr)
2019-03-18 14:31:17 - {
2019-03-18 14:31:17 -     for (int i = 0; i<arr.Length;i++)
2019-03-18 14:31:17 -     {
2019-03-18 14:31:17 -         int temp = arr[i];
2019-03-18 14:31:17 -         for (int j = i; j >= 0; j--) 
2019-03-18 14:31:17 -         {
2019-03-18 14:31:17 -           if (arr[j-1] > temp) 
2019-03-18 14:31:17 -           {
2019-03-18 14:31:17 -             arr[j] = arr[j-1];
2019-03-18 14:31:17 -           } else {
2019-03-18 14:31:17 -             arr[j] = temp;
2019-03-18 14:31:17 -             break;
2019-03-18 14:31:17 -           }
2019-03-18 14:31:17 -         }
2019-03-18 14:31:17 -     }
2019-03-18 14:31:17 -     return arr;
2019-03-18 14:31:17 - }
2019-03-18 14:31:17 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:31:17 - InsertSort(arr);
2019-03-18 14:31:17 - foreach(var i in arr)
2019-03-18 14:31:17 -     Console.Write(i+",");
2019-03-18 14:31:17 - One or more errors occurred.
2019-03-18 14:31:17 - Index was outside the bounds of the array.
2019-03-18 14:31:20 - public int[] InsertSort(int[] arr)
2019-03-18 14:31:20 - {
2019-03-18 14:31:20 -     for (int i = 2; i<arr.Length;i++)
2019-03-18 14:31:20 -     {
2019-03-18 14:31:20 -         int temp = arr[i];
2019-03-18 14:31:20 -         for (int j = i; j >= 0; j--) 
2019-03-18 14:31:20 -         {
2019-03-18 14:31:20 -           if (arr[j-1] > temp) 
2019-03-18 14:31:20 -           {
2019-03-18 14:31:20 -             arr[j] = arr[j-1];
2019-03-18 14:31:20 -           } else {
2019-03-18 14:31:20 -             arr[j] = temp;
2019-03-18 14:31:20 -             break;
2019-03-18 14:31:20 -           }
2019-03-18 14:31:20 -         }
2019-03-18 14:31:20 -     }
2019-03-18 14:31:20 -     return arr;
2019-03-18 14:31:20 - }
2019-03-18 14:31:20 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:31:20 - InsertSort(arr);
2019-03-18 14:31:20 - foreach(var i in arr)
2019-03-18 14:31:20 -     Console.Write(i+",");
2019-03-18 14:31:20 - One or more errors occurred.
2019-03-18 14:31:20 - Index was outside the bounds of the array.
2019-03-18 14:31:21 - public int[] InsertSort(int[] arr)
2019-03-18 14:31:21 - {
2019-03-18 14:31:21 -     for (int i = 2; i<arr.Length;i++)
2019-03-18 14:31:21 -     {
2019-03-18 14:31:21 -         int temp = arr[i];
2019-03-18 14:31:21 -         for (int j = i; j >= 0; j--) 
2019-03-18 14:31:21 -         {
2019-03-18 14:31:21 -           if (arr[j-1] > temp) 
2019-03-18 14:31:21 -           {
2019-03-18 14:31:21 -             arr[j] = arr[j-1];
2019-03-18 14:31:21 -           } else {
2019-03-18 14:31:21 -             arr[j] = temp;
2019-03-18 14:31:21 -             break;
2019-03-18 14:31:21 -           }
2019-03-18 14:31:21 -         }
2019-03-18 14:31:21 -     }
2019-03-18 14:31:21 -     return arr;
2019-03-18 14:31:21 - }
2019-03-18 14:31:21 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:31:21 - InsertSort(arr);
2019-03-18 14:31:21 - foreach(var i in arr)
2019-03-18 14:31:21 -     Console.Write(i+",");
2019-03-18 14:31:21 - One or more errors occurred.
2019-03-18 14:31:21 - Index was outside the bounds of the array.
2019-03-18 14:31:21 - public int[] InsertSort(int[] arr)
2019-03-18 14:31:21 - {
2019-03-18 14:31:21 -     for (int i = 2; i<arr.Length;i++)
2019-03-18 14:31:21 -     {
2019-03-18 14:31:21 -         int temp = arr[i];
2019-03-18 14:31:21 -         for (int j = i; j >= 0; j--) 
2019-03-18 14:31:21 -         {
2019-03-18 14:31:21 -           if (arr[j-1] > temp) 
2019-03-18 14:31:21 -           {
2019-03-18 14:31:21 -             arr[j] = arr[j-1];
2019-03-18 14:31:21 -           } else {
2019-03-18 14:31:21 -             arr[j] = temp;
2019-03-18 14:31:21 -             break;
2019-03-18 14:31:21 -           }
2019-03-18 14:31:21 -         }
2019-03-18 14:31:21 -     }
2019-03-18 14:31:21 -     return arr;
2019-03-18 14:31:21 - }
2019-03-18 14:31:21 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:31:21 - InsertSort(arr);
2019-03-18 14:31:21 - foreach(var i in arr)
2019-03-18 14:31:21 -     Console.Write(i+",");
2019-03-18 14:31:21 - One or more errors occurred.
2019-03-18 14:31:21 - Index was outside the bounds of the array.
2019-03-18 14:31:22 - public int[] InsertSort(int[] arr)
2019-03-18 14:31:22 - {
2019-03-18 14:31:22 -     for (int i = 2; i<arr.Length;i++)
2019-03-18 14:31:22 -     {
2019-03-18 14:31:22 -         int temp = arr[i];
2019-03-18 14:31:22 -         for (int j = i; j >= 0; j--) 
2019-03-18 14:31:22 -         {
2019-03-18 14:31:22 -           if (arr[j-1] > temp) 
2019-03-18 14:31:22 -           {
2019-03-18 14:31:22 -             arr[j] = arr[j-1];
2019-03-18 14:31:22 -           } else {
2019-03-18 14:31:22 -             arr[j] = temp;
2019-03-18 14:31:22 -             break;
2019-03-18 14:31:22 -           }
2019-03-18 14:31:22 -         }
2019-03-18 14:31:22 -     }
2019-03-18 14:31:22 -     return arr;
2019-03-18 14:31:22 - }
2019-03-18 14:31:22 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:31:22 - InsertSort(arr);
2019-03-18 14:31:22 - foreach(var i in arr)
2019-03-18 14:31:22 -     Console.Write(i+",");
2019-03-18 14:31:22 - One or more errors occurred.
2019-03-18 14:31:22 - Index was outside the bounds of the array.
2019-03-18 14:31:24 - public int[] InsertSort(int[] arr)
2019-03-18 14:31:24 - {
2019-03-18 14:31:24 -     for (int i = 2; i<arr.Length;i++)
2019-03-18 14:31:24 -     {
2019-03-18 14:31:24 -         int temp = arr[i];
2019-03-18 14:31:24 -         for (int j = i; j >= 0; j--) 
2019-03-18 14:31:24 -         {
2019-03-18 14:31:24 -           if (arr[j-1] > temp) 
2019-03-18 14:31:24 -           {
2019-03-18 14:31:24 -             arr[j] = arr[j-1];
2019-03-18 14:31:24 -           } else {
2019-03-18 14:31:24 -             arr[j] = temp;
2019-03-18 14:31:24 -             break;
2019-03-18 14:31:24 -           }
2019-03-18 14:31:24 -         }
2019-03-18 14:31:24 -     }
2019-03-18 14:31:24 -     return arr;
2019-03-18 14:31:24 - }
2019-03-18 14:31:24 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:31:24 - InsertSort(arr);
2019-03-18 14:31:24 - foreach(var i in arr)
2019-03-18 14:31:24 -     Console.Write(i+",");
2019-03-18 14:31:24 - One or more errors occurred.
2019-03-18 14:31:24 - Index was outside the bounds of the array.
2019-03-18 14:34:49 - public int[] InsertSort(int[] arr)
2019-03-18 14:34:49 - {
2019-03-18 14:34:49 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 14:34:49 -     {
2019-03-18 14:34:49 -         int temp = arr[i];
2019-03-18 14:34:49 -         for (int j = i; j > 0; j--) 
2019-03-18 14:34:49 -         {
2019-03-18 14:34:49 -             if (arr[j-1] > temp) 
2019-03-18 14:34:49 -             {
2019-03-18 14:34:49 -                 arr[j] = arr[j-1];
2019-03-18 14:34:49 -             } 
2019-03-18 14:34:49 -             else 
2019-03-18 14:34:49 -             {
2019-03-18 14:34:49 -                 arr[j] = temp;
2019-03-18 14:34:49 -                 break;
2019-03-18 14:34:49 -             }
2019-03-18 14:34:49 -         }
2019-03-18 14:34:49 -     }
2019-03-18 14:34:49 -     return arr;
2019-03-18 14:34:49 - }
2019-03-18 14:34:49 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:34:49 - InsertSort(arr);
2019-03-18 14:34:49 - foreach(var i in arr)
2019-03-18 14:34:49 -     Console.Write(i+",");
2019-03-18 14:34:53 - public int[] InsertSort(int[] arr)
2019-03-18 14:34:53 - {
2019-03-18 14:34:53 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 14:34:53 -     {
2019-03-18 14:34:53 -         int temp = arr[i];
2019-03-18 14:34:53 -         for (int j = i; j > 0; j--) 
2019-03-18 14:34:53 -         {
2019-03-18 14:34:53 -             if (arr[j-1] > temp) 
2019-03-18 14:34:53 -             {
2019-03-18 14:34:53 -                 arr[j] = arr[j-1];
2019-03-18 14:34:53 -             } 
2019-03-18 14:34:53 -             else 
2019-03-18 14:34:53 -             {
2019-03-18 14:34:53 -                 arr[j] = temp;
2019-03-18 14:34:53 -                 break;
2019-03-18 14:34:53 -             }
2019-03-18 14:34:53 -         }
2019-03-18 14:34:53 -     }
2019-03-18 14:34:53 -     return arr;
2019-03-18 14:34:53 - }
2019-03-18 14:34:53 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:34:53 - InsertSort(arr);
2019-03-18 14:34:53 - foreach(var i in arr)
2019-03-18 14:34:53 -     Console.Write(i+",");
2019-03-18 14:34:53 - public int[] InsertSort(int[] arr)
2019-03-18 14:34:53 - {
2019-03-18 14:34:53 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 14:34:53 -     {
2019-03-18 14:34:53 -         int temp = arr[i];
2019-03-18 14:34:53 -         for (int j = i; j > 0; j--) 
2019-03-18 14:34:53 -         {
2019-03-18 14:34:53 -             if (arr[j-1] > temp) 
2019-03-18 14:34:53 -             {
2019-03-18 14:34:53 -                 arr[j] = arr[j-1];
2019-03-18 14:34:53 -             } 
2019-03-18 14:34:53 -             else 
2019-03-18 14:34:53 -             {
2019-03-18 14:34:53 -                 arr[j] = temp;
2019-03-18 14:34:53 -                 break;
2019-03-18 14:34:53 -             }
2019-03-18 14:34:53 -         }
2019-03-18 14:34:53 -     }
2019-03-18 14:34:53 -     return arr;
2019-03-18 14:34:53 - }
2019-03-18 14:34:53 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:34:53 - InsertSort(arr);
2019-03-18 14:34:53 - foreach(var i in arr)
2019-03-18 14:34:53 -     Console.Write(i+",");
2019-03-18 14:34:53 - public int[] InsertSort(int[] arr)
2019-03-18 14:34:53 - {
2019-03-18 14:34:53 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 14:34:53 -     {
2019-03-18 14:34:53 -         int temp = arr[i];
2019-03-18 14:34:53 -         for (int j = i; j > 0; j--) 
2019-03-18 14:34:53 -         {
2019-03-18 14:34:53 -             if (arr[j-1] > temp) 
2019-03-18 14:34:53 -             {
2019-03-18 14:34:53 -                 arr[j] = arr[j-1];
2019-03-18 14:34:53 -             } 
2019-03-18 14:34:53 -             else 
2019-03-18 14:34:53 -             {
2019-03-18 14:34:53 -                 arr[j] = temp;
2019-03-18 14:34:53 -                 break;
2019-03-18 14:34:53 -             }
2019-03-18 14:34:53 -         }
2019-03-18 14:34:53 -     }
2019-03-18 14:34:53 -     return arr;
2019-03-18 14:34:53 - }
2019-03-18 14:34:53 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:34:53 - InsertSort(arr);
2019-03-18 14:34:53 - foreach(var i in arr)
2019-03-18 14:34:53 -     Console.Write(i+",");
2019-03-18 14:34:54 - public int[] InsertSort(int[] arr)
2019-03-18 14:34:54 - {
2019-03-18 14:34:54 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 14:34:54 -     {
2019-03-18 14:34:54 -         int temp = arr[i];
2019-03-18 14:34:54 -         for (int j = i; j > 0; j--) 
2019-03-18 14:34:54 -         {
2019-03-18 14:34:54 -             if (arr[j-1] > temp) 
2019-03-18 14:34:54 -             {
2019-03-18 14:34:54 -                 arr[j] = arr[j-1];
2019-03-18 14:34:54 -             } 
2019-03-18 14:34:54 -             else 
2019-03-18 14:34:54 -             {
2019-03-18 14:34:54 -                 arr[j] = temp;
2019-03-18 14:34:54 -                 break;
2019-03-18 14:34:54 -             }
2019-03-18 14:34:54 -         }
2019-03-18 14:34:54 -     }
2019-03-18 14:34:54 -     return arr;
2019-03-18 14:34:54 - }
2019-03-18 14:34:54 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:34:54 - InsertSort(arr);
2019-03-18 14:34:54 - foreach(var i in arr)
2019-03-18 14:34:54 -     Console.Write(i+",");
2019-03-18 14:34:54 - public int[] InsertSort(int[] arr)
2019-03-18 14:34:54 - {
2019-03-18 14:34:54 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 14:34:54 -     {
2019-03-18 14:34:54 -         int temp = arr[i];
2019-03-18 14:34:54 -         for (int j = i; j > 0; j--) 
2019-03-18 14:34:54 -         {
2019-03-18 14:34:54 -             if (arr[j-1] > temp) 
2019-03-18 14:34:54 -             {
2019-03-18 14:34:54 -                 arr[j] = arr[j-1];
2019-03-18 14:34:54 -             } 
2019-03-18 14:34:54 -             else 
2019-03-18 14:34:54 -             {
2019-03-18 14:34:54 -                 arr[j] = temp;
2019-03-18 14:34:54 -                 break;
2019-03-18 14:34:54 -             }
2019-03-18 14:34:54 -         }
2019-03-18 14:34:54 -     }
2019-03-18 14:34:54 -     return arr;
2019-03-18 14:34:54 - }
2019-03-18 14:34:54 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:34:54 - InsertSort(arr);
2019-03-18 14:34:54 - foreach(var i in arr)
2019-03-18 14:34:54 -     Console.Write(i+",");
2019-03-18 14:34:54 - public int[] InsertSort(int[] arr)
2019-03-18 14:34:54 - {
2019-03-18 14:34:54 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 14:34:54 -     {
2019-03-18 14:34:54 -         int temp = arr[i];
2019-03-18 14:34:54 -         for (int j = i; j > 0; j--) 
2019-03-18 14:34:54 -         {
2019-03-18 14:34:54 -             if (arr[j-1] > temp) 
2019-03-18 14:34:54 -             {
2019-03-18 14:34:54 -                 arr[j] = arr[j-1];
2019-03-18 14:34:54 -             } 
2019-03-18 14:34:54 -             else 
2019-03-18 14:34:54 -             {
2019-03-18 14:34:54 -                 arr[j] = temp;
2019-03-18 14:34:54 -                 break;
2019-03-18 14:34:54 -             }
2019-03-18 14:34:54 -         }
2019-03-18 14:34:54 -     }
2019-03-18 14:34:54 -     return arr;
2019-03-18 14:34:54 - }
2019-03-18 14:34:54 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:34:54 - InsertSort(arr);
2019-03-18 14:34:54 - foreach(var i in arr)
2019-03-18 14:34:54 -     Console.Write(i+",");
2019-03-18 14:34:54 - public int[] InsertSort(int[] arr)
2019-03-18 14:34:54 - {
2019-03-18 14:34:54 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 14:34:54 -     {
2019-03-18 14:34:54 -         int temp = arr[i];
2019-03-18 14:34:54 -         for (int j = i; j > 0; j--) 
2019-03-18 14:34:54 -         {
2019-03-18 14:34:54 -             if (arr[j-1] > temp) 
2019-03-18 14:34:54 -             {
2019-03-18 14:34:54 -                 arr[j] = arr[j-1];
2019-03-18 14:34:54 -             } 
2019-03-18 14:34:54 -             else 
2019-03-18 14:34:54 -             {
2019-03-18 14:34:54 -                 arr[j] = temp;
2019-03-18 14:34:54 -                 break;
2019-03-18 14:34:54 -             }
2019-03-18 14:34:54 -         }
2019-03-18 14:34:54 -     }
2019-03-18 14:34:54 -     return arr;
2019-03-18 14:34:54 - }
2019-03-18 14:34:54 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:34:54 - InsertSort(arr);
2019-03-18 14:34:54 - foreach(var i in arr)
2019-03-18 14:34:54 -     Console.Write(i+",");
2019-03-18 14:34:55 - public int[] InsertSort(int[] arr)
2019-03-18 14:34:55 - {
2019-03-18 14:34:55 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 14:34:55 -     {
2019-03-18 14:34:55 -         int temp = arr[i];
2019-03-18 14:34:55 -         for (int j = i; j > 0; j--) 
2019-03-18 14:34:55 -         {
2019-03-18 14:34:55 -             if (arr[j-1] > temp) 
2019-03-18 14:34:55 -             {
2019-03-18 14:34:55 -                 arr[j] = arr[j-1];
2019-03-18 14:34:55 -             } 
2019-03-18 14:34:55 -             else 
2019-03-18 14:34:55 -             {
2019-03-18 14:34:55 -                 arr[j] = temp;
2019-03-18 14:34:55 -                 break;
2019-03-18 14:34:55 -             }
2019-03-18 14:34:55 -         }
2019-03-18 14:34:55 -     }
2019-03-18 14:34:55 -     return arr;
2019-03-18 14:34:55 - }
2019-03-18 14:34:55 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:34:55 - InsertSort(arr);
2019-03-18 14:34:55 - foreach(var i in arr)
2019-03-18 14:34:55 -     Console.Write(i+",");
2019-03-18 14:34:55 - public int[] InsertSort(int[] arr)
2019-03-18 14:34:55 - {
2019-03-18 14:34:55 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 14:34:55 -     {
2019-03-18 14:34:55 -         int temp = arr[i];
2019-03-18 14:34:55 -         for (int j = i; j > 0; j--) 
2019-03-18 14:34:55 -         {
2019-03-18 14:34:55 -             if (arr[j-1] > temp) 
2019-03-18 14:34:55 -             {
2019-03-18 14:34:55 -                 arr[j] = arr[j-1];
2019-03-18 14:34:55 -             } 
2019-03-18 14:34:55 -             else 
2019-03-18 14:34:55 -             {
2019-03-18 14:34:55 -                 arr[j] = temp;
2019-03-18 14:34:55 -                 break;
2019-03-18 14:34:55 -             }
2019-03-18 14:34:55 -         }
2019-03-18 14:34:55 -     }
2019-03-18 14:34:55 -     return arr;
2019-03-18 14:34:55 - }
2019-03-18 14:34:55 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:34:55 - InsertSort(arr);
2019-03-18 14:34:55 - foreach(var i in arr)
2019-03-18 14:34:55 -     Console.Write(i+",");
2019-03-18 14:34:55 - public int[] InsertSort(int[] arr)
2019-03-18 14:34:55 - {
2019-03-18 14:34:55 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 14:34:55 -     {
2019-03-18 14:34:55 -         int temp = arr[i];
2019-03-18 14:34:55 -         for (int j = i; j > 0; j--) 
2019-03-18 14:34:55 -         {
2019-03-18 14:34:55 -             if (arr[j-1] > temp) 
2019-03-18 14:34:55 -             {
2019-03-18 14:34:55 -                 arr[j] = arr[j-1];
2019-03-18 14:34:55 -             } 
2019-03-18 14:34:55 -             else 
2019-03-18 14:34:55 -             {
2019-03-18 14:34:55 -                 arr[j] = temp;
2019-03-18 14:34:55 -                 break;
2019-03-18 14:34:55 -             }
2019-03-18 14:34:55 -         }
2019-03-18 14:34:55 -     }
2019-03-18 14:34:55 -     return arr;
2019-03-18 14:34:55 - }
2019-03-18 14:34:55 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:34:55 - InsertSort(arr);
2019-03-18 14:34:55 - foreach(var i in arr)
2019-03-18 14:34:55 -     Console.Write(i+",");
2019-03-18 14:34:56 - public int[] InsertSort(int[] arr)
2019-03-18 14:34:56 - {
2019-03-18 14:34:56 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 14:34:56 -     {
2019-03-18 14:34:56 -         int temp = arr[i];
2019-03-18 14:34:56 -         for (int j = i; j > 0; j--) 
2019-03-18 14:34:56 -         {
2019-03-18 14:34:56 -             if (arr[j-1] > temp) 
2019-03-18 14:34:56 -             {
2019-03-18 14:34:56 -                 arr[j] = arr[j-1];
2019-03-18 14:34:56 -             } 
2019-03-18 14:34:56 -             else 
2019-03-18 14:34:56 -             {
2019-03-18 14:34:56 -                 arr[j] = temp;
2019-03-18 14:34:56 -                 break;
2019-03-18 14:34:56 -             }
2019-03-18 14:34:56 -         }
2019-03-18 14:34:56 -     }
2019-03-18 14:34:56 -     return arr;
2019-03-18 14:34:56 - }
2019-03-18 14:34:56 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:34:56 - InsertSort(arr);
2019-03-18 14:34:56 - foreach(var i in arr)
2019-03-18 14:34:56 -     Console.Write(i+",");
2019-03-18 14:36:28 - public int[] InsertSort(int[] arr)
2019-03-18 14:36:28 - {
2019-03-18 14:36:28 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 14:36:28 -     {
2019-03-18 14:36:28 -         int temp = arr[i];
2019-03-18 14:36:28 -         for (int j = i; j > 0; j--) 
2019-03-18 14:36:28 -         {
2019-03-18 14:36:28 -             if (arr[j-1] > temp) 
2019-03-18 14:36:28 -             {
2019-03-18 14:36:28 -                 arr[j] = arr[j-1];
2019-03-18 14:36:28 -             } 
2019-03-18 14:36:28 -             else 
2019-03-18 14:36:28 -             {
2019-03-18 14:36:28 -                 arr[j] = temp;
2019-03-18 14:36:28 -                 break;
2019-03-18 14:36:28 -             }
2019-03-18 14:36:28 -             foreach(var i in arr)
2019-03-18 14:36:28 -                 Console.Write(i+",");
2019-03-18 14:36:28 -         }
2019-03-18 14:36:28 -     }
2019-03-18 14:36:28 -     return arr;
2019-03-18 14:36:28 - }
2019-03-18 14:36:28 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:36:28 - InsertSort(arr);
2019-03-18 14:36:28 - (19,25): error CS0136: A local or parameter named 'i' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter
2019-03-18 14:36:36 - public int[] InsertSort(int[] arr)
2019-03-18 14:36:36 - {
2019-03-18 14:36:36 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 14:36:36 -     {
2019-03-18 14:36:36 -         int temp = arr[i];
2019-03-18 14:36:36 -         for (int j = i; j > 0; j--) 
2019-03-18 14:36:36 -         {
2019-03-18 14:36:36 -             if (arr[j-1] > temp) 
2019-03-18 14:36:36 -             {
2019-03-18 14:36:36 -                 arr[j] = arr[j-1];
2019-03-18 14:36:36 -             } 
2019-03-18 14:36:36 -             else 
2019-03-18 14:36:36 -             {
2019-03-18 14:36:36 -                 arr[j] = temp;
2019-03-18 14:36:36 -                 break;
2019-03-18 14:36:36 -             }
2019-03-18 14:36:36 -             foreach(var a in arr)
2019-03-18 14:36:36 -                 Console.Write(a+",");
2019-03-18 14:36:36 -         }
2019-03-18 14:36:36 -     }
2019-03-18 14:36:36 -     return arr;
2019-03-18 14:36:36 - }
2019-03-18 14:36:36 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:36:36 - InsertSort(arr);
2019-03-18 14:36:57 - public int[] InsertSort(int[] arr)
2019-03-18 14:36:57 - {
2019-03-18 14:36:57 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 14:36:57 -     {
2019-03-18 14:36:57 -         int temp = arr[i];
2019-03-18 14:36:57 -         for (int j = i; j > 0; j--) 
2019-03-18 14:36:57 -         {
2019-03-18 14:36:57 -             if (arr[j-1] > temp) 
2019-03-18 14:36:57 -             {
2019-03-18 14:36:57 -                 arr[j] = arr[j-1];
2019-03-18 14:36:57 -             } 
2019-03-18 14:36:57 -             else 
2019-03-18 14:36:57 -             {
2019-03-18 14:36:57 -                 arr[j] = temp;
2019-03-18 14:36:57 -                 break;
2019-03-18 14:36:57 -             }
2019-03-18 14:36:57 -             foreach(var a in arr){
2019-03-18 14:36:57 -                 Console.Write(a+",");
2019-03-18 14:36:57 -                 Console.WriteLine();
2019-03-18 14:36:57 -                 }
2019-03-18 14:36:57 -         }
2019-03-18 14:36:57 -     }
2019-03-18 14:36:57 -     return arr;
2019-03-18 14:36:57 - }
2019-03-18 14:36:57 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:36:57 - InsertSort(arr);
2019-03-18 14:37:10 - public int[] InsertSort(int[] arr)
2019-03-18 14:37:10 - {
2019-03-18 14:37:10 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 14:37:10 -     {
2019-03-18 14:37:10 -         int temp = arr[i];
2019-03-18 14:37:10 -         for (int j = i; j > 0; j--) 
2019-03-18 14:37:10 -         {
2019-03-18 14:37:10 -             if (arr[j-1] > temp) 
2019-03-18 14:37:10 -             {
2019-03-18 14:37:10 -                 arr[j] = arr[j-1];
2019-03-18 14:37:10 -             } 
2019-03-18 14:37:10 -             else 
2019-03-18 14:37:10 -             {
2019-03-18 14:37:10 -                 arr[j] = temp;
2019-03-18 14:37:10 -                 break;
2019-03-18 14:37:10 -             }
2019-03-18 14:37:10 -             foreach(var a in arr)
2019-03-18 14:37:10 -                 Console.Write(a+",");
2019-03-18 14:37:10 -             Console.WriteLine();
2019-03-18 14:37:10 -         }
2019-03-18 14:37:10 -     }
2019-03-18 14:37:10 -     return arr;
2019-03-18 14:37:10 - }
2019-03-18 14:37:10 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:37:10 - InsertSort(arr);
2019-03-18 14:38:49 - public int[] InsertSort(int[] arr)
2019-03-18 14:38:49 - {
2019-03-18 14:38:49 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 14:38:49 -     {
2019-03-18 14:38:49 -         int temp = arr[i];
2019-03-18 14:38:49 -           bool isInserted = false;
2019-03-18 14:38:49 -         for (int j = i; j > 0; j--) 
2019-03-18 14:38:49 -         {
2019-03-18 14:38:49 -             if (arr[j-1] > temp) 
2019-03-18 14:38:49 -             {
2019-03-18 14:38:49 -                 arr[j] = arr[j-1];
2019-03-18 14:38:49 -             } 
2019-03-18 14:38:49 -             else 
2019-03-18 14:38:49 -             {
2019-03-18 14:38:49 -                 arr[j] = temp;
2019-03-18 14:38:49 -                  isInserted = true;
2019-03-18 14:38:49 -                 break;
2019-03-18 14:38:49 -             }
2019-03-18 14:38:49 -             foreach(var a in arr)
2019-03-18 14:38:49 -                 Console.Write(a+",");
2019-03-18 14:38:49 -             Console.WriteLine();
2019-03-18 14:38:49 -         }
2019-03-18 14:38:49 -               if (!isInserted)
2019-03-18 14:38:49 -                 {
2019-03-18 14:38:49 -                     dataArray[0] = iValue;
2019-03-18 14:38:49 -                 }
2019-03-18 14:38:49 -     }
2019-03-18 14:38:49 -     return arr;
2019-03-18 14:38:49 - }
2019-03-18 14:38:49 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:38:49 - InsertSort(arr);
2019-03-18 14:38:49 - (27,21): error CS0103: The name 'dataArray' does not exist in the current context
2019-03-18 14:38:49 - (27,36): error CS0103: The name 'iValue' does not exist in the current context
2019-03-18 14:39:05 - public int[] InsertSort(int[] arr)
2019-03-18 14:39:05 - {
2019-03-18 14:39:05 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 14:39:05 -     {
2019-03-18 14:39:05 -         int temp = arr[i];
2019-03-18 14:39:05 -           bool isInserted = false;
2019-03-18 14:39:05 -         for (int j = i; j > 0; j--) 
2019-03-18 14:39:05 -         {
2019-03-18 14:39:05 -             if (arr[j-1] > temp) 
2019-03-18 14:39:05 -             {
2019-03-18 14:39:05 -                 arr[j] = arr[j-1];
2019-03-18 14:39:05 -             } 
2019-03-18 14:39:05 -             else 
2019-03-18 14:39:05 -             {
2019-03-18 14:39:05 -                 arr[j] = temp;
2019-03-18 14:39:05 -                  isInserted = true;
2019-03-18 14:39:05 -                 break;
2019-03-18 14:39:05 -             }
2019-03-18 14:39:05 -             foreach(var a in arr)
2019-03-18 14:39:05 -                 Console.Write(a+",");
2019-03-18 14:39:05 -             Console.WriteLine();
2019-03-18 14:39:05 -         }
2019-03-18 14:39:05 -               if (!isInserted)
2019-03-18 14:39:05 -                 {
2019-03-18 14:39:05 -                     arr[0] = temp;
2019-03-18 14:39:05 -                 }
2019-03-18 14:39:05 -     }
2019-03-18 14:39:05 -     return arr;
2019-03-18 14:39:05 - }
2019-03-18 14:39:05 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:39:05 - InsertSort(arr);
2019-03-18 14:39:15 - public int[] InsertSort(int[] arr)
2019-03-18 14:39:15 - {
2019-03-18 14:39:15 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 14:39:15 -     {
2019-03-18 14:39:15 -         int temp = arr[i];
2019-03-18 14:39:15 -           bool isInserted = false;
2019-03-18 14:39:15 -         for (int j = i; j >= 0; j--) 
2019-03-18 14:39:15 -         {
2019-03-18 14:39:15 -             if (arr[j-1] > temp) 
2019-03-18 14:39:15 -             {
2019-03-18 14:39:15 -                 arr[j] = arr[j-1];
2019-03-18 14:39:15 -             } 
2019-03-18 14:39:15 -             else 
2019-03-18 14:39:15 -             {
2019-03-18 14:39:15 -                 arr[j] = temp;
2019-03-18 14:39:15 -                  isInserted = true;
2019-03-18 14:39:15 -                 break;
2019-03-18 14:39:15 -             }
2019-03-18 14:39:15 -             foreach(var a in arr)
2019-03-18 14:39:15 -                 Console.Write(a+",");
2019-03-18 14:39:15 -             Console.WriteLine();
2019-03-18 14:39:15 -         }
2019-03-18 14:39:15 -               if (!isInserted)
2019-03-18 14:39:15 -                 {
2019-03-18 14:39:15 -                     arr[0] = temp;
2019-03-18 14:39:15 -                 }
2019-03-18 14:39:15 -     }
2019-03-18 14:39:15 -     return arr;
2019-03-18 14:39:15 - }
2019-03-18 14:39:15 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:39:15 - InsertSort(arr);
2019-03-18 14:39:15 - One or more errors occurred.
2019-03-18 14:39:15 - Index was outside the bounds of the array.
2019-03-18 14:39:47 - public int[] InsertSort(int[] arr)
2019-03-18 14:39:47 - {
2019-03-18 14:39:47 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 14:39:47 -     {
2019-03-18 14:39:47 -         int temp = arr[i];
2019-03-18 14:39:47 -           bool isInserted = false;
2019-03-18 14:39:47 -         for (int j = i+1; j > 0; j--) 
2019-03-18 14:39:47 -         {
2019-03-18 14:39:47 -             if (arr[j-1] > temp) 
2019-03-18 14:39:47 -             {
2019-03-18 14:39:47 -                 arr[j] = arr[j-1];
2019-03-18 14:39:47 -             } 
2019-03-18 14:39:47 -             else 
2019-03-18 14:39:47 -             {
2019-03-18 14:39:47 -                 arr[j] = temp;
2019-03-18 14:39:47 -                  isInserted = true;
2019-03-18 14:39:47 -                 break;
2019-03-18 14:39:47 -             }
2019-03-18 14:39:47 -             foreach(var a in arr)
2019-03-18 14:39:47 -                 Console.Write(a+",");
2019-03-18 14:39:47 -             Console.WriteLine();
2019-03-18 14:39:47 -         }
2019-03-18 14:39:47 -               if (!isInserted)
2019-03-18 14:39:47 -                 {
2019-03-18 14:39:47 -                     arr[0] = temp;
2019-03-18 14:39:47 -                 }
2019-03-18 14:39:47 -     }
2019-03-18 14:39:47 -     return arr;
2019-03-18 14:39:47 - }
2019-03-18 14:39:47 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:39:47 - InsertSort(arr);
2019-03-18 14:39:47 - One or more errors occurred.
2019-03-18 14:39:47 - Index was outside the bounds of the array.
2019-03-18 14:39:53 - public int[] InsertSort(int[] arr)
2019-03-18 14:39:53 - {
2019-03-18 14:39:53 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 14:39:53 -     {
2019-03-18 14:39:53 -         int temp = arr[i];
2019-03-18 14:39:53 -           bool isInserted = false;
2019-03-18 14:39:53 -         for (int j = i-1; j > 0; j--) 
2019-03-18 14:39:53 -         {
2019-03-18 14:39:53 -             if (arr[j-1] > temp) 
2019-03-18 14:39:53 -             {
2019-03-18 14:39:53 -                 arr[j] = arr[j-1];
2019-03-18 14:39:53 -             } 
2019-03-18 14:39:53 -             else 
2019-03-18 14:39:53 -             {
2019-03-18 14:39:53 -                 arr[j] = temp;
2019-03-18 14:39:53 -                  isInserted = true;
2019-03-18 14:39:53 -                 break;
2019-03-18 14:39:53 -             }
2019-03-18 14:39:53 -             foreach(var a in arr)
2019-03-18 14:39:53 -                 Console.Write(a+",");
2019-03-18 14:39:53 -             Console.WriteLine();
2019-03-18 14:39:53 -         }
2019-03-18 14:39:53 -               if (!isInserted)
2019-03-18 14:39:53 -                 {
2019-03-18 14:39:53 -                     arr[0] = temp;
2019-03-18 14:39:53 -                 }
2019-03-18 14:39:53 -     }
2019-03-18 14:39:53 -     return arr;
2019-03-18 14:39:53 - }
2019-03-18 14:39:53 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:39:53 - InsertSort(arr);
2019-03-18 14:40:00 - public int[] InsertSort(int[] arr)
2019-03-18 14:40:00 - {
2019-03-18 14:40:00 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 14:40:00 -     {
2019-03-18 14:40:00 -         int temp = arr[i];
2019-03-18 14:40:00 -           bool isInserted = false;
2019-03-18 14:40:00 -         for (int j = i-1; j > 0; j--) 
2019-03-18 14:40:00 -         {
2019-03-18 14:40:00 -             if (arr[j] > temp) 
2019-03-18 14:40:00 -             {
2019-03-18 14:40:00 -                 arr[j] = arr[j-1];
2019-03-18 14:40:00 -             } 
2019-03-18 14:40:00 -             else 
2019-03-18 14:40:00 -             {
2019-03-18 14:40:00 -                 arr[j] = temp;
2019-03-18 14:40:00 -                  isInserted = true;
2019-03-18 14:40:00 -                 break;
2019-03-18 14:40:00 -             }
2019-03-18 14:40:00 -             foreach(var a in arr)
2019-03-18 14:40:00 -                 Console.Write(a+",");
2019-03-18 14:40:00 -             Console.WriteLine();
2019-03-18 14:40:00 -         }
2019-03-18 14:40:00 -               if (!isInserted)
2019-03-18 14:40:00 -                 {
2019-03-18 14:40:00 -                     arr[0] = temp;
2019-03-18 14:40:00 -                 }
2019-03-18 14:40:00 -     }
2019-03-18 14:40:00 -     return arr;
2019-03-18 14:40:00 - }
2019-03-18 14:40:00 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:40:00 - InsertSort(arr);
2019-03-18 14:42:39 - public int[] InsertSort(int[] arr)
2019-03-18 14:42:39 - {
2019-03-18 14:42:39 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 14:42:39 -     {
2019-03-18 14:42:39 -         int temp = arr[i];
2019-03-18 14:42:39 -         int j = i-1;
2019-03-18 14:42:39 -         while(j>=0 &&arr[j]>temp){
2019-03-18 14:42:39 -             arr[i+1]=arr[i]
2019-03-18 14:42:39 -             i--;
2019-03-18 14:42:39 -         }
2019-03-18 14:42:39 -         arr[i+1]=temp
2019-03-18 14:42:39 -     }
2019-03-18 14:42:39 -     return arr;
2019-03-18 14:42:39 - }
2019-03-18 14:42:39 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:42:39 - InsertSort(arr);
2019-03-18 14:42:39 - foreach(var a in arr){
2019-03-18 14:42:39 -     Console.Write(i+",");
2019-03-18 14:42:39 -     Console.WriteLine()
2019-03-18 14:42:39 - }
2019-03-18 14:42:39 - (10,28): error CS1002: ; expected
2019-03-18 14:42:39 - (13,22): error CS1002: ; expected
2019-03-18 14:42:39 - (25,24): error CS1002: ; expected
2019-03-18 14:42:41 - public int[] InsertSort(int[] arr)
2019-03-18 14:42:41 - {
2019-03-18 14:42:41 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 14:42:41 -     {
2019-03-18 14:42:41 -         int temp = arr[i];
2019-03-18 14:42:41 -         int j = i-1;
2019-03-18 14:42:41 -         while(j>=0 &&arr[j]>temp){
2019-03-18 14:42:41 -             arr[i+1]=arr[i]
2019-03-18 14:42:41 -             i--;
2019-03-18 14:42:41 -         }
2019-03-18 14:42:41 -         arr[i+1]=temp
2019-03-18 14:42:41 -     }
2019-03-18 14:42:41 -     return arr;
2019-03-18 14:42:41 - }
2019-03-18 14:42:41 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:42:41 - InsertSort(arr);
2019-03-18 14:42:41 - foreach(var a in arr){
2019-03-18 14:42:41 -     Console.Write(i+",");
2019-03-18 14:42:41 -     Console.WriteLine();
2019-03-18 14:42:41 - }
2019-03-18 14:42:41 - (10,28): error CS1002: ; expected
2019-03-18 14:42:41 - (13,22): error CS1002: ; expected
2019-03-18 14:42:44 - public int[] InsertSort(int[] arr)
2019-03-18 14:42:44 - {
2019-03-18 14:42:44 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 14:42:44 -     {
2019-03-18 14:42:44 -         int temp = arr[i];
2019-03-18 14:42:44 -         int j = i-1;
2019-03-18 14:42:44 -         while(j>=0 &&arr[j]>temp){
2019-03-18 14:42:44 -             arr[i+1]=arr[i]
2019-03-18 14:42:44 -             i--;
2019-03-18 14:42:44 -         }
2019-03-18 14:42:44 -         arr[i+1]=temp;
2019-03-18 14:42:44 -     }
2019-03-18 14:42:44 -     return arr;
2019-03-18 14:42:44 - }
2019-03-18 14:42:44 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:42:44 - InsertSort(arr);
2019-03-18 14:42:44 - foreach(var a in arr){
2019-03-18 14:42:44 -     Console.Write(i+",");
2019-03-18 14:42:44 -     Console.WriteLine();
2019-03-18 14:42:44 - }
2019-03-18 14:42:44 - (10,28): error CS1002: ; expected
2019-03-18 14:42:49 - public int[] InsertSort(int[] arr)
2019-03-18 14:42:49 - {
2019-03-18 14:42:49 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 14:42:49 -     {
2019-03-18 14:42:49 -         int temp = arr[i];
2019-03-18 14:42:49 -         int j = i-1;
2019-03-18 14:42:49 -         while(j>=0 &&arr[j]>temp){
2019-03-18 14:42:49 -             arr[i+1]=arr[i];
2019-03-18 14:42:49 -             i--;
2019-03-18 14:42:49 -         }
2019-03-18 14:42:49 -         arr[i+1]=temp;
2019-03-18 14:42:49 -     }
2019-03-18 14:42:49 -     return arr;
2019-03-18 14:42:49 - }
2019-03-18 14:42:49 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:42:49 - InsertSort(arr);
2019-03-18 14:42:49 - foreach(var a in arr){
2019-03-18 14:42:49 -     Console.Write(i+",");
2019-03-18 14:42:49 -     Console.WriteLine();
2019-03-18 14:42:49 - }
2019-03-18 14:42:49 - (24,19): error CS0103: The name 'i' does not exist in the current context
2019-03-18 14:43:07 - public int[] InsertSort(int[] arr)
2019-03-18 14:43:07 - {
2019-03-18 14:43:07 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 14:43:07 -     {
2019-03-18 14:43:07 -         int temp = arr[i];
2019-03-18 14:43:07 -         int j = i-1;
2019-03-18 14:43:07 -         while(j>=0 &&arr[j]>temp){
2019-03-18 14:43:07 -             arr[j+1]=arr[j];
2019-03-18 14:43:07 -             j--;
2019-03-18 14:43:07 -         }
2019-03-18 14:43:07 -         arr[i+1]=temp;
2019-03-18 14:43:07 -     }
2019-03-18 14:43:07 -     return arr;
2019-03-18 14:43:07 - }
2019-03-18 14:43:07 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:43:07 - InsertSort(arr);
2019-03-18 14:43:07 - foreach(var a in arr){
2019-03-18 14:43:07 -     Console.Write(i+",");
2019-03-18 14:43:07 -     Console.WriteLine();
2019-03-18 14:43:07 - }
2019-03-18 14:43:07 - (24,19): error CS0103: The name 'i' does not exist in the current context
2019-03-18 14:43:26 - public int[] InsertSort(int[] arr)
2019-03-18 14:43:26 - {
2019-03-18 14:43:26 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 14:43:26 -     {
2019-03-18 14:43:26 -         int temp = arr[i];
2019-03-18 14:43:26 -         int j = i-1;
2019-03-18 14:43:26 -         while(j>=0 &&arr[j]>temp){
2019-03-18 14:43:26 -             arr[j+1]=arr[j];
2019-03-18 14:43:26 -             j--;
2019-03-18 14:43:26 -         }
2019-03-18 14:43:26 -         arr[i+1]=temp;
2019-03-18 14:43:26 -     }
2019-03-18 14:43:26 -     return arr;
2019-03-18 14:43:26 - }
2019-03-18 14:43:26 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:43:26 - InsertSort(arr);
2019-03-18 14:43:26 - foreach(var a in arr){
2019-03-18 14:43:26 -     Console.Write(a+",");
2019-03-18 14:43:26 -     Console.WriteLine();
2019-03-18 14:43:26 - }
2019-03-18 14:43:26 - One or more errors occurred.
2019-03-18 14:43:26 - Index was outside the bounds of the array.
2019-03-18 14:45:32 - public int[] InsertSort(int[] arr)
2019-03-18 14:45:32 - {
2019-03-18 14:45:32 -     for(int j=1;j<arr.Length;j++){
2019-03-18 14:45:32 -                 int key=arr[j];
2019-03-18 14:45:32 -                 int i=j-1;
2019-03-18 14:45:32 -                 while(i>=0 && arr[i]>key){
2019-03-18 14:45:32 -                      arr[i+1]=arr[i];
2019-03-18 14:45:32 -                      i--;
2019-03-18 14:45:32 -                 }
2019-03-18 14:45:32 -                 arr[i+1]=key;
2019-03-18 14:45:32 -             }
2019-03-18 14:45:32 -     return arr;
2019-03-18 14:45:32 - }
2019-03-18 14:45:32 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:45:32 - InsertSort(arr);
2019-03-18 14:45:32 - foreach(var a in arr){
2019-03-18 14:45:32 -     Console.Write(a+",");
2019-03-18 14:45:32 -     Console.WriteLine();
2019-03-18 14:45:32 - }
2019-03-18 14:45:46 - public int[] InsertSort(int[] arr)
2019-03-18 14:45:46 - {
2019-03-18 14:45:46 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 14:45:46 -     {
2019-03-18 14:45:46 -         int temp = arr[i];
2019-03-18 14:45:46 -         int j = i-1;
2019-03-18 14:45:46 -         while(j>=0 &&arr[j]>temp){
2019-03-18 14:45:46 -             arr[j+1]=arr[j];
2019-03-18 14:45:46 -             j--;
2019-03-18 14:45:46 -         }
2019-03-18 14:45:46 -         arr[i+1]=temp;
2019-03-18 14:45:46 -     }
2019-03-18 14:45:46 -     return arr;
2019-03-18 14:45:46 - }
2019-03-18 14:45:46 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:45:46 - InsertSort(arr);
2019-03-18 14:45:46 - foreach(var a in arr){
2019-03-18 14:45:46 -     Console.Write(a+",");
2019-03-18 14:45:46 -     Console.WriteLine();
2019-03-18 14:45:46 - }
2019-03-18 14:45:46 - One or more errors occurred.
2019-03-18 14:45:46 - Index was outside the bounds of the array.
2019-03-18 14:46:21 - public int[] InsertSort(int[] arr)
2019-03-18 14:46:21 - {
2019-03-18 14:46:21 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 14:46:21 -     {
2019-03-18 14:46:21 -         int temp = arr[i];
2019-03-18 14:46:21 -         int j = i-1;
2019-03-18 14:46:21 -         while(j>=0 &&arr[j]>temp){
2019-03-18 14:46:21 -             arr[j+1]=arr[j];
2019-03-18 14:46:21 -             j--;
2019-03-18 14:46:21 -         }
2019-03-18 14:46:21 -         arr[j+1]=temp;
2019-03-18 14:46:21 -     }
2019-03-18 14:46:21 -     return arr;
2019-03-18 14:46:21 - }
2019-03-18 14:46:21 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:46:21 - InsertSort(arr);
2019-03-18 14:46:21 - foreach(var a in arr){
2019-03-18 14:46:21 -     Console.Write(a+",");
2019-03-18 14:46:21 -     Console.WriteLine();
2019-03-18 14:46:21 - }
2019-03-18 14:51:17 - public int[] InsertSort(int[] arr)
2019-03-18 14:51:17 - {
2019-03-18 14:51:17 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 14:51:17 -     {
2019-03-18 14:51:17 -         int temp = arr[i];
2019-03-18 14:51:17 -         int j = i-1;
2019-03-18 14:51:17 -         while(j>=0 ){
2019-03-18 14:51:17 -             if(arr[j]>temp){
2019-03-18 14:51:17 -                 arr[j+1]=arr[j];
2019-03-18 14:51:17 -                 j--;
2019-03-18 14:51:17 -             }else{
2019-03-18 14:51:17 -                 arr[j+1]=temp;
2019-03-18 14:51:17 -                 break;
2019-03-18 14:51:17 -             }
2019-03-18 14:51:17 -         }
2019-03-18 14:51:17 -     }
2019-03-18 14:51:17 -     return arr;
2019-03-18 14:51:17 - }
2019-03-18 14:51:17 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:51:17 - InsertSort(arr);
2019-03-18 14:51:17 - foreach(var a in arr){
2019-03-18 14:51:17 -     Console.Write(a+",");
2019-03-18 14:51:17 -     Console.WriteLine();
2019-03-18 14:51:17 - }
2019-03-18 14:51:35 - public int[] InsertSort(int[] arr)
2019-03-18 14:51:35 - {
2019-03-18 14:51:35 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 14:51:35 -     {
2019-03-18 14:51:35 -         int temp = arr[i];
2019-03-18 14:51:35 -         int j = i-1;
2019-03-18 14:51:35 -         while(j>=0 ){
2019-03-18 14:51:35 -             if(arr[j]>temp){
2019-03-18 14:51:35 -                 arr[j+1]=arr[j];
2019-03-18 14:51:35 -                 j--;
2019-03-18 14:51:35 -             }else{
2019-03-18 14:51:35 -                 break;
2019-03-18 14:51:35 -             }
2019-03-18 14:51:35 -         arr[j+1]=temp;
2019-03-18 14:51:35 -         }
2019-03-18 14:51:35 -     }
2019-03-18 14:51:35 -     return arr;
2019-03-18 14:51:35 - }
2019-03-18 14:51:35 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:51:35 - InsertSort(arr);
2019-03-18 14:51:35 - foreach(var a in arr){
2019-03-18 14:51:35 -     Console.Write(a+",");
2019-03-18 14:51:35 -     Console.WriteLine();
2019-03-18 14:51:35 - }
2019-03-18 14:52:19 - public int[] InsertSort(int[] arr)
2019-03-18 14:52:19 - {
2019-03-18 14:52:19 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 14:52:19 -     {
2019-03-18 14:52:19 -         int temp = arr[i];
2019-03-18 14:52:19 -         int j = i;
2019-03-18 14:52:19 -         while(j>0 ){
2019-03-18 14:52:19 -             if(arr[j-1]>temp){
2019-03-18 14:52:19 -                 arr[j]=arr[j-1];
2019-03-18 14:52:19 -                 j--;
2019-03-18 14:52:19 -             }else{
2019-03-18 14:52:19 -                 break;
2019-03-18 14:52:19 -             }
2019-03-18 14:52:19 -         arr[j+1]=temp;
2019-03-18 14:52:19 -         }
2019-03-18 14:52:19 -     }
2019-03-18 14:52:19 -     return arr;
2019-03-18 14:52:19 - }
2019-03-18 14:52:19 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:52:19 - InsertSort(arr);
2019-03-18 14:52:19 - foreach(var a in arr){
2019-03-18 14:52:19 -     Console.Write(a+",");
2019-03-18 14:52:19 -     Console.WriteLine();
2019-03-18 14:52:19 - }
2019-03-18 14:55:14 - public int[] InsertSort(int[] arr)
2019-03-18 14:55:14 - {
2019-03-18 14:55:14 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 14:55:14 -     {
2019-03-18 14:55:14 -         int temp = arr[i];
2019-03-18 14:55:14 -         int j = i;
2019-03-18 14:55:14 -         while(j>0 ){
2019-03-18 14:55:14 -             if(arr[j-1]>temp){
2019-03-18 14:55:14 -                 arr[j]=arr[j-1];
2019-03-18 14:55:14 -                 j--;
2019-03-18 14:55:14 -             }else{
2019-03-18 14:55:14 -                 break;
2019-03-18 14:55:14 -             }
2019-03-18 14:55:14 -         arr[j+1]=temp;
2019-03-18 14:55:14 -         }
2019-03-18 14:55:14 -     }
2019-03-18 14:55:14 -     return arr;
2019-03-18 14:55:14 - }
2019-03-18 14:55:14 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:55:14 - InsertSort(arr);
2019-03-18 14:55:14 - foreach(var a in arr){
2019-03-18 14:55:14 -     Console.Write(a+",");
2019-03-18 14:55:14 -     Console.WriteLine();
2019-03-18 14:55:14 - }
2019-03-18 14:56:10 - public int[] InsertSort(int[] arr)
2019-03-18 14:56:10 - {
2019-03-18 14:56:10 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 14:56:10 -     {
2019-03-18 14:56:10 -         int temp = arr[i];
2019-03-18 14:56:10 -         int j = i;
2019-03-18 14:56:10 -         while(j>0 ){
2019-03-18 14:56:10 -             if(arr[j-1]>temp){
2019-03-18 14:56:10 -                 arr[j]=arr[j-1];
2019-03-18 14:56:10 -                 j--;
2019-03-18 14:56:10 -             }else{
2019-03-18 14:56:10 -                 arr[j+1]=temp;
2019-03-18 14:56:10 -                 break;
2019-03-18 14:56:10 -             }
2019-03-18 14:56:10 -         }
2019-03-18 14:56:10 -     }
2019-03-18 14:56:10 -     return arr;
2019-03-18 14:56:10 - }
2019-03-18 14:56:10 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:56:10 - InsertSort(arr);
2019-03-18 14:56:10 - foreach(var a in arr){
2019-03-18 14:56:10 -     Console.Write(a+",");
2019-03-18 14:56:10 -     Console.WriteLine();
2019-03-18 14:56:10 - }
2019-03-18 14:56:47 - public int[] InsertSort(int[] arr)
2019-03-18 14:56:47 - {
2019-03-18 14:56:47 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 14:56:47 -     {
2019-03-18 14:56:47 -         int temp = arr[i];
2019-03-18 14:56:47 -         int j = i;
2019-03-18 14:56:47 -         while(j>0 ){
2019-03-18 14:56:47 -             if(arr[j-1]>temp){
2019-03-18 14:56:47 -                 arr[j]=arr[j-1];
2019-03-18 14:56:47 -                 j--;
2019-03-18 14:56:47 -             }else{
2019-03-18 14:56:47 -                 break;
2019-03-18 14:56:47 -             }
2019-03-18 14:56:47 -         }
2019-03-18 14:56:47 -         arr[j+1]=temp;
2019-03-18 14:56:47 -     }
2019-03-18 14:56:47 -     return arr;
2019-03-18 14:56:47 - }
2019-03-18 14:56:47 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:56:47 - InsertSort(arr);
2019-03-18 14:56:47 - foreach(var a in arr){
2019-03-18 14:56:47 -     Console.Write(a+",");
2019-03-18 14:56:47 -     Console.WriteLine();
2019-03-18 14:56:47 - }
2019-03-18 14:56:48 - One or more errors occurred.
2019-03-18 14:56:48 - Index was outside the bounds of the array.
2019-03-18 14:57:30 - public int[] InsertSort(int[] arr)
2019-03-18 14:57:30 - {
2019-03-18 14:57:30 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 14:57:30 -     {
2019-03-18 14:57:30 -         int temp = arr[i];
2019-03-18 14:57:30 -         int j = i;
2019-03-18 14:57:30 -         while(j>0 )
2019-03-18 14:57:30 -         {
2019-03-18 14:57:30 -             if(arr[j-1]>temp){
2019-03-18 14:57:30 -                 arr[j]=arr[j-1];
2019-03-18 14:57:30 -                 j--;
2019-03-18 14:57:30 -             }else{
2019-03-18 14:57:30 -                 break;
2019-03-18 14:57:30 -             }
2019-03-18 14:57:30 -         }
2019-03-18 14:57:30 -         //arr[j+1]=temp;
2019-03-18 14:57:30 -     }
2019-03-18 14:57:30 -     return arr;
2019-03-18 14:57:30 - }
2019-03-18 14:57:30 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:57:30 - InsertSort(arr);
2019-03-18 14:57:30 - foreach(var a in arr){
2019-03-18 14:57:30 -     Console.Write(a+",");
2019-03-18 14:57:30 -     Console.WriteLine();
2019-03-18 14:57:30 - }
2019-03-18 14:57:41 - public int[] InsertSort(int[] arr)
2019-03-18 14:57:41 - {
2019-03-18 14:57:41 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 14:57:41 -     {
2019-03-18 14:57:41 -         int temp = arr[i];
2019-03-18 14:57:41 -         int j = i;
2019-03-18 14:57:41 -         while(j>0 )
2019-03-18 14:57:41 -         {
2019-03-18 14:57:41 -             if(arr[j-1]>temp){
2019-03-18 14:57:41 -                 arr[j]=arr[j-1];
2019-03-18 14:57:41 -                 j--;
2019-03-18 14:57:41 -             }else{
2019-03-18 14:57:41 -                 break;
2019-03-18 14:57:41 -             }
2019-03-18 14:57:41 -         }
2019-03-18 14:57:41 -         arr[j]=temp;
2019-03-18 14:57:41 -     }
2019-03-18 14:57:41 -     return arr;
2019-03-18 14:57:41 - }
2019-03-18 14:57:41 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:57:41 - InsertSort(arr);
2019-03-18 14:57:41 - foreach(var a in arr){
2019-03-18 14:57:41 -     Console.Write(a+",");
2019-03-18 14:57:41 -     Console.WriteLine();
2019-03-18 14:57:41 - }
2019-03-18 14:58:28 - public int[] InsertSort(int[] arr)
2019-03-18 14:58:28 - {
2019-03-18 14:58:28 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 14:58:28 -     {
2019-03-18 14:58:28 -         int temp = arr[i];
2019-03-18 14:58:28 -         int j = i;
2019-03-18 14:58:28 -         while(j>0 &&arr[j-1]>temp)
2019-03-18 14:58:28 -         {
2019-03-18 14:58:28 -             arr[j]=arr[j-1];
2019-03-18 14:58:28 -             j--;
2019-03-18 14:58:28 -         }
2019-03-18 14:58:28 -         arr[j]=temp;
2019-03-18 14:58:28 -     }
2019-03-18 14:58:28 -     return arr;
2019-03-18 14:58:28 - }
2019-03-18 14:58:28 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:58:28 - InsertSort(arr);
2019-03-18 14:58:28 - foreach(var a in arr){
2019-03-18 14:58:28 -     Console.Write(a+",");
2019-03-18 14:58:28 -     Console.WriteLine();
2019-03-18 14:58:28 - }
2019-03-18 14:59:09 - public int[] InsertSort(int[] arr)
2019-03-18 14:59:09 - {
2019-03-18 14:59:09 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 14:59:09 -     {
2019-03-18 14:59:09 -         int temp = arr[i];
2019-03-18 14:59:09 -         int j = i;
2019-03-18 14:59:09 -         while(j>0 &&arr[j-1]>temp)
2019-03-18 14:59:09 -         {
2019-03-18 14:59:09 -             arr[j]=arr[j-1];
2019-03-18 14:59:09 -             j--;
2019-03-18 14:59:09 -         }
2019-03-18 14:59:09 -         arr[i]=temp;
2019-03-18 14:59:09 -     }
2019-03-18 14:59:09 -     return arr;
2019-03-18 14:59:09 - }
2019-03-18 14:59:09 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:59:09 - InsertSort(arr);
2019-03-18 14:59:09 - foreach(var a in arr){
2019-03-18 14:59:09 -     Console.Write(a+",");
2019-03-18 14:59:09 -     Console.WriteLine();
2019-03-18 14:59:09 - }
2019-03-18 14:59:20 - public int[] InsertSort(int[] arr)
2019-03-18 14:59:20 - {
2019-03-18 14:59:20 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 14:59:20 -     {
2019-03-18 14:59:20 -         int temp = arr[i];
2019-03-18 14:59:20 -         int j = i;
2019-03-18 14:59:20 -         while(j>0 &&arr[j-1]>temp)
2019-03-18 14:59:20 -         {
2019-03-18 14:59:20 -             arr[j]=arr[j-1];
2019-03-18 14:59:20 -             j--;
2019-03-18 14:59:20 -         }
2019-03-18 14:59:20 -         arr[j]=temp;
2019-03-18 14:59:20 -     }
2019-03-18 14:59:20 -     return arr;
2019-03-18 14:59:20 - }
2019-03-18 14:59:20 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 14:59:20 - InsertSort(arr);
2019-03-18 14:59:20 - foreach(var a in arr){
2019-03-18 14:59:20 -     Console.Write(a+",");
2019-03-18 14:59:20 -     Console.WriteLine();
2019-03-18 14:59:20 - }
2019-03-18 15:00:27 - public int[] InsertSort(int[] arr)
2019-03-18 15:00:27 - {
2019-03-18 15:00:27 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 15:00:27 -     {
2019-03-18 15:00:27 -         int temp = arr[i];
2019-03-18 15:00:27 -         int j = i;
2019-03-18 15:00:27 -         while(j>0 &&arr[j-1]>temp)
2019-03-18 15:00:27 -         {
2019-03-18 15:00:27 -             arr[j]=arr[j-1];
2019-03-18 15:00:27 -             j--;
2019-03-18 15:00:27 -         }
2019-03-18 15:00:27 -         arr[j]=temp;
2019-03-18 15:00:27 -     }
2019-03-18 15:00:27 -     return arr;
2019-03-18 15:00:27 - }
2019-03-18 15:00:27 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 15:00:27 - InsertSort(arr);
2019-03-18 15:00:27 - foreach(var a in arr)
2019-03-18 15:00:27 -     Console.Write(a+",");
2019-03-18 15:00:27 - Console.WriteLine();
2019-03-18 15:00:55 - public int[] InsertSort(int[] arr)
2019-03-18 15:00:55 - {
2019-03-18 15:00:55 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 15:00:55 -     {
2019-03-18 15:00:55 -         int temp = arr[i];
2019-03-18 15:00:55 -         int j = i;
2019-03-18 15:00:55 -         while(j>0 &&arr[j-1]>temp)
2019-03-18 15:00:55 -         {
2019-03-18 15:00:55 -             arr[j]=arr[j-1];
2019-03-18 15:00:55 -             j--;
2019-03-18 15:00:55 -         }
2019-03-18 15:00:55 -         arr[j]=temp;
2019-03-18 15:00:55 -         foreach(var a in arr)
2019-03-18 15:00:55 -             Console.Write(a+",");
2019-03-18 15:00:55 -         Console.WriteLine();
2019-03-18 15:00:55 -     }
2019-03-18 15:00:55 -     return arr;
2019-03-18 15:00:55 - }
2019-03-18 15:00:55 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 15:00:55 - InsertSort(arr);
2019-03-18 15:07:33 - public int[] InsertSort(int[] arr)
2019-03-18 15:07:33 - {
2019-03-18 15:07:33 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 15:07:33 -     {
2019-03-18 15:07:33 -         PrintSteps(arr,i);
2019-03-18 15:07:33 -         int temp = arr[i];
2019-03-18 15:07:33 -         int j = i;
2019-03-18 15:07:33 -         while(j>0 &&arr[j-1]>temp)
2019-03-18 15:07:33 -         {
2019-03-18 15:07:33 -             arr[j]=arr[j-1];
2019-03-18 15:07:33 -             j--;
2019-03-18 15:07:33 -         }
2019-03-18 15:07:33 -         arr[j]=temp;
2019-03-18 15:07:33 -     }
2019-03-18 15:07:33 -     return arr;
2019-03-18 15:07:33 - }
2019-03-18 15:07:33 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 15:07:33 - InsertSort(arr);
2019-03-18 15:07:33 - public void PrintSteps(int[] arr, int i)  
2019-03-18 15:07:33 - {
2019-03-18 15:07:33 -     Console.Write(string.Format("Step{0}: ", i));
2019-03-18 15:07:33 -     foreach(var a in arr)
2019-03-18 15:07:33 -         Console.Write(a+" ");
2019-03-18 15:07:33 -     Console.WriteLine();
2019-03-18 15:07:33 - }
2019-03-18 15:07:51 - public int[] InsertSort(int[] arr)
2019-03-18 15:07:51 - {
2019-03-18 15:07:51 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 15:07:51 -     {
2019-03-18 15:07:51 -         int temp = arr[i];
2019-03-18 15:07:51 -         int j = i;
2019-03-18 15:07:51 -         while(j>0 &&arr[j-1]>temp)
2019-03-18 15:07:51 -         {
2019-03-18 15:07:51 -             arr[j]=arr[j-1];
2019-03-18 15:07:51 -             j--;
2019-03-18 15:07:51 -         }
2019-03-18 15:07:51 -         arr[j]=temp;
2019-03-18 15:07:51 -         PrintSteps(arr,i);
2019-03-18 15:07:51 -     }
2019-03-18 15:07:51 -     return arr;
2019-03-18 15:07:51 - }
2019-03-18 15:07:51 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 15:07:51 - InsertSort(arr);
2019-03-18 15:07:51 - public void PrintSteps(int[] arr, int i)  
2019-03-18 15:07:51 - {
2019-03-18 15:07:51 -     Console.Write(string.Format("Step{0}: ", i));
2019-03-18 15:07:51 -     foreach(var a in arr)
2019-03-18 15:07:51 -         Console.Write(a+" ");
2019-03-18 15:07:51 -     Console.WriteLine();
2019-03-18 15:07:51 - }
2019-03-18 15:08:20 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 15:08:20 - InsertSort(arr);
2019-03-18 15:08:20 - public int[] InsertSort(int[] arr)
2019-03-18 15:08:20 - {
2019-03-18 15:08:20 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 15:08:20 -     {
2019-03-18 15:08:20 -         int temp = arr[i];
2019-03-18 15:08:20 -         int j = i;
2019-03-18 15:08:20 -         while(j>0 &&arr[j-1]>temp)
2019-03-18 15:08:20 -         {
2019-03-18 15:08:20 -             arr[j]=arr[j-1];
2019-03-18 15:08:20 -             j--;
2019-03-18 15:08:20 -         }
2019-03-18 15:08:20 -         arr[j]=temp;
2019-03-18 15:08:20 -         PrintSteps(arr,i);
2019-03-18 15:08:20 -     }
2019-03-18 15:08:20 -     return arr;
2019-03-18 15:08:20 - }
2019-03-18 15:08:20 - public void PrintSteps(int[] arr, int i)  
2019-03-18 15:08:20 - {
2019-03-18 15:08:20 -     Console.Write(string.Format("Step{0}: ", i));
2019-03-18 15:08:20 -     foreach(var a in arr)
2019-03-18 15:08:20 -         Console.Write(a+" ");
2019-03-18 15:08:20 -     Console.WriteLine();
2019-03-18 15:08:20 - }
2019-03-18 15:19:55 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 15:19:55 - InsertSort(arr);
2019-03-18 15:19:55 - public int[] InsertSort(int[] arr)
2019-03-18 15:19:55 - {
2019-03-18 15:19:55 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 15:19:55 -     {
2019-03-18 15:19:55 -         int temp = arr[i];
2019-03-18 15:19:55 -         int j = i;
2019-03-18 15:19:55 -         while(j>0 &&arr[j-1]>temp)
2019-03-18 15:19:55 -         {
2019-03-18 15:19:55 -             arr[j]=arr[j-1];
2019-03-18 15:19:55 -             j--;
2019-03-18 15:19:55 -         }
2019-03-18 15:19:55 -         arr[j]=temp;
2019-03-18 15:19:55 -         PrintSteps(arr,i);
2019-03-18 15:19:55 -     }
2019-03-18 15:19:55 -     return arr;
2019-03-18 15:19:55 - }
2019-03-18 15:19:55 - public void PrintSteps(int[] arr, int i)  
2019-03-18 15:19:55 - {
2019-03-18 15:19:55 -     Console.Write(string.Format("Step{0}: ", i));
2019-03-18 15:19:55 -     foreach(var a in arr)
2019-03-18 15:19:55 -         Console.Write(a+" ");
2019-03-18 15:19:55 -     Console.WriteLine();
2019-03-18 15:19:55 - }
2019-03-18 15:52:12 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 15:52:12 - SelectionSort(arr);
2019-03-18 15:52:12 - public int[] SelectionSort(int[] arr){
2019-03-18 15:52:12 -     for(int i = 0; i<arr.Length;i++)
2019-03-18 15:52:12 -     {
2019-03-18 15:52:12 -         min = i; // smallest index
2019-03-18 15:52:12 -         for(int j = i+1;j<arr.Length;j++)
2019-03-18 15:52:12 -         {
2019-03-18 15:52:12 -             if(arr[j]<arr[min])
2019-03-18 15:52:12 -                 min = j;
2019-03-18 15:52:12 -         }
2019-03-18 15:52:12 -         Swap(ref arr[min], ref arr[i]);
2019-03-18 15:52:12 -     }
2019-03-18 15:52:12 - }
2019-03-18 15:52:12 - public void Swap(ref int a, ref int b)
2019-03-18 15:52:12 - {
2019-03-18 15:52:12 -     int temp = a;
2019-03-18 15:52:12 -     a = b;
2019-03-18 15:52:12 -     b = temp;
2019-03-18 15:52:12 - }
2019-03-18 15:52:12 - (8,9): error CS0103: The name 'min' does not exist in the current context
2019-03-18 15:52:12 - (11,27): error CS0103: The name 'min' does not exist in the current context
2019-03-18 15:52:12 - (12,17): error CS0103: The name 'min' does not exist in the current context
2019-03-18 15:52:12 - (14,22): error CS0103: The name 'min' does not exist in the current context
2019-03-18 15:52:12 - (5,14): error CS0161: 'SelectionSort(int[])': not all code paths return a value
2019-03-18 15:52:17 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 15:52:17 - SelectionSort(arr);
2019-03-18 15:52:17 - public int[] SelectionSort(int[] arr){
2019-03-18 15:52:17 -     for(int i = 0; i<arr.Length;i++)
2019-03-18 15:52:17 -     {
2019-03-18 15:52:17 -         int min = i; // smallest index
2019-03-18 15:52:17 -         for(int j = i+1;j<arr.Length;j++)
2019-03-18 15:52:17 -         {
2019-03-18 15:52:17 -             if(arr[j]<arr[min])
2019-03-18 15:52:17 -                 min = j;
2019-03-18 15:52:17 -         }
2019-03-18 15:52:17 -         Swap(ref arr[min], ref arr[i]);
2019-03-18 15:52:17 -     }
2019-03-18 15:52:17 - }
2019-03-18 15:52:17 - public void Swap(ref int a, ref int b)
2019-03-18 15:52:17 - {
2019-03-18 15:52:17 -     int temp = a;
2019-03-18 15:52:17 -     a = b;
2019-03-18 15:52:17 -     b = temp;
2019-03-18 15:52:17 - }
2019-03-18 15:52:17 - (5,14): error CS0161: 'SelectionSort(int[])': not all code paths return a value
2019-03-18 15:52:34 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 15:52:34 - SelectionSort(arr);
2019-03-18 15:52:34 - public int[] SelectionSort(int[] arr){
2019-03-18 15:52:34 -     for(int i = 0; i<arr.Length;i++)
2019-03-18 15:52:34 -     {
2019-03-18 15:52:34 -         int min = i; // smallest index
2019-03-18 15:52:34 -         for(int j = i+1;j<arr.Length;j++)
2019-03-18 15:52:34 -         {
2019-03-18 15:52:34 -             if(arr[j]<arr[min])
2019-03-18 15:52:34 -                 min = j;
2019-03-18 15:52:34 -         }
2019-03-18 15:52:34 -         Swap(ref arr[min], ref arr[i]);
2019-03-18 15:52:34 -     }
2019-03-18 15:52:34 -     return arr;
2019-03-18 15:52:34 - }
2019-03-18 15:52:34 - public void Swap(ref int a, ref int b)
2019-03-18 15:52:34 - {
2019-03-18 15:52:34 -     int temp = a;
2019-03-18 15:52:34 -     a = b;
2019-03-18 15:52:34 -     b = temp;
2019-03-18 15:52:34 - }
2019-03-18 15:53:08 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 15:53:08 - SelectionSort(arr);
2019-03-18 15:53:08 - public int[] SelectionSort(int[] arr){
2019-03-18 15:53:08 -     for(int i = 0; i<arr.Length;i++)
2019-03-18 15:53:08 -     {
2019-03-18 15:53:08 -         int min = i; // smallest index
2019-03-18 15:53:08 -         for(int j = i+1;j<arr.Length;j++)
2019-03-18 15:53:08 -         {
2019-03-18 15:53:08 -             if(arr[j]<arr[min])
2019-03-18 15:53:08 -                 min = j;
2019-03-18 15:53:08 -         }
2019-03-18 15:53:08 -         Swap(ref arr[min], ref arr[i]);
2019-03-18 15:53:08 -         PrintSteps(arr,i);
2019-03-18 15:53:08 -     }
2019-03-18 15:53:08 -     return arr;
2019-03-18 15:53:08 - }
2019-03-18 15:53:08 - public void Swap(ref int a, ref int b)
2019-03-18 15:53:08 - {
2019-03-18 15:53:08 -     int temp = a;
2019-03-18 15:53:08 -     a = b;
2019-03-18 15:53:08 -     b = temp;
2019-03-18 15:53:08 - }
2019-03-18 15:53:08 - public void PrintSteps(int[] arr, int i)  
2019-03-18 15:53:08 - {
2019-03-18 15:53:08 -     Console.Write(string.Format("Step{0}: ", i));
2019-03-18 15:53:08 -     foreach(var a in arr)
2019-03-18 15:53:08 -         Console.Write(a+" ");
2019-03-18 15:53:08 -     Console.WriteLine();
2019-03-18 15:53:08 - }
2019-03-18 15:55:14 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 15:55:14 - SelectionSort(arr);
2019-03-18 15:55:14 - public int[] SelectionSort(int[] arr){
2019-03-18 15:55:14 -     for(int i = 0; i<arr.Length;i++)
2019-03-18 15:55:14 -     {
2019-03-18 15:55:14 -         int min = i; // smallest index
2019-03-18 15:55:14 -         for(int j = i+1;j<arr.Length;j++)
2019-03-18 15:55:14 -         {
2019-03-18 15:55:14 -             if(arr[j]<arr[min])
2019-03-18 15:55:14 -                 min = j;
2019-03-18 15:55:14 -         }
2019-03-18 15:55:14 -         if(minIndex!=i)
2019-03-18 15:55:14 -             Swap(ref arr[min], ref arr[i]);
2019-03-18 15:55:14 -         PrintSteps(arr,i);
2019-03-18 15:55:14 -     }
2019-03-18 15:55:14 -     return arr;
2019-03-18 15:55:14 - }
2019-03-18 15:55:14 - public void Swap(ref int a, ref int b)
2019-03-18 15:55:14 - {
2019-03-18 15:55:14 -     int temp = a;
2019-03-18 15:55:14 -     a = b;
2019-03-18 15:55:14 -     b = temp;
2019-03-18 15:55:14 - }
2019-03-18 15:55:14 - public void PrintSteps(int[] arr, int i)  
2019-03-18 15:55:14 - {
2019-03-18 15:55:14 -     Console.Write(string.Format("Step{0}: ", i));
2019-03-18 15:55:14 -     foreach(var a in arr)
2019-03-18 15:55:14 -         Console.Write(a+" ");
2019-03-18 15:55:14 -     Console.WriteLine();
2019-03-18 15:55:14 - }
2019-03-18 15:55:14 - (14,12): error CS0103: The name 'minIndex' does not exist in the current context
2019-03-18 15:55:42 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 15:55:42 - SelectionSort(arr);
2019-03-18 15:55:42 - public int[] SelectionSort(int[] arr){
2019-03-18 15:55:42 -     for(int i = 0; i<arr.Length;i++)
2019-03-18 15:55:42 -     {
2019-03-18 15:55:42 -         int minIndex = i; // smallest index
2019-03-18 15:55:42 -         for(int j = i+1;j<arr.Length;j++)
2019-03-18 15:55:42 -         {
2019-03-18 15:55:42 -             if(arr[j]<arr[minIndex])
2019-03-18 15:55:42 -                 minIndex = j;
2019-03-18 15:55:42 -         }
2019-03-18 15:55:42 -         if(minIndex!=i)
2019-03-18 15:55:42 -             Swap(ref arr[minIndex], ref arr[i]);
2019-03-18 15:55:42 -         PrintSteps(arr,i);
2019-03-18 15:55:42 -     }
2019-03-18 15:55:42 -     return arr;
2019-03-18 15:55:42 - }
2019-03-18 15:55:42 - public void Swap(ref int a, ref int b)
2019-03-18 15:55:42 - {
2019-03-18 15:55:42 -     int temp = a;
2019-03-18 15:55:42 -     a = b;
2019-03-18 15:55:42 -     b = temp;
2019-03-18 15:55:42 - }
2019-03-18 15:55:42 - public void PrintSteps(int[] arr, int i)  
2019-03-18 15:55:42 - {
2019-03-18 15:55:42 -     Console.Write(string.Format("Step{0}: ", i));
2019-03-18 15:55:42 -     foreach(var a in arr)
2019-03-18 15:55:42 -         Console.Write(a+" ");
2019-03-18 15:55:42 -     Console.WriteLine();
2019-03-18 15:55:42 - }
2019-03-18 15:56:35 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 15:56:35 - SelectionSort(arr);
2019-03-18 15:56:35 - public int[] SelectionSort(int[] arr){
2019-03-18 15:56:35 -     for(int i = 0; i<arr.Length;i++)
2019-03-18 15:56:35 -     {
2019-03-18 15:56:35 -         int minIndex = i; // smallest index
2019-03-18 15:56:35 -         for(int j = i+1;j<arr.Length;j++)
2019-03-18 15:56:35 -         {
2019-03-18 15:56:35 -             if(arr[j]<arr[minIndex])
2019-03-18 15:56:35 -                 minIndex = j;
2019-03-18 15:56:35 -         }
2019-03-18 15:56:35 -         Swap(ref arr[minIndex], ref arr[i]);
2019-03-18 15:56:35 -         PrintSteps(arr,i);
2019-03-18 15:56:35 -     }
2019-03-18 15:56:35 -     return arr;
2019-03-18 15:56:35 - }
2019-03-18 15:56:35 - public void Swap(ref int a, ref int b)
2019-03-18 15:56:35 - {
2019-03-18 15:56:35 -     int temp = a;
2019-03-18 15:56:35 -     a = b;
2019-03-18 15:56:35 -     b = temp;
2019-03-18 15:56:35 - }
2019-03-18 15:56:35 - public void PrintSteps(int[] arr, int i)  
2019-03-18 15:56:35 - {
2019-03-18 15:56:35 -     Console.Write(string.Format("Step{0}: ", i));
2019-03-18 15:56:35 -     foreach(var a in arr)
2019-03-18 15:56:35 -         Console.Write(a+" ");
2019-03-18 15:56:35 -     Console.WriteLine();
2019-03-18 15:56:35 - }
2019-03-18 15:56:42 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 15:56:42 - SelectionSort(arr);
2019-03-18 15:56:42 - public int[] SelectionSort(int[] arr){
2019-03-18 15:56:42 -     for(int i = 0; i<arr.Length;i++)
2019-03-18 15:56:42 -     {
2019-03-18 15:56:42 -         int minIndex = i; // smallest index
2019-03-18 15:56:42 -         for(int j = i+1;j<arr.Length;j++)
2019-03-18 15:56:42 -         {
2019-03-18 15:56:42 -             if(arr[j]<arr[minIndex])
2019-03-18 15:56:42 -                 minIndex = j;
2019-03-18 15:56:42 -         }
2019-03-18 15:56:42 -         Swap(ref arr[minIndex], ref arr[i]);
2019-03-18 15:56:42 -         PrintSteps(arr,i);
2019-03-18 15:56:42 -     }
2019-03-18 15:56:42 -     return arr;
2019-03-18 15:56:42 - }
2019-03-18 15:56:42 - public void Swap(ref int a, ref int b)
2019-03-18 15:56:42 - {
2019-03-18 15:56:42 -     int temp = a;
2019-03-18 15:56:42 -     a = b;
2019-03-18 15:56:42 -     b = temp;
2019-03-18 15:56:42 - }
2019-03-18 15:56:42 - public void PrintSteps(int[] arr, int i)  
2019-03-18 15:56:42 - {
2019-03-18 15:56:42 -     Console.Write(string.Format("Step{0}: ", i));
2019-03-18 15:56:42 -     foreach(var a in arr)
2019-03-18 15:56:42 -         Console.Write(a+" ");
2019-03-18 15:56:42 -     Console.WriteLine();
2019-03-18 15:56:42 - }
2019-03-18 15:57:53 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 15:57:53 - SelectionSort(arr);
2019-03-18 15:57:53 - public int[] SelectionSort(int[] arr){
2019-03-18 15:57:53 -     for(int i = 0; i<arr.Length;i++)
2019-03-18 15:57:53 -     {
2019-03-18 15:57:53 -         int minIndex = i; // smallest index
2019-03-18 15:57:53 -         for(int j = i+1;j<arr.Length;j++)
2019-03-18 15:57:53 -         {
2019-03-18 15:57:53 -             if(arr[j]<arr[minIndex])
2019-03-18 15:57:53 -                 minIndex = j;
2019-03-18 15:57:53 -         }
2019-03-18 15:57:53 -         if(minIndex!=i)
2019-03-18 15:57:53 -             Swap(ref arr[minIndex], ref arr[i]);
2019-03-18 15:57:53 -         PrintSteps(arr,i);
2019-03-18 15:57:53 -     }
2019-03-18 15:57:53 -     return arr;
2019-03-18 15:57:53 - }
2019-03-18 15:57:53 - public void Swap(ref int a, ref int b)
2019-03-18 15:57:53 - {
2019-03-18 15:57:53 -     int temp = a;
2019-03-18 15:57:53 -     a = b;
2019-03-18 15:57:53 -     b = temp;
2019-03-18 15:57:53 - }
2019-03-18 15:57:53 - public void PrintSteps(int[] arr, int i)  
2019-03-18 15:57:53 - {
2019-03-18 15:57:53 -     Console.Write(string.Format("Step{0}: ", i));
2019-03-18 15:57:53 -     foreach(var a in arr)
2019-03-18 15:57:53 -         Console.Write(a+" ");
2019-03-18 15:57:53 -     Console.WriteLine();
2019-03-18 15:57:53 - }
2019-03-18 15:58:23 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 15:58:23 - SelectionSort(arr);
2019-03-18 15:58:23 - public int[] SelectionSort(int[] arr){
2019-03-18 15:58:23 -     for(int i = 0; i<arr.Length;i++)
2019-03-18 15:58:23 -     {
2019-03-18 15:58:23 -         int minIndex = i; // smallest index
2019-03-18 15:58:23 -         for(int j = i+1;j<arr.Length;j++)
2019-03-18 15:58:23 -         {
2019-03-18 15:58:23 -             if(arr[j]<arr[minIndex])
2019-03-18 15:58:23 -                 minIndex = j;
2019-03-18 15:58:23 -         }
2019-03-18 15:58:23 -         if(minIndex!=i)
2019-03-18 15:58:23 -         {
2019-03-18 15:58:23 -             Swap(ref arr[minIndex], ref arr[i]);
2019-03-18 15:58:23 -             PrintSteps(arr,i);
2019-03-18 15:58:23 -         }
2019-03-18 15:58:23 -     }
2019-03-18 15:58:23 -     return arr;
2019-03-18 15:58:23 - }
2019-03-18 15:58:23 - public void Swap(ref int a, ref int b)
2019-03-18 15:58:23 - {
2019-03-18 15:58:23 -     int temp = a;
2019-03-18 15:58:23 -     a = b;
2019-03-18 15:58:23 -     b = temp;
2019-03-18 15:58:23 - }
2019-03-18 15:58:23 - public void PrintSteps(int[] arr, int i)  
2019-03-18 15:58:23 - {
2019-03-18 15:58:23 -     Console.Write(string.Format("Step{0}: ", i));
2019-03-18 15:58:23 -     foreach(var a in arr)
2019-03-18 15:58:23 -         Console.Write(a+" ");
2019-03-18 15:58:23 -     Console.WriteLine();
2019-03-18 15:58:23 - }
2019-03-18 16:23:53 - public int[] SelectionSort(int[] arr){
2019-03-18 16:23:53 -     for(int i = 0; i<arr.Length;i++)
2019-03-18 16:23:53 -     {
2019-03-18 16:23:53 -         int minIndex = i; // smallest index
2019-03-18 16:23:53 -         for(int j = i+1;j<arr.Length;j++)
2019-03-18 16:23:53 -         {
2019-03-18 16:23:53 -             if(arr[j]<arr[minIndex])
2019-03-18 16:23:53 -                 minIndex = j;
2019-03-18 16:23:53 -         }
2019-03-18 16:23:53 -         if(minIndex!=i)
2019-03-18 16:23:53 -             Swap(ref arr[minIndex], ref arr[i]);
2019-03-18 16:23:53 -         PrintSteps(arr,i);
2019-03-18 16:23:53 -     }
2019-03-18 16:23:53 -     return arr;
2019-03-18 16:23:53 - }
2019-03-18 16:23:53 - SelectionSort(arr);
2019-03-18 16:24:55 - public int[] SelectionSort(int[] arr){
2019-03-18 16:24:55 -     for(int i = 0; i<arr.Length;i++)
2019-03-18 16:24:55 -     {
2019-03-18 16:24:55 -         int minIndex = i; // smallest index
2019-03-18 16:24:55 -         for(int j = i+1;j<arr.Length;j++)
2019-03-18 16:24:55 -         {
2019-03-18 16:24:55 -             if(arr[j]<arr[minIndex])
2019-03-18 16:24:55 -                 minIndex = j;
2019-03-18 16:24:55 -         }
2019-03-18 16:24:55 -         // Only swap when minIndex changed
2019-03-18 16:24:55 -         if(minIndex!=i)
2019-03-18 16:24:55 -             Swap(ref arr[minIndex], ref arr[i]);
2019-03-18 16:24:55 -         PrintSteps(arr,i);
2019-03-18 16:24:55 -     }
2019-03-18 16:24:55 -     return arr;
2019-03-18 16:24:55 - }
2019-03-18 16:24:55 - SelectionSort(arr);
2019-03-18 17:45:14 - public int[] BubbleSort(int[] arr)
2019-03-18 17:45:14 - {
2019-03-18 17:45:14 -     n = arr.Length-1;
2019-03-18 17:45:14 -     bool swap = false;
2019-03-18 17:45:14 -     do{
2019-03-18 17:45:14 -         swap = false;
2019-03-18 17:45:14 -         for(int i = 0;i< n;i++)
2019-03-18 17:45:14 -         {
2019-03-18 17:45:14 -             if(arr[i]>arr[i+1])
2019-03-18 17:45:14 -             {
2019-03-18 17:45:14 -                 Swap(arr[i],arr[i+1]);
2019-03-18 17:45:14 -                 swap = true;
2019-03-18 17:45:14 -             }
2019-03-18 17:45:14 -         }
2019-03-18 17:45:14 -         PrintSteps(arr,i);
2019-03-18 17:45:14 -         n--;
2019-03-18 17:45:14 -     }while(swap)
2019-03-18 17:45:14 -     return arr;
2019-03-18 17:45:14 - }
2019-03-18 17:45:14 - (17,17): error CS1002: ; expected
2019-03-18 17:45:20 - public int[] BubbleSort(int[] arr)
2019-03-18 17:45:20 - {
2019-03-18 17:45:20 -     n = arr.Length-1;
2019-03-18 17:45:20 -     bool swap = false;
2019-03-18 17:45:20 -     do{
2019-03-18 17:45:20 -         swap = false;
2019-03-18 17:45:20 -         for(int i = 0;i< n;i++)
2019-03-18 17:45:20 -         {
2019-03-18 17:45:20 -             if(arr[i]>arr[i+1])
2019-03-18 17:45:20 -             {
2019-03-18 17:45:20 -                 Swap(arr[i],arr[i+1]);
2019-03-18 17:45:20 -                 swap = true;
2019-03-18 17:45:20 -             }
2019-03-18 17:45:20 -         }
2019-03-18 17:45:20 -         PrintSteps(arr,i);
2019-03-18 17:45:20 -         n--;
2019-03-18 17:45:20 -     }while(swap);
2019-03-18 17:45:20 -     return arr;
2019-03-18 17:45:20 - }
2019-03-18 17:45:20 - (3,5): error CS0103: The name 'n' does not exist in the current context
2019-03-18 17:45:20 - (7,26): error CS0103: The name 'n' does not exist in the current context
2019-03-18 17:45:20 - (11,22): error CS1620: Argument 1 must be passed with the 'ref' keyword
2019-03-18 17:45:20 - (11,29): error CS1620: Argument 2 must be passed with the 'ref' keyword
2019-03-18 17:45:20 - (15,24): error CS0103: The name 'i' does not exist in the current context
2019-03-18 17:45:20 - (16,9): error CS0103: The name 'n' does not exist in the current context
2019-03-18 17:45:31 - public int[] BubbleSort(int[] arr)
2019-03-18 17:45:31 - {
2019-03-18 17:45:31 -     int n = arr.Length-1;
2019-03-18 17:45:31 -     bool swap = false;
2019-03-18 17:45:31 -     do{
2019-03-18 17:45:31 -         swap = false;
2019-03-18 17:45:31 -         for(int i = 0;i< n;i++)
2019-03-18 17:45:31 -         {
2019-03-18 17:45:31 -             if(arr[i]>arr[i+1])
2019-03-18 17:45:31 -             {
2019-03-18 17:45:31 -                 Swap(arr[i],arr[i+1]);
2019-03-18 17:45:31 -                 swap = true;
2019-03-18 17:45:31 -             }
2019-03-18 17:45:31 -         }
2019-03-18 17:45:31 -         PrintSteps(arr,i);
2019-03-18 17:45:31 -         n--;
2019-03-18 17:45:31 -     }while(swap);
2019-03-18 17:45:31 -     return arr;
2019-03-18 17:45:31 - }
2019-03-18 17:45:31 - (11,22): error CS1620: Argument 1 must be passed with the 'ref' keyword
2019-03-18 17:45:31 - (11,29): error CS1620: Argument 2 must be passed with the 'ref' keyword
2019-03-18 17:45:31 - (15,24): error CS0103: The name 'i' does not exist in the current context
2019-03-18 17:45:41 - public int[] BubbleSort(int[] arr)
2019-03-18 17:45:41 - {
2019-03-18 17:45:41 -     int n = arr.Length-1;
2019-03-18 17:45:41 -     bool swap = false;
2019-03-18 17:45:41 -     do{
2019-03-18 17:45:41 -         swap = false;
2019-03-18 17:45:41 -         for(int i = 0;i< n;i++)
2019-03-18 17:45:41 -         {
2019-03-18 17:45:41 -             if(arr[i]>arr[i+1])
2019-03-18 17:45:41 -             {
2019-03-18 17:45:41 -                 Swap(ref arr[i], ref arr[i+1]);
2019-03-18 17:45:41 -                 swap = true;
2019-03-18 17:45:41 -             }
2019-03-18 17:45:41 -         }
2019-03-18 17:45:41 -         PrintSteps(arr,i);
2019-03-18 17:45:41 -         n--;
2019-03-18 17:45:41 -     }while(swap);
2019-03-18 17:45:41 -     return arr;
2019-03-18 17:45:41 - }
2019-03-18 17:45:41 - (15,24): error CS0103: The name 'i' does not exist in the current context
2019-03-18 17:46:48 - public int[] BubbleSort(int[] arr)
2019-03-18 17:46:48 - {
2019-03-18 17:46:48 -     int n = arr.Length-1;
2019-03-18 17:46:48 -     bool swap = false;
2019-03-18 17:46:48 -     do{
2019-03-18 17:46:48 -         swap = false;
2019-03-18 17:46:48 -         for(int i = 0;i< n;i++)
2019-03-18 17:46:48 -         {
2019-03-18 17:46:48 -             if(arr[i]>arr[i+1])
2019-03-18 17:46:48 -             {
2019-03-18 17:46:48 -                 Swap(ref arr[i], ref arr[i+1]);
2019-03-18 17:46:48 -                 swap = true;
2019-03-18 17:46:48 -             }
2019-03-18 17:46:48 -         }
2019-03-18 17:46:48 -         PrintSteps(arr,arr.Length-n);
2019-03-18 17:46:48 -         n--;
2019-03-18 17:46:48 -     }while(swap);
2019-03-18 17:46:48 -     return arr;
2019-03-18 17:46:48 - }
2019-03-18 17:46:57 - public int[] BubbleSort(int[] arr)
2019-03-18 17:46:57 - {
2019-03-18 17:46:57 -     int n = arr.Length-1;
2019-03-18 17:46:57 -     bool swap = false;
2019-03-18 17:46:57 -     do{
2019-03-18 17:46:57 -         swap = false;
2019-03-18 17:46:57 -         for(int i = 0;i< n;i++)
2019-03-18 17:46:57 -         {
2019-03-18 17:46:57 -             if(arr[i]>arr[i+1])
2019-03-18 17:46:57 -             {
2019-03-18 17:46:57 -                 Swap(ref arr[i], ref arr[i+1]);
2019-03-18 17:46:57 -                 swap = true;
2019-03-18 17:46:57 -             }
2019-03-18 17:46:57 -         }
2019-03-18 17:46:57 -         PrintSteps(arr,arr.Length-n);
2019-03-18 17:46:57 -         n--;
2019-03-18 17:46:57 -     }while(swap);
2019-03-18 17:46:57 -     return arr;
2019-03-18 17:46:57 - }
2019-03-18 17:47:01 - public int[] BubbleSort(int[] arr)
2019-03-18 17:47:01 - {
2019-03-18 17:47:01 -     int n = arr.Length-1;
2019-03-18 17:47:01 -     bool swap = false;
2019-03-18 17:47:01 -     do{
2019-03-18 17:47:01 -         swap = false;
2019-03-18 17:47:01 -         for(int i = 0;i< n;i++)
2019-03-18 17:47:01 -         {
2019-03-18 17:47:01 -             if(arr[i]>arr[i+1])
2019-03-18 17:47:01 -             {
2019-03-18 17:47:01 -                 Swap(ref arr[i], ref arr[i+1]);
2019-03-18 17:47:01 -                 swap = true;
2019-03-18 17:47:01 -             }
2019-03-18 17:47:01 -         }
2019-03-18 17:47:01 -         PrintSteps(arr,arr.Length-n);
2019-03-18 17:47:01 -         n--;
2019-03-18 17:47:01 -     }while(swap);
2019-03-18 17:47:01 -     return arr;
2019-03-18 17:47:01 - }
2019-03-18 17:47:03 - public int[] BubbleSort(int[] arr)
2019-03-18 17:47:03 - {
2019-03-18 17:47:03 -     int n = arr.Length-1;
2019-03-18 17:47:03 -     bool swap = false;
2019-03-18 17:47:03 -     do{
2019-03-18 17:47:03 -         swap = false;
2019-03-18 17:47:03 -         for(int i = 0;i< n;i++)
2019-03-18 17:47:03 -         {
2019-03-18 17:47:03 -             if(arr[i]>arr[i+1])
2019-03-18 17:47:03 -             {
2019-03-18 17:47:03 -                 Swap(ref arr[i], ref arr[i+1]);
2019-03-18 17:47:03 -                 swap = true;
2019-03-18 17:47:03 -             }
2019-03-18 17:47:03 -         }
2019-03-18 17:47:03 -         PrintSteps(arr,arr.Length-n);
2019-03-18 17:47:03 -         n--;
2019-03-18 17:47:03 -     }while(swap);
2019-03-18 17:47:03 -     return arr;
2019-03-18 17:47:03 - }
2019-03-18 17:47:10 - public void PrintSteps(int[] arr, int i)  
2019-03-18 17:47:10 - {
2019-03-18 17:47:10 -     Console.Write(string.Format("Step{0}: ", i));
2019-03-18 17:47:10 -     foreach(var a in arr)
2019-03-18 17:47:10 -         Console.Write(a+" ");
2019-03-18 17:47:10 -     Console.WriteLine();
2019-03-18 17:47:10 - }
2019-03-18 17:47:10 - public void Swap(ref int a, ref int b)
2019-03-18 17:47:10 - {
2019-03-18 17:47:10 -     int temp = a;
2019-03-18 17:47:10 -     a = b;
2019-03-18 17:47:10 -     b = temp;
2019-03-18 17:47:10 - }
2019-03-18 17:47:10 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 17:47:13 - public int[] InsertSort(int[] arr)
2019-03-18 17:47:13 - {
2019-03-18 17:47:13 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 17:47:13 -     {
2019-03-18 17:47:13 -         int temp = arr[i];
2019-03-18 17:47:13 -         int j = i;
2019-03-18 17:47:13 -         while(j>0 &&arr[j-1]>temp)
2019-03-18 17:47:13 -         {
2019-03-18 17:47:13 -             arr[j]=arr[j-1];
2019-03-18 17:47:13 -             j--;
2019-03-18 17:47:13 -         }
2019-03-18 17:47:13 -         arr[j]=temp;
2019-03-18 17:47:13 -         PrintSteps(arr,i);
2019-03-18 17:47:13 -     }
2019-03-18 17:47:13 -     return arr;
2019-03-18 17:47:13 - }
2019-03-18 17:47:13 - // Call the function
2019-03-18 17:47:13 - InsertSort(arr);
2019-03-18 17:47:16 - public int[] SelectionSort(int[] arr){
2019-03-18 17:47:16 -     for(int i = 0; i<arr.Length;i++)
2019-03-18 17:47:16 -     {
2019-03-18 17:47:16 -         int minIndex = i; // smallest index
2019-03-18 17:47:16 -         for(int j = i+1;j<arr.Length;j++)
2019-03-18 17:47:16 -         {
2019-03-18 17:47:16 -             if(arr[j]<arr[minIndex])
2019-03-18 17:47:16 -                 minIndex = j;
2019-03-18 17:47:16 -         }
2019-03-18 17:47:16 -         // Only swap when minIndex changed
2019-03-18 17:47:16 -         if(minIndex!=i)
2019-03-18 17:47:16 -             Swap(ref arr[minIndex], ref arr[i]);
2019-03-18 17:47:16 -         PrintSteps(arr,i);
2019-03-18 17:47:16 -     }
2019-03-18 17:47:16 -     return arr;
2019-03-18 17:47:16 - }
2019-03-18 17:47:16 - SelectionSort(arr);
2019-03-18 17:47:20 - public int[] BubbleSort(int[] arr)
2019-03-18 17:47:20 - {
2019-03-18 17:47:20 -     int n = arr.Length-1;
2019-03-18 17:47:20 -     bool swap = false;
2019-03-18 17:47:20 -     do{
2019-03-18 17:47:20 -         swap = false;
2019-03-18 17:47:20 -         for(int i = 0;i< n;i++)
2019-03-18 17:47:20 -         {
2019-03-18 17:47:20 -             if(arr[i]>arr[i+1])
2019-03-18 17:47:20 -             {
2019-03-18 17:47:20 -                 Swap(ref arr[i], ref arr[i+1]);
2019-03-18 17:47:20 -                 swap = true;
2019-03-18 17:47:20 -             }
2019-03-18 17:47:20 -         }
2019-03-18 17:47:20 -         PrintSteps(arr,arr.Length-n);
2019-03-18 17:47:20 -         n--;
2019-03-18 17:47:20 -     }while(swap);
2019-03-18 17:47:20 -     return arr;
2019-03-18 17:47:20 - }
2019-03-18 17:47:22 - public int[] BubbleSort(int[] arr)
2019-03-18 17:47:22 - {
2019-03-18 17:47:22 -     int n = arr.Length-1;
2019-03-18 17:47:22 -     bool swap = false;
2019-03-18 17:47:22 -     do{
2019-03-18 17:47:22 -         swap = false;
2019-03-18 17:47:22 -         for(int i = 0;i< n;i++)
2019-03-18 17:47:22 -         {
2019-03-18 17:47:22 -             if(arr[i]>arr[i+1])
2019-03-18 17:47:22 -             {
2019-03-18 17:47:22 -                 Swap(ref arr[i], ref arr[i+1]);
2019-03-18 17:47:22 -                 swap = true;
2019-03-18 17:47:22 -             }
2019-03-18 17:47:22 -         }
2019-03-18 17:47:22 -         PrintSteps(arr,arr.Length-n);
2019-03-18 17:47:22 -         n--;
2019-03-18 17:47:22 -     }while(swap);
2019-03-18 17:47:22 -     return arr;
2019-03-18 17:47:22 - }
2019-03-18 17:47:23 - public int[] BubbleSort(int[] arr)
2019-03-18 17:47:23 - {
2019-03-18 17:47:23 -     int n = arr.Length-1;
2019-03-18 17:47:23 -     bool swap = false;
2019-03-18 17:47:23 -     do{
2019-03-18 17:47:23 -         swap = false;
2019-03-18 17:47:23 -         for(int i = 0;i< n;i++)
2019-03-18 17:47:23 -         {
2019-03-18 17:47:23 -             if(arr[i]>arr[i+1])
2019-03-18 17:47:23 -             {
2019-03-18 17:47:23 -                 Swap(ref arr[i], ref arr[i+1]);
2019-03-18 17:47:23 -                 swap = true;
2019-03-18 17:47:23 -             }
2019-03-18 17:47:23 -         }
2019-03-18 17:47:23 -         PrintSteps(arr,arr.Length-n);
2019-03-18 17:47:23 -         n--;
2019-03-18 17:47:23 -     }while(swap);
2019-03-18 17:47:23 -     return arr;
2019-03-18 17:47:23 - }
2019-03-18 17:47:23 - public int[] BubbleSort(int[] arr)
2019-03-18 17:47:23 - {
2019-03-18 17:47:23 -     int n = arr.Length-1;
2019-03-18 17:47:23 -     bool swap = false;
2019-03-18 17:47:23 -     do{
2019-03-18 17:47:23 -         swap = false;
2019-03-18 17:47:23 -         for(int i = 0;i< n;i++)
2019-03-18 17:47:23 -         {
2019-03-18 17:47:23 -             if(arr[i]>arr[i+1])
2019-03-18 17:47:23 -             {
2019-03-18 17:47:23 -                 Swap(ref arr[i], ref arr[i+1]);
2019-03-18 17:47:23 -                 swap = true;
2019-03-18 17:47:23 -             }
2019-03-18 17:47:23 -         }
2019-03-18 17:47:23 -         PrintSteps(arr,arr.Length-n);
2019-03-18 17:47:23 -         n--;
2019-03-18 17:47:23 -     }while(swap);
2019-03-18 17:47:23 -     return arr;
2019-03-18 17:47:23 - }
2019-03-18 17:47:24 - public int[] BubbleSort(int[] arr)
2019-03-18 17:47:24 - {
2019-03-18 17:47:24 -     int n = arr.Length-1;
2019-03-18 17:47:24 -     bool swap = false;
2019-03-18 17:47:24 -     do{
2019-03-18 17:47:24 -         swap = false;
2019-03-18 17:47:24 -         for(int i = 0;i< n;i++)
2019-03-18 17:47:24 -         {
2019-03-18 17:47:24 -             if(arr[i]>arr[i+1])
2019-03-18 17:47:24 -             {
2019-03-18 17:47:24 -                 Swap(ref arr[i], ref arr[i+1]);
2019-03-18 17:47:24 -                 swap = true;
2019-03-18 17:47:24 -             }
2019-03-18 17:47:24 -         }
2019-03-18 17:47:24 -         PrintSteps(arr,arr.Length-n);
2019-03-18 17:47:24 -         n--;
2019-03-18 17:47:24 -     }while(swap);
2019-03-18 17:47:24 -     return arr;
2019-03-18 17:47:24 - }
2019-03-18 17:47:24 - public int[] BubbleSort(int[] arr)
2019-03-18 17:47:24 - {
2019-03-18 17:47:24 -     int n = arr.Length-1;
2019-03-18 17:47:24 -     bool swap = false;
2019-03-18 17:47:24 -     do{
2019-03-18 17:47:24 -         swap = false;
2019-03-18 17:47:24 -         for(int i = 0;i< n;i++)
2019-03-18 17:47:24 -         {
2019-03-18 17:47:24 -             if(arr[i]>arr[i+1])
2019-03-18 17:47:24 -             {
2019-03-18 17:47:24 -                 Swap(ref arr[i], ref arr[i+1]);
2019-03-18 17:47:24 -                 swap = true;
2019-03-18 17:47:24 -             }
2019-03-18 17:47:24 -         }
2019-03-18 17:47:24 -         PrintSteps(arr,arr.Length-n);
2019-03-18 17:47:24 -         n--;
2019-03-18 17:47:24 -     }while(swap);
2019-03-18 17:47:24 -     return arr;
2019-03-18 17:47:24 - }
2019-03-18 17:47:24 - public int[] BubbleSort(int[] arr)
2019-03-18 17:47:24 - {
2019-03-18 17:47:24 -     int n = arr.Length-1;
2019-03-18 17:47:24 -     bool swap = false;
2019-03-18 17:47:24 -     do{
2019-03-18 17:47:24 -         swap = false;
2019-03-18 17:47:24 -         for(int i = 0;i< n;i++)
2019-03-18 17:47:24 -         {
2019-03-18 17:47:24 -             if(arr[i]>arr[i+1])
2019-03-18 17:47:24 -             {
2019-03-18 17:47:24 -                 Swap(ref arr[i], ref arr[i+1]);
2019-03-18 17:47:24 -                 swap = true;
2019-03-18 17:47:24 -             }
2019-03-18 17:47:24 -         }
2019-03-18 17:47:24 -         PrintSteps(arr,arr.Length-n);
2019-03-18 17:47:24 -         n--;
2019-03-18 17:47:24 -     }while(swap);
2019-03-18 17:47:24 -     return arr;
2019-03-18 17:47:24 - }
2019-03-18 17:48:01 - public int[] BubbleSort(int[] arr)
2019-03-18 17:48:01 - {
2019-03-18 17:48:01 -     int n = arr.Length-1;
2019-03-18 17:48:01 -     bool swap = false;
2019-03-18 17:48:01 -     do{
2019-03-18 17:48:01 -         swap = false;
2019-03-18 17:48:01 -         for(int i = 0;i< n;i++)
2019-03-18 17:48:01 -         {
2019-03-18 17:48:01 -             if(arr[i]>arr[i+1])
2019-03-18 17:48:01 -             {
2019-03-18 17:48:01 -                 Swap(ref arr[i], ref arr[i+1]);
2019-03-18 17:48:01 -                 swap = true;
2019-03-18 17:48:01 -             }
2019-03-18 17:48:01 -         }
2019-03-18 17:48:01 -         PrintSteps(arr,arr.Length-n);
2019-03-18 17:48:01 -         n--;
2019-03-18 17:48:01 -     }while(swap);
2019-03-18 17:48:01 -     return arr;
2019-03-18 17:48:01 - }
2019-03-18 17:48:01 - Console.WriteLne("aa");
2019-03-18 17:48:01 - (21,9): error CS0117: 'Console' does not contain a definition for 'WriteLne'
2019-03-18 17:48:05 - public int[] BubbleSort(int[] arr)
2019-03-18 17:48:05 - {
2019-03-18 17:48:05 -     int n = arr.Length-1;
2019-03-18 17:48:05 -     bool swap = false;
2019-03-18 17:48:05 -     do{
2019-03-18 17:48:05 -         swap = false;
2019-03-18 17:48:05 -         for(int i = 0;i< n;i++)
2019-03-18 17:48:05 -         {
2019-03-18 17:48:05 -             if(arr[i]>arr[i+1])
2019-03-18 17:48:05 -             {
2019-03-18 17:48:05 -                 Swap(ref arr[i], ref arr[i+1]);
2019-03-18 17:48:05 -                 swap = true;
2019-03-18 17:48:05 -             }
2019-03-18 17:48:05 -         }
2019-03-18 17:48:05 -         PrintSteps(arr,arr.Length-n);
2019-03-18 17:48:05 -         n--;
2019-03-18 17:48:05 -     }while(swap);
2019-03-18 17:48:05 -     return arr;
2019-03-18 17:48:05 - }
2019-03-18 17:48:05 - Console.WriteLine("aa");
2019-03-18 17:48:10 - public int[] BubbleSort(int[] arr)
2019-03-18 17:48:10 - {
2019-03-18 17:48:10 -     int n = arr.Length-1;
2019-03-18 17:48:10 -     bool swap = false;
2019-03-18 17:48:10 -     do{
2019-03-18 17:48:10 -         swap = false;
2019-03-18 17:48:10 -         for(int i = 0;i< n;i++)
2019-03-18 17:48:10 -         {
2019-03-18 17:48:10 -             if(arr[i]>arr[i+1])
2019-03-18 17:48:10 -             {
2019-03-18 17:48:10 -                 Swap(ref arr[i], ref arr[i+1]);
2019-03-18 17:48:10 -                 swap = true;
2019-03-18 17:48:10 -             }
2019-03-18 17:48:10 -         }
2019-03-18 17:48:10 -         PrintSteps(arr,arr.Length-n);
2019-03-18 17:48:10 -         n--;
2019-03-18 17:48:10 -     }while(swap);
2019-03-18 17:48:10 -     return arr;
2019-03-18 17:48:10 - }
2019-03-18 17:48:11 - public int[] BubbleSort(int[] arr)
2019-03-18 17:48:11 - {
2019-03-18 17:48:11 -     int n = arr.Length-1;
2019-03-18 17:48:11 -     bool swap = false;
2019-03-18 17:48:11 -     do{
2019-03-18 17:48:11 -         swap = false;
2019-03-18 17:48:11 -         for(int i = 0;i< n;i++)
2019-03-18 17:48:11 -         {
2019-03-18 17:48:11 -             if(arr[i]>arr[i+1])
2019-03-18 17:48:11 -             {
2019-03-18 17:48:11 -                 Swap(ref arr[i], ref arr[i+1]);
2019-03-18 17:48:11 -                 swap = true;
2019-03-18 17:48:11 -             }
2019-03-18 17:48:11 -         }
2019-03-18 17:48:11 -         PrintSteps(arr,arr.Length-n);
2019-03-18 17:48:11 -         n--;
2019-03-18 17:48:11 -     }while(swap);
2019-03-18 17:48:11 -     return arr;
2019-03-18 17:48:11 - }
2019-03-18 17:48:11 - public int[] BubbleSort(int[] arr)
2019-03-18 17:48:11 - {
2019-03-18 17:48:11 -     int n = arr.Length-1;
2019-03-18 17:48:11 -     bool swap = false;
2019-03-18 17:48:11 -     do{
2019-03-18 17:48:11 -         swap = false;
2019-03-18 17:48:11 -         for(int i = 0;i< n;i++)
2019-03-18 17:48:11 -         {
2019-03-18 17:48:11 -             if(arr[i]>arr[i+1])
2019-03-18 17:48:11 -             {
2019-03-18 17:48:11 -                 Swap(ref arr[i], ref arr[i+1]);
2019-03-18 17:48:11 -                 swap = true;
2019-03-18 17:48:11 -             }
2019-03-18 17:48:11 -         }
2019-03-18 17:48:11 -         PrintSteps(arr,arr.Length-n);
2019-03-18 17:48:11 -         n--;
2019-03-18 17:48:11 -     }while(swap);
2019-03-18 17:48:11 -     return arr;
2019-03-18 17:48:11 - }
2019-03-18 17:48:11 - public int[] BubbleSort(int[] arr)
2019-03-18 17:48:11 - {
2019-03-18 17:48:11 -     int n = arr.Length-1;
2019-03-18 17:48:11 -     bool swap = false;
2019-03-18 17:48:11 -     do{
2019-03-18 17:48:11 -         swap = false;
2019-03-18 17:48:11 -         for(int i = 0;i< n;i++)
2019-03-18 17:48:11 -         {
2019-03-18 17:48:11 -             if(arr[i]>arr[i+1])
2019-03-18 17:48:11 -             {
2019-03-18 17:48:11 -                 Swap(ref arr[i], ref arr[i+1]);
2019-03-18 17:48:11 -                 swap = true;
2019-03-18 17:48:11 -             }
2019-03-18 17:48:11 -         }
2019-03-18 17:48:11 -         PrintSteps(arr,arr.Length-n);
2019-03-18 17:48:11 -         n--;
2019-03-18 17:48:11 -     }while(swap);
2019-03-18 17:48:11 -     return arr;
2019-03-18 17:48:11 - }
2019-03-18 17:48:12 - public int[] BubbleSort(int[] arr)
2019-03-18 17:48:12 - {
2019-03-18 17:48:12 -     int n = arr.Length-1;
2019-03-18 17:48:12 -     bool swap = false;
2019-03-18 17:48:12 -     do{
2019-03-18 17:48:12 -         swap = false;
2019-03-18 17:48:12 -         for(int i = 0;i< n;i++)
2019-03-18 17:48:12 -         {
2019-03-18 17:48:12 -             if(arr[i]>arr[i+1])
2019-03-18 17:48:12 -             {
2019-03-18 17:48:12 -                 Swap(ref arr[i], ref arr[i+1]);
2019-03-18 17:48:12 -                 swap = true;
2019-03-18 17:48:12 -             }
2019-03-18 17:48:12 -         }
2019-03-18 17:48:12 -         PrintSteps(arr,arr.Length-n);
2019-03-18 17:48:12 -         n--;
2019-03-18 17:48:12 -     }while(swap);
2019-03-18 17:48:12 -     return arr;
2019-03-18 17:48:12 - }
2019-03-18 17:48:12 - public int[] BubbleSort(int[] arr)
2019-03-18 17:48:12 - {
2019-03-18 17:48:12 -     int n = arr.Length-1;
2019-03-18 17:48:12 -     bool swap = false;
2019-03-18 17:48:12 -     do{
2019-03-18 17:48:12 -         swap = false;
2019-03-18 17:48:12 -         for(int i = 0;i< n;i++)
2019-03-18 17:48:12 -         {
2019-03-18 17:48:12 -             if(arr[i]>arr[i+1])
2019-03-18 17:48:12 -             {
2019-03-18 17:48:12 -                 Swap(ref arr[i], ref arr[i+1]);
2019-03-18 17:48:12 -                 swap = true;
2019-03-18 17:48:12 -             }
2019-03-18 17:48:12 -         }
2019-03-18 17:48:12 -         PrintSteps(arr,arr.Length-n);
2019-03-18 17:48:12 -         n--;
2019-03-18 17:48:12 -     }while(swap);
2019-03-18 17:48:12 -     return arr;
2019-03-18 17:48:12 - }
2019-03-18 17:48:12 - public int[] BubbleSort(int[] arr)
2019-03-18 17:48:12 - {
2019-03-18 17:48:12 -     int n = arr.Length-1;
2019-03-18 17:48:12 -     bool swap = false;
2019-03-18 17:48:12 -     do{
2019-03-18 17:48:12 -         swap = false;
2019-03-18 17:48:12 -         for(int i = 0;i< n;i++)
2019-03-18 17:48:12 -         {
2019-03-18 17:48:12 -             if(arr[i]>arr[i+1])
2019-03-18 17:48:12 -             {
2019-03-18 17:48:12 -                 Swap(ref arr[i], ref arr[i+1]);
2019-03-18 17:48:12 -                 swap = true;
2019-03-18 17:48:12 -             }
2019-03-18 17:48:12 -         }
2019-03-18 17:48:12 -         PrintSteps(arr,arr.Length-n);
2019-03-18 17:48:12 -         n--;
2019-03-18 17:48:12 -     }while(swap);
2019-03-18 17:48:12 -     return arr;
2019-03-18 17:48:12 - }
2019-03-18 17:48:12 - public int[] BubbleSort(int[] arr)
2019-03-18 17:48:12 - {
2019-03-18 17:48:12 -     int n = arr.Length-1;
2019-03-18 17:48:12 -     bool swap = false;
2019-03-18 17:48:12 -     do{
2019-03-18 17:48:12 -         swap = false;
2019-03-18 17:48:12 -         for(int i = 0;i< n;i++)
2019-03-18 17:48:12 -         {
2019-03-18 17:48:12 -             if(arr[i]>arr[i+1])
2019-03-18 17:48:12 -             {
2019-03-18 17:48:12 -                 Swap(ref arr[i], ref arr[i+1]);
2019-03-18 17:48:12 -                 swap = true;
2019-03-18 17:48:12 -             }
2019-03-18 17:48:12 -         }
2019-03-18 17:48:12 -         PrintSteps(arr,arr.Length-n);
2019-03-18 17:48:12 -         n--;
2019-03-18 17:48:12 -     }while(swap);
2019-03-18 17:48:12 -     return arr;
2019-03-18 17:48:12 - }
2019-03-18 17:48:12 - public int[] BubbleSort(int[] arr)
2019-03-18 17:48:12 - {
2019-03-18 17:48:12 -     int n = arr.Length-1;
2019-03-18 17:48:12 -     bool swap = false;
2019-03-18 17:48:12 -     do{
2019-03-18 17:48:12 -         swap = false;
2019-03-18 17:48:12 -         for(int i = 0;i< n;i++)
2019-03-18 17:48:12 -         {
2019-03-18 17:48:12 -             if(arr[i]>arr[i+1])
2019-03-18 17:48:12 -             {
2019-03-18 17:48:12 -                 Swap(ref arr[i], ref arr[i+1]);
2019-03-18 17:48:12 -                 swap = true;
2019-03-18 17:48:12 -             }
2019-03-18 17:48:12 -         }
2019-03-18 17:48:12 -         PrintSteps(arr,arr.Length-n);
2019-03-18 17:48:12 -         n--;
2019-03-18 17:48:12 -     }while(swap);
2019-03-18 17:48:12 -     return arr;
2019-03-18 17:48:12 - }
2019-03-18 17:48:12 - public int[] BubbleSort(int[] arr)
2019-03-18 17:48:12 - {
2019-03-18 17:48:12 -     int n = arr.Length-1;
2019-03-18 17:48:12 -     bool swap = false;
2019-03-18 17:48:12 -     do{
2019-03-18 17:48:12 -         swap = false;
2019-03-18 17:48:12 -         for(int i = 0;i< n;i++)
2019-03-18 17:48:12 -         {
2019-03-18 17:48:12 -             if(arr[i]>arr[i+1])
2019-03-18 17:48:12 -             {
2019-03-18 17:48:12 -                 Swap(ref arr[i], ref arr[i+1]);
2019-03-18 17:48:12 -                 swap = true;
2019-03-18 17:48:12 -             }
2019-03-18 17:48:12 -         }
2019-03-18 17:48:12 -         PrintSteps(arr,arr.Length-n);
2019-03-18 17:48:12 -         n--;
2019-03-18 17:48:12 -     }while(swap);
2019-03-18 17:48:12 -     return arr;
2019-03-18 17:48:12 - }
2019-03-18 17:48:25 - public int[] BubbleSort(int[] arr)
2019-03-18 17:48:25 - {
2019-03-18 17:48:25 -     int n = arr.Length-1;
2019-03-18 17:48:25 -     bool swap = false;
2019-03-18 17:48:25 -     do{
2019-03-18 17:48:25 -         swap = false;
2019-03-18 17:48:25 -         for(int i = 0;i< n;i++)
2019-03-18 17:48:25 -         {
2019-03-18 17:48:25 -             if(arr[i]>arr[i+1])
2019-03-18 17:48:25 -             {
2019-03-18 17:48:25 -                 Swap(ref arr[i], ref arr[i+1]);
2019-03-18 17:48:25 -                 swap = true;
2019-03-18 17:48:25 -             }
2019-03-18 17:48:25 -         }
2019-03-18 17:48:25 -         PrintSteps(arr,arr.Length-n);
2019-03-18 17:48:25 -         n--;
2019-03-18 17:48:25 -     }while(swap);
2019-03-18 17:48:25 -     return arr;
2019-03-18 17:48:25 - }
2019-03-18 17:48:25 - BubbleSort(arr);
2019-03-18 17:48:44 - public int[] BubbleSort(int[] arr)
2019-03-18 17:48:44 - {
2019-03-18 17:48:44 -     int n = arr.Length-1;
2019-03-18 17:48:44 -     bool swap = false;
2019-03-18 17:48:44 -     do{
2019-03-18 17:48:44 -         swap = false;
2019-03-18 17:48:44 -         for(int i = 0;i< n;i++)
2019-03-18 17:48:44 -         {
2019-03-18 17:48:44 -             if(arr[i]>arr[i+1])
2019-03-18 17:48:44 -             {
2019-03-18 17:48:44 -                 Swap(ref arr[i], ref arr[i+1]);
2019-03-18 17:48:44 -                 swap = true;
2019-03-18 17:48:44 -             }
2019-03-18 17:48:44 -              PrintSteps(arr,arr.Length-n);
2019-03-18 17:48:44 -         }
2019-03-18 17:48:44 -         n--;
2019-03-18 17:48:44 -     }while(swap);
2019-03-18 17:48:44 -     return arr;
2019-03-18 17:48:44 - }
2019-03-18 17:48:44 - BubbleSort(arr);
2019-03-18 17:48:58 - public void PrintSteps(int[] arr, int i)  
2019-03-18 17:48:58 - {
2019-03-18 17:48:58 -     Console.Write(string.Format("Step{0}: ", i));
2019-03-18 17:48:58 -     foreach(var a in arr)
2019-03-18 17:48:58 -         Console.Write(a+" ");
2019-03-18 17:48:58 -     Console.WriteLine();
2019-03-18 17:48:58 - }
2019-03-18 17:48:58 - public void Swap(ref int a, ref int b)
2019-03-18 17:48:58 - {
2019-03-18 17:48:58 -     int temp = a;
2019-03-18 17:48:58 -     a = b;
2019-03-18 17:48:58 -     b = temp;
2019-03-18 17:48:58 - }
2019-03-18 17:48:58 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 17:49:07 - public int[] InsertSort(int[] arr)
2019-03-18 17:49:07 - {
2019-03-18 17:49:07 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 17:49:07 -     {
2019-03-18 17:49:07 -         int temp = arr[i];
2019-03-18 17:49:07 -         int j = i;
2019-03-18 17:49:07 -         while(j>0 &&arr[j-1]>temp)
2019-03-18 17:49:07 -         {
2019-03-18 17:49:07 -             arr[j]=arr[j-1];
2019-03-18 17:49:07 -             j--;
2019-03-18 17:49:07 -         }
2019-03-18 17:49:07 -         arr[j]=temp;
2019-03-18 17:49:07 -         PrintSteps(arr,i);
2019-03-18 17:49:07 -     }
2019-03-18 17:49:07 -     return arr;
2019-03-18 17:49:07 - }
2019-03-18 17:49:07 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 17:49:07 - // Call the function
2019-03-18 17:49:07 - InsertSort(arr);
2019-03-18 17:49:08 - public int[] InsertSort(int[] arr)
2019-03-18 17:49:08 - {
2019-03-18 17:49:08 -     for (int i = 1; i<arr.Length;i++)
2019-03-18 17:49:08 -     {
2019-03-18 17:49:08 -         int temp = arr[i];
2019-03-18 17:49:08 -         int j = i;
2019-03-18 17:49:08 -         while(j>0 &&arr[j-1]>temp)
2019-03-18 17:49:08 -         {
2019-03-18 17:49:08 -             arr[j]=arr[j-1];
2019-03-18 17:49:08 -             j--;
2019-03-18 17:49:08 -         }
2019-03-18 17:49:08 -         arr[j]=temp;
2019-03-18 17:49:08 -         PrintSteps(arr,i);
2019-03-18 17:49:08 -     }
2019-03-18 17:49:08 -     return arr;
2019-03-18 17:49:08 - }
2019-03-18 17:49:08 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 17:49:08 - // Call the function
2019-03-18 17:49:08 - InsertSort(arr);
2019-03-18 17:49:15 - public int[] SelectionSort(int[] arr){
2019-03-18 17:49:15 -     for(int i = 0; i<arr.Length;i++)
2019-03-18 17:49:15 -     {
2019-03-18 17:49:15 -         int minIndex = i; // smallest index
2019-03-18 17:49:15 -         for(int j = i+1;j<arr.Length;j++)
2019-03-18 17:49:15 -         {
2019-03-18 17:49:15 -             if(arr[j]<arr[minIndex])
2019-03-18 17:49:15 -                 minIndex = j;
2019-03-18 17:49:15 -         }
2019-03-18 17:49:15 -         // Only swap when minIndex changed
2019-03-18 17:49:15 -         if(minIndex!=i)
2019-03-18 17:49:15 -             Swap(ref arr[minIndex], ref arr[i]);
2019-03-18 17:49:15 -         PrintSteps(arr,i);
2019-03-18 17:49:15 -     }
2019-03-18 17:49:15 -     return arr;
2019-03-18 17:49:15 - }
2019-03-18 17:49:15 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 17:49:15 - SelectionSort(arr);
2019-03-18 17:49:24 - public int[] BubbleSort(int[] arr)
2019-03-18 17:49:24 - {
2019-03-18 17:49:24 -     int n = arr.Length-1;
2019-03-18 17:49:24 -     bool swap = false;
2019-03-18 17:49:24 -     do{
2019-03-18 17:49:24 -         swap = false;
2019-03-18 17:49:24 -         for(int i = 0;i< n;i++)
2019-03-18 17:49:24 -         {
2019-03-18 17:49:24 -             if(arr[i]>arr[i+1])
2019-03-18 17:49:24 -             {
2019-03-18 17:49:24 -                 Swap(ref arr[i], ref arr[i+1]);
2019-03-18 17:49:24 -                 swap = true;
2019-03-18 17:49:24 -             }
2019-03-18 17:49:24 -              PrintSteps(arr,arr.Length-n);
2019-03-18 17:49:24 -         }
2019-03-18 17:49:24 -         n--;
2019-03-18 17:49:24 -     }while(swap);
2019-03-18 17:49:24 -     return arr;
2019-03-18 17:49:24 - }
2019-03-18 17:49:24 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 17:49:24 - BubbleSort(arr);
2019-03-18 17:49:35 - public int[] BubbleSort(int[] arr)
2019-03-18 17:49:35 - {
2019-03-18 17:49:35 -     int n = arr.Length-1;
2019-03-18 17:49:35 -     bool swap = false;
2019-03-18 17:49:35 -     do{
2019-03-18 17:49:35 -         swap = false;
2019-03-18 17:49:35 -         for(int i = 0;i< n;i++)
2019-03-18 17:49:35 -         {
2019-03-18 17:49:35 -             if(arr[i]>arr[i+1])
2019-03-18 17:49:35 -             {
2019-03-18 17:49:35 -                 Swap(ref arr[i], ref arr[i+1]);
2019-03-18 17:49:35 -                 swap = true;
2019-03-18 17:49:35 -             }
2019-03-18 17:49:35 -         }
2019-03-18 17:49:35 -         PrintSteps(arr,arr.Length-n);
2019-03-18 17:49:35 -         n--;
2019-03-18 17:49:35 -     }while(swap);
2019-03-18 17:49:35 -     return arr;
2019-03-18 17:49:35 - }
2019-03-18 17:49:35 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 17:49:35 - BubbleSort(arr);
2019-03-18 18:01:59 - public int[] BubbleSort(int[] arr)
2019-03-18 18:01:59 - {
2019-03-18 18:01:59 -     int n = arr.Length-1;
2019-03-18 18:01:59 -     bool swap = false;
2019-03-18 18:01:59 -     do{
2019-03-18 18:01:59 -         swap = false;
2019-03-18 18:01:59 -         for(int i = 0;i< n;i++)
2019-03-18 18:01:59 -         {
2019-03-18 18:01:59 -             if(arr[i]>arr[i+1])
2019-03-18 18:01:59 -             {
2019-03-18 18:01:59 -                 Swap(ref arr[i], ref arr[i+1]);
2019-03-18 18:01:59 -                 swap = true;
2019-03-18 18:01:59 -             }
2019-03-18 18:01:59 -         }
2019-03-18 18:01:59 -         PrintSteps(arr,arr.Length-n);
2019-03-18 18:01:59 -         n--;
2019-03-18 18:01:59 -     }while(swap);
2019-03-18 18:01:59 -     return arr;
2019-03-18 18:01:59 - }
2019-03-18 18:01:59 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 18:01:59 - BubbleSort(arr);
2019-03-18 19:27:04 - public List<int> MergeSort(List<int> arr)
2019-03-18 19:27:04 - {
2019-03-18 19:27:04 -     if(arr.Count<2) return arr;
2019-03-18 19:27:04 -     List<int> left = new List<int>();
2019-03-18 19:27:04 -     List<int> right = new List<int>();
2019-03-18 19:27:04 -     int mid = arr.Count/2;
2019-03-18 19:27:04 -     left = arr.Take(mid);
2019-03-18 19:27:04 -     right = arr.Skip(mid+1);
2019-03-18 19:27:04 - }
2019-03-18 19:27:04 - (9,12): error CS0266: Cannot implicitly convert type 'System.Collections.Generic.IEnumerable<int>' to 'System.Collections.Generic.List<int>'. An explicit conversion exists (are you missing a cast?)
2019-03-18 19:27:04 - (10,13): error CS0266: Cannot implicitly convert type 'System.Collections.Generic.IEnumerable<int>' to 'System.Collections.Generic.List<int>'. An explicit conversion exists (are you missing a cast?)
2019-03-18 19:27:04 - (1,18): error CS0161: 'MergeSort(List<int>)': not all code paths return a value
2019-03-18 19:27:53 - using System.Collections.Generic;
2019-03-18 19:27:53 - public List<int> MergeSort(List<int> arr)
2019-03-18 19:27:53 - {
2019-03-18 19:27:53 -     if(arr.Count<2) return arr;
2019-03-18 19:27:53 -     List<int> left = new List<int>();
2019-03-18 19:27:53 -     List<int> right = new List<int>();
2019-03-18 19:27:53 -     int mid = arr.Count/2;
2019-03-18 19:27:53 -     left = arr.Take(mid);
2019-03-18 19:27:53 -     right = arr.Skip(mid+1);
2019-03-18 19:27:53 - }
2019-03-18 19:27:53 - (11,12): error CS0266: Cannot implicitly convert type 'System.Collections.Generic.IEnumerable<int>' to 'System.Collections.Generic.List<int>'. An explicit conversion exists (are you missing a cast?)
2019-03-18 19:27:53 - (12,13): error CS0266: Cannot implicitly convert type 'System.Collections.Generic.IEnumerable<int>' to 'System.Collections.Generic.List<int>'. An explicit conversion exists (are you missing a cast?)
2019-03-18 19:27:53 - (3,18): error CS0161: 'MergeSort(List<int>)': not all code paths return a value
2019-03-18 19:28:09 - using System.Collections.Generic;
2019-03-18 19:28:09 - using System.Linq;
2019-03-18 19:28:09 - public List<int> MergeSort(List<int> arr)
2019-03-18 19:28:09 - {
2019-03-18 19:28:09 -     if(arr.Count<2) return arr;
2019-03-18 19:28:09 -     List<int> left = new List<int>();
2019-03-18 19:28:09 -     List<int> right = new List<int>();
2019-03-18 19:28:09 -     int mid = arr.Count/2;
2019-03-18 19:28:09 -     left = arr.Take(mid);
2019-03-18 19:28:09 -     right = arr.Skip(mid+1);
2019-03-18 19:28:09 - }
2019-03-18 19:28:09 - (12,12): error CS0266: Cannot implicitly convert type 'System.Collections.Generic.IEnumerable<int>' to 'System.Collections.Generic.List<int>'. An explicit conversion exists (are you missing a cast?)
2019-03-18 19:28:09 - (13,13): error CS0266: Cannot implicitly convert type 'System.Collections.Generic.IEnumerable<int>' to 'System.Collections.Generic.List<int>'. An explicit conversion exists (are you missing a cast?)
2019-03-18 19:28:09 - (4,18): error CS0161: 'MergeSort(List<int>)': not all code paths return a value
2019-03-18 19:28:38 - using System.Linq;
2019-03-18 19:28:38 - public List<int> MergeSort(List<int> arr)
2019-03-18 19:28:38 - {
2019-03-18 19:28:38 -     if(arr.Count<2) return arr;
2019-03-18 19:28:38 -     List<int> left = new List<int>();
2019-03-18 19:28:38 -     List<int> right = new List<int>();
2019-03-18 19:28:38 -     int mid = arr.Count/2;
2019-03-18 19:28:38 -     left = arr.Take(mid);
2019-03-18 19:28:38 -     right = arr.Skip(mid+1);
2019-03-18 19:28:38 - }
2019-03-18 19:28:38 - (12,12): error CS0266: Cannot implicitly convert type 'System.Collections.Generic.IEnumerable<int>' to 'System.Collections.Generic.List<int>'. An explicit conversion exists (are you missing a cast?)
2019-03-18 19:28:38 - (13,13): error CS0266: Cannot implicitly convert type 'System.Collections.Generic.IEnumerable<int>' to 'System.Collections.Generic.List<int>'. An explicit conversion exists (are you missing a cast?)
2019-03-18 19:28:38 - (4,18): error CS0161: 'MergeSort(List<int>)': not all code paths return a value
2019-03-18 19:30:35 - public List<int> MergeSort(List<int> arr)
2019-03-18 19:30:35 - {
2019-03-18 19:30:35 -     if(arr.Count<2) return arr;
2019-03-18 19:30:35 -     List<int> left = new List<int>();
2019-03-18 19:30:35 -     List<int> right = new List<int>();
2019-03-18 19:30:35 -     int mid = arr.Count/2;
2019-03-18 19:30:35 -     // Dividing the unsorted list
2019-03-18 19:30:35 -     for (int i = 0; i < middle;i++) 
2019-03-18 19:30:35 -     {
2019-03-18 19:30:35 -         left.Add(unsorted[i]);
2019-03-18 19:30:35 -     }
2019-03-18 19:30:35 -     for (int i = middle; i < arr.Count; i++)
2019-03-18 19:30:35 -     {
2019-03-18 19:30:35 -         right.Add(unsorted[i]);
2019-03-18 19:30:35 -     }
2019-03-18 19:30:35 -     left = MergetSort(left);
2019-03-18 19:30:35 -     right = MergeSort(right);
2019-03-18 19:30:35 -     return Merge(left, right);
2019-03-18 19:30:35 - }
2019-03-18 19:30:35 - (12,25): error CS0103: The name 'middle' does not exist in the current context
2019-03-18 19:30:35 - (14,18): error CS0103: The name 'unsorted' does not exist in the current context
2019-03-18 19:30:35 - (16,18): error CS0103: The name 'middle' does not exist in the current context
2019-03-18 19:30:35 - (18,19): error CS0103: The name 'unsorted' does not exist in the current context
2019-03-18 19:30:35 - (21,12): error CS0103: The name 'MergetSort' does not exist in the current context
2019-03-18 19:30:35 - (23,12): error CS0103: The name 'Merge' does not exist in the current context
2019-03-18 19:30:53 - public List<int> MergeSort(List<int> arr)
2019-03-18 19:30:53 - {
2019-03-18 19:30:53 -     if(arr.Count<2) return arr;
2019-03-18 19:30:53 -     List<int> left = new List<int>();
2019-03-18 19:30:53 -     List<int> right = new List<int>();
2019-03-18 19:30:53 -     int mid = arr.Count/2;
2019-03-18 19:30:53 -     // Dividing the unsorted list
2019-03-18 19:30:53 -     for (int i = 0; i < mid;i++) 
2019-03-18 19:30:53 -     {
2019-03-18 19:30:53 -         left.Add(arr[i]);
2019-03-18 19:30:53 -     }
2019-03-18 19:30:53 -     for (int i = mid; i < arr.Count; i++)
2019-03-18 19:30:53 -     {
2019-03-18 19:30:53 -         right.Add(arr[i]);
2019-03-18 19:30:53 -     }
2019-03-18 19:30:53 -     left = MergetSort(left);
2019-03-18 19:30:53 -     right = MergeSort(right);
2019-03-18 19:30:53 -     return Merge(left, right);
2019-03-18 19:30:53 - }
2019-03-18 19:30:53 - (21,12): error CS0103: The name 'MergetSort' does not exist in the current context
2019-03-18 19:30:53 - (23,12): error CS0103: The name 'Merge' does not exist in the current context
2019-03-18 19:31:18 - public List<int> MergeSort(List<int> arr)
2019-03-18 19:31:18 - {
2019-03-18 19:31:18 -     if(arr.Count<2) return arr;
2019-03-18 19:31:18 -     List<int> left = new List<int>();
2019-03-18 19:31:18 -     List<int> right = new List<int>();
2019-03-18 19:31:18 -     int mid = arr.Count/2;
2019-03-18 19:31:18 -     // Dividing the unsorted list
2019-03-18 19:31:18 -     for (int i = 0; i < mid;i++) 
2019-03-18 19:31:18 -     {
2019-03-18 19:31:18 -         left.Add(arr[i]);
2019-03-18 19:31:18 -     }
2019-03-18 19:31:18 -     for (int i = mid; i < arr.Count; i++)
2019-03-18 19:31:18 -     {
2019-03-18 19:31:18 -         right.Add(arr[i]);
2019-03-18 19:31:18 -     }
2019-03-18 19:31:18 -     left = MergeSort(left);
2019-03-18 19:31:18 -     right = MergeSort(right);
2019-03-18 19:31:18 -     return Merge(left, right);
2019-03-18 19:31:18 - }
2019-03-18 19:31:18 - (23,12): error CS0103: The name 'Merge' does not exist in the current context
2019-03-18 19:41:00 - public List<int> MergeSort(List<int> arr)
2019-03-18 19:41:00 - {
2019-03-18 19:41:00 -     if(arr.Count<2) return arr;
2019-03-18 19:41:00 -     List<int> left = new List<int>();
2019-03-18 19:41:00 -     List<int> right = new List<int>();
2019-03-18 19:41:00 -     int mid = arr.Count/2;
2019-03-18 19:41:00 -     // Dividing the unsorted list
2019-03-18 19:41:00 -     for (int i = 0; i < mid;i++) 
2019-03-18 19:41:00 -     {
2019-03-18 19:41:00 -         left.Add(arr[i]);
2019-03-18 19:41:00 -     }
2019-03-18 19:41:00 -     for (int i = mid; i < arr.Count; i++)
2019-03-18 19:41:00 -     {
2019-03-18 19:41:00 -         right.Add(arr[i]);
2019-03-18 19:41:00 -     }
2019-03-18 19:41:00 -     left = MergeSort(left);
2019-03-18 19:41:00 -     right = MergeSort(right);
2019-03-18 19:41:00 -     return Merge(left, right);
2019-03-18 19:41:00 - }
2019-03-18 19:41:00 - public List<int> MergeSort(List<int> left, List<int> right)
2019-03-18 19:41:00 - {
2019-03-18 19:41:00 -     List<int> res = new List<int>();
2019-03-18 19:41:00 -     while(left.Count>0||right.Count>0)
2019-03-18 19:41:00 -     {
2019-03-18 19:41:00 -         if(left[0]<=right[0])
2019-03-18 19:41:00 -             result.Add(left.Remove(left[0]));
2019-03-18 19:41:00 -         else
2019-03-18 19:41:00 -             result.Add(right.Remove(right[0]));
2019-03-18 19:41:00 -     }
2019-03-18 19:41:00 - }
2019-03-18 19:41:00 - (23,12): error CS0103: The name 'Merge' does not exist in the current context
2019-03-18 19:41:00 - (33,13): error CS0103: The name 'result' does not exist in the current context
2019-03-18 19:41:00 - (35,13): error CS0103: The name 'result' does not exist in the current context
2019-03-18 19:41:00 - (26,18): error CS0161: 'MergeSort(List<int>, List<int>)': not all code paths return a value
2019-03-18 19:41:19 - public List<int> MergeSort(List<int> arr)
2019-03-18 19:41:19 - {
2019-03-18 19:41:19 -     if(arr.Count<2) return arr;
2019-03-18 19:41:19 -     List<int> left = new List<int>();
2019-03-18 19:41:19 -     List<int> right = new List<int>();
2019-03-18 19:41:19 -     int mid = arr.Count/2;
2019-03-18 19:41:19 -     // Dividing the unsorted list
2019-03-18 19:41:19 -     for (int i = 0; i < mid;i++) 
2019-03-18 19:41:19 -     {
2019-03-18 19:41:19 -         left.Add(arr[i]);
2019-03-18 19:41:19 -     }
2019-03-18 19:41:19 -     for (int i = mid; i < arr.Count; i++)
2019-03-18 19:41:19 -     {
2019-03-18 19:41:19 -         right.Add(arr[i]);
2019-03-18 19:41:19 -     }
2019-03-18 19:41:19 -     left = MergeSort(left);
2019-03-18 19:41:19 -     right = MergeSort(right);
2019-03-18 19:41:19 -     return Merge(left, right);
2019-03-18 19:41:19 - }
2019-03-18 19:41:19 - public List<int> Merge(List<int> left, List<int> right)
2019-03-18 19:41:19 - {
2019-03-18 19:41:19 -     List<int> result = new List<int>();
2019-03-18 19:41:19 -     while(left.Count>0||right.Count>0)
2019-03-18 19:41:19 -     {
2019-03-18 19:41:19 -         if(left[0]<=right[0])
2019-03-18 19:41:19 -             result.Add(left.Remove(left[0]));
2019-03-18 19:41:19 -         else
2019-03-18 19:41:19 -             result.Add(right.Remove(right[0]));
2019-03-18 19:41:19 -     }
2019-03-18 19:41:19 - }
2019-03-18 19:41:19 - (33,24): error CS1503: Argument 1: cannot convert from 'bool' to 'int'
2019-03-18 19:41:19 - (35,24): error CS1503: Argument 1: cannot convert from 'bool' to 'int'
2019-03-18 19:41:19 - (26,18): error CS0161: 'Merge(List<int>, List<int>)': not all code paths return a value
2019-03-18 19:44:19 - public List<int> MergeSort(List<int> arr)
2019-03-18 19:44:19 - {
2019-03-18 19:44:19 -     if(arr.Count<2) return arr;
2019-03-18 19:44:19 -     List<int> left = new List<int>();
2019-03-18 19:44:19 -     List<int> right = new List<int>();
2019-03-18 19:44:19 -     int mid = arr.Count/2;
2019-03-18 19:44:19 -     // Dividing the unsorted list
2019-03-18 19:44:19 -     for (int i = 0; i < mid;i++) 
2019-03-18 19:44:19 -     {
2019-03-18 19:44:19 -         left.Add(arr[i]);
2019-03-18 19:44:19 -     }
2019-03-18 19:44:19 -     for (int i = mid; i < arr.Count; i++)
2019-03-18 19:44:19 -     {
2019-03-18 19:44:19 -         right.Add(arr[i]);
2019-03-18 19:44:19 -     }
2019-03-18 19:44:19 -     left = MergeSort(left);
2019-03-18 19:44:19 -     right = MergeSort(right);
2019-03-18 19:44:19 -     return Merge(left, right);
2019-03-18 19:44:19 - }
2019-03-18 19:44:19 - public List<int> Merge(List<int> left, List<int> right)
2019-03-18 19:44:19 - {
2019-03-18 19:44:19 -     List<int> result = new List<int>();
2019-03-18 19:44:19 -     while(left.Count>0||right.Count>0)
2019-03-18 19:44:19 -     {
2019-03-18 19:44:19 -         if(left[0]<=right[0])
2019-03-18 19:44:19 -             result.Add(left.RemoveAt(0));
2019-03-18 19:44:19 -         else
2019-03-18 19:44:19 -             result.Add(right.RemoveAt(0));
2019-03-18 19:44:19 -     }
2019-03-18 19:44:19 - }
2019-03-18 19:44:19 - (33,24): error CS1503: Argument 1: cannot convert from 'void' to 'int'
2019-03-18 19:44:19 - (35,24): error CS1503: Argument 1: cannot convert from 'void' to 'int'
2019-03-18 19:44:19 - (26,18): error CS0161: 'Merge(List<int>, List<int>)': not all code paths return a value
2019-03-18 19:44:20 - public List<int> MergeSort(List<int> arr)
2019-03-18 19:44:20 - {
2019-03-18 19:44:20 -     if(arr.Count<2) return arr;
2019-03-18 19:44:20 -     List<int> left = new List<int>();
2019-03-18 19:44:20 -     List<int> right = new List<int>();
2019-03-18 19:44:20 -     int mid = arr.Count/2;
2019-03-18 19:44:20 -     // Dividing the unsorted list
2019-03-18 19:44:20 -     for (int i = 0; i < mid;i++) 
2019-03-18 19:44:20 -     {
2019-03-18 19:44:20 -         left.Add(arr[i]);
2019-03-18 19:44:20 -     }
2019-03-18 19:44:20 -     for (int i = mid; i < arr.Count; i++)
2019-03-18 19:44:20 -     {
2019-03-18 19:44:20 -         right.Add(arr[i]);
2019-03-18 19:44:20 -     }
2019-03-18 19:44:20 -     left = MergeSort(left);
2019-03-18 19:44:20 -     right = MergeSort(right);
2019-03-18 19:44:20 -     return Merge(left, right);
2019-03-18 19:44:20 - }
2019-03-18 19:44:20 - public List<int> Merge(List<int> left, List<int> right)
2019-03-18 19:44:20 - {
2019-03-18 19:44:20 -     List<int> result = new List<int>();
2019-03-18 19:44:20 -     while(left.Count>0||right.Count>0)
2019-03-18 19:44:20 -     {
2019-03-18 19:44:20 -         if(left[0]<=right[0])
2019-03-18 19:44:20 -             result.Add(left.RemoveAt(0));
2019-03-18 19:44:20 -         else
2019-03-18 19:44:20 -             result.Add(right.RemoveAt(0));
2019-03-18 19:44:20 -     }
2019-03-18 19:44:20 - }
2019-03-18 19:44:20 - (33,24): error CS1503: Argument 1: cannot convert from 'void' to 'int'
2019-03-18 19:44:20 - (35,24): error CS1503: Argument 1: cannot convert from 'void' to 'int'
2019-03-18 19:44:20 - (26,18): error CS0161: 'Merge(List<int>, List<int>)': not all code paths return a value
2019-03-18 19:53:25 - public List<int> MergeSort(List<int> arr)
2019-03-18 19:53:25 - {
2019-03-18 19:53:25 -     if(arr.Count<2) return arr;
2019-03-18 19:53:25 -     List<int> left = new List<int>();
2019-03-18 19:53:25 -     List<int> right = new List<int>();
2019-03-18 19:53:25 -     int mid = arr.Count/2;
2019-03-18 19:53:25 -     // Dividing the unsorted list
2019-03-18 19:53:25 -     for (int i = 0; i < mid;i++) 
2019-03-18 19:53:25 -     {
2019-03-18 19:53:25 -         left.Add(arr[i]);
2019-03-18 19:53:25 -     }
2019-03-18 19:53:25 -     for (int i = mid; i < arr.Count; i++)
2019-03-18 19:53:25 -     {
2019-03-18 19:53:25 -         right.Add(arr[i]);
2019-03-18 19:53:25 -     }
2019-03-18 19:53:25 -     left = MergeSort(left);
2019-03-18 19:53:25 -     right = MergeSort(right);
2019-03-18 19:53:25 -     return Merge(left, right);
2019-03-18 19:53:25 - }
2019-03-18 19:53:25 - public List<int> Merge(List<int> left, List<int> right)
2019-03-18 19:53:25 - {
2019-03-18 19:53:25 -     List<int> result = new List<int>();
2019-03-18 19:53:25 -     while(left.Count>0||right.Count>0)
2019-03-18 19:53:25 -     {
2019-03-18 19:53:25 -         if (left.Count > 0 && right.Count > 0)
2019-03-18 19:53:25 -         {
2019-03-18 19:53:25 -             if(left[0]<=right[0])
2019-03-18 19:53:25 -             {
2019-03-18 19:53:25 -                 result.Add(left[0]);
2019-03-18 19:53:25 -                 left.RemoveAt(0);
2019-03-18 19:53:25 -             }
2019-03-18 19:53:25 -             else
2019-03-18 19:53:25 -             {
2019-03-18 19:53:25 -                 result.Add(right[0]);
2019-03-18 19:53:25 -                 right.RemoveAt(0);
2019-03-18 19:53:25 -             }
2019-03-18 19:53:25 -         }
2019-03-18 19:53:25 -         else if(left.Count>0)
2019-03-18 19:53:25 -         {
2019-03-18 19:53:25 -             result.Add(left[0]);
2019-03-18 19:53:25 -             left.RemoveAt(0);
2019-03-18 19:53:25 -         }
2019-03-18 19:53:25 -         else if(right.Count>0){
2019-03-18 19:53:25 -             result.Add(right[0]);
2019-03-18 19:53:25 -             right.RemoveAt(0);        
2019-03-18 19:53:25 -         }            
2019-03-18 19:53:25 -     }
2019-03-18 19:53:25 -     return result;
2019-03-18 19:53:25 - }
2019-03-18 19:53:25 - public int Pop(List<int> list, int index)
2019-03-18 19:53:25 - {
2019-03-18 19:53:25 -     int res = list[index];
2019-03-18 19:53:25 -     list.RemoveAt(index);
2019-03-18 19:53:25 -     return res;
2019-03-18 19:53:25 - }
2019-03-18 19:56:43 - public List<int> MergeSort(List<int> arr)
2019-03-18 19:56:43 - {
2019-03-18 19:56:43 -     if(arr.Count<2) return arr;
2019-03-18 19:56:43 -     List<int> left = new List<int>();
2019-03-18 19:56:43 -     List<int> right = new List<int>();
2019-03-18 19:56:43 -     int mid = arr.Count/2;
2019-03-18 19:56:43 -     // Dividing the unsorted list
2019-03-18 19:56:43 -     for (int i = 0; i < mid;i++) 
2019-03-18 19:56:43 -     {
2019-03-18 19:56:43 -         left.Add(arr[i]);
2019-03-18 19:56:43 -     }
2019-03-18 19:56:43 -     for (int i = mid; i < arr.Count; i++)
2019-03-18 19:56:43 -     {
2019-03-18 19:56:43 -         right.Add(arr[i]);
2019-03-18 19:56:43 -     }
2019-03-18 19:56:43 -     left = MergeSort(left);
2019-03-18 19:56:43 -     right = MergeSort(right);
2019-03-18 19:56:43 -     return Merge(left, right);
2019-03-18 19:56:43 - }
2019-03-18 19:56:43 - public List<int> Merge(List<int> left, List<int> right)
2019-03-18 19:56:43 - {
2019-03-18 19:56:43 -     List<int> result = new List<int>();
2019-03-18 19:56:43 -     while(left.Count>0||right.Count>0)
2019-03-18 19:56:43 -     {
2019-03-18 19:56:43 -         if (left.Count > 0 && right.Count > 0)
2019-03-18 19:56:43 -         {
2019-03-18 19:56:43 -             if(left[0]<=right[0])
2019-03-18 19:56:43 -             {
2019-03-18 19:56:43 -                 result.Add(left[0]);
2019-03-18 19:56:43 -                 left.RemoveAt(0);
2019-03-18 19:56:43 -             }
2019-03-18 19:56:43 -             else
2019-03-18 19:56:43 -             {
2019-03-18 19:56:43 -                 result.Add(right[0]);
2019-03-18 19:56:43 -                 right.RemoveAt(0);
2019-03-18 19:56:43 -             }
2019-03-18 19:56:43 -         }
2019-03-18 19:56:43 -         else if(left.Count>0)
2019-03-18 19:56:43 -         {
2019-03-18 19:56:43 -             result.Add(left[0]);
2019-03-18 19:56:43 -             left.RemoveAt(0);
2019-03-18 19:56:43 -         }
2019-03-18 19:56:43 -         else if(right.Count>0){
2019-03-18 19:56:43 -             result.Add(right[0]);
2019-03-18 19:56:43 -             right.RemoveAt(0);        
2019-03-18 19:56:43 -         }            
2019-03-18 19:56:43 -     }
2019-03-18 19:56:43 -     return result;
2019-03-18 19:56:43 - }
2019-03-18 19:56:43 - public int Pop(List<int> list, int index)
2019-03-18 19:56:43 - {
2019-03-18 19:56:43 -     int res = list[index];
2019-03-18 19:56:43 -     list.RemoveAt(index);
2019-03-18 19:56:43 -     return res;
2019-03-18 19:56:43 - }
2019-03-18 19:56:43 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 19:56:43 - MergeSort(arr);
2019-03-18 19:56:43 - PrintSteps(arr,1);
2019-03-18 19:56:43 - (67,11): error CS1503: Argument 1: cannot convert from 'int[]' to 'System.Collections.Generic.List<int>'
2019-03-18 19:58:09 - public List<int> MergeSort(List<int> arr)
2019-03-18 19:58:09 - {
2019-03-18 19:58:09 -     if(arr.Count<2) return arr;
2019-03-18 19:58:09 -     List<int> left = new List<int>();
2019-03-18 19:58:09 -     List<int> right = new List<int>();
2019-03-18 19:58:09 -     int mid = arr.Count/2;
2019-03-18 19:58:09 -     // Dividing the unsorted list
2019-03-18 19:58:09 -     for (int i = 0; i < mid;i++) 
2019-03-18 19:58:09 -     {
2019-03-18 19:58:09 -         left.Add(arr[i]);
2019-03-18 19:58:09 -     }
2019-03-18 19:58:09 -     for (int i = mid; i < arr.Count; i++)
2019-03-18 19:58:09 -     {
2019-03-18 19:58:09 -         right.Add(arr[i]);
2019-03-18 19:58:09 -     }
2019-03-18 19:58:09 -     left = MergeSort(left);
2019-03-18 19:58:09 -     right = MergeSort(right);
2019-03-18 19:58:09 -     return Merge(left, right);
2019-03-18 19:58:09 - }
2019-03-18 19:58:09 - public List<int> Merge(List<int> left, List<int> right)
2019-03-18 19:58:09 - {
2019-03-18 19:58:09 -     List<int> result = new List<int>();
2019-03-18 19:58:09 -     while(left.Count>0||right.Count>0)
2019-03-18 19:58:09 -     {
2019-03-18 19:58:09 -         if (left.Count > 0 && right.Count > 0)
2019-03-18 19:58:09 -         {
2019-03-18 19:58:09 -             if(left[0]<=right[0])
2019-03-18 19:58:09 -             {
2019-03-18 19:58:09 -                 result.Add(left[0]);
2019-03-18 19:58:09 -                 left.RemoveAt(0);
2019-03-18 19:58:09 -             }
2019-03-18 19:58:09 -             else
2019-03-18 19:58:09 -             {
2019-03-18 19:58:09 -                 result.Add(right[0]);
2019-03-18 19:58:09 -                 right.RemoveAt(0);
2019-03-18 19:58:09 -             }
2019-03-18 19:58:09 -         }
2019-03-18 19:58:09 -         else if(left.Count>0)
2019-03-18 19:58:09 -         {
2019-03-18 19:58:09 -             result.Add(left[0]);
2019-03-18 19:58:09 -             left.RemoveAt(0);
2019-03-18 19:58:09 -         }
2019-03-18 19:58:09 -         else if(right.Count>0){
2019-03-18 19:58:09 -             result.Add(right[0]);
2019-03-18 19:58:09 -             right.RemoveAt(0);        
2019-03-18 19:58:09 -         }            
2019-03-18 19:58:09 -     }
2019-03-18 19:58:09 -     return result;
2019-03-18 19:58:09 - }
2019-03-18 19:58:09 - public int Pop(List<int> list, int index)
2019-03-18 19:58:09 - {
2019-03-18 19:58:09 -     int res = list[index];
2019-03-18 19:58:09 -     list.RemoveAt(index);
2019-03-18 19:58:09 -     return res;
2019-03-18 19:58:09 - }
2019-03-18 19:58:09 - int[] arr = new int[] {8,6,4,5,2,7,1};
2019-03-18 19:58:09 - MergeSort(arr);
2019-03-18 19:58:09 - foreach(var i in arr)
2019-03-18 19:58:09 - {
2019-03-18 19:58:09 -     Console.Write(i+" ");
2019-03-18 19:58:09 - }
2019-03-18 19:58:09 - (67,11): error CS1503: Argument 1: cannot convert from 'int[]' to 'System.Collections.Generic.List<int>'
2019-03-18 19:58:59 - public List<int> MergeSort(List<int> arr)
2019-03-18 19:58:59 - {
2019-03-18 19:58:59 -     if(arr.Count<2) return arr;
2019-03-18 19:58:59 -     List<int> left = new List<int>();
2019-03-18 19:58:59 -     List<int> right = new List<int>();
2019-03-18 19:58:59 -     int mid = arr.Count/2;
2019-03-18 19:58:59 -     // Dividing the unsorted list
2019-03-18 19:58:59 -     for (int i = 0; i < mid;i++) 
2019-03-18 19:58:59 -     {
2019-03-18 19:58:59 -         left.Add(arr[i]);
2019-03-18 19:58:59 -     }
2019-03-18 19:58:59 -     for (int i = mid; i < arr.Count; i++)
2019-03-18 19:58:59 -     {
2019-03-18 19:58:59 -         right.Add(arr[i]);
2019-03-18 19:58:59 -     }
2019-03-18 19:58:59 -     left = MergeSort(left);
2019-03-18 19:58:59 -     right = MergeSort(right);
2019-03-18 19:58:59 -     return Merge(left, right);
2019-03-18 19:58:59 - }
2019-03-18 19:58:59 - public List<int> Merge(List<int> left, List<int> right)
2019-03-18 19:58:59 - {
2019-03-18 19:58:59 -     List<int> result = new List<int>();
2019-03-18 19:58:59 -     while(left.Count>0||right.Count>0)
2019-03-18 19:58:59 -     {
2019-03-18 19:58:59 -         if (left.Count > 0 && right.Count > 0)
2019-03-18 19:58:59 -         {
2019-03-18 19:58:59 -             if(left[0]<=right[0])
2019-03-18 19:58:59 -             {
2019-03-18 19:58:59 -                 result.Add(left[0]);
2019-03-18 19:58:59 -                 left.RemoveAt(0);
2019-03-18 19:58:59 -             }
2019-03-18 19:58:59 -             else
2019-03-18 19:58:59 -             {
2019-03-18 19:58:59 -                 result.Add(right[0]);
2019-03-18 19:58:59 -                 right.RemoveAt(0);
2019-03-18 19:58:59 -             }
2019-03-18 19:58:59 -         }
2019-03-18 19:58:59 -         else if(left.Count>0)
2019-03-18 19:58:59 -         {
2019-03-18 19:58:59 -             result.Add(left[0]);
2019-03-18 19:58:59 -             left.RemoveAt(0);
2019-03-18 19:58:59 -         }
2019-03-18 19:58:59 -         else if(right.Count>0){
2019-03-18 19:58:59 -             result.Add(right[0]);
2019-03-18 19:58:59 -             right.RemoveAt(0);        
2019-03-18 19:58:59 -         }            
2019-03-18 19:58:59 -     }
2019-03-18 19:58:59 -     return result;
2019-03-18 19:58:59 - }
2019-03-18 19:58:59 - public int Pop(List<int> list, int index)
2019-03-18 19:58:59 - {
2019-03-18 19:58:59 -     int res = list[index];
2019-03-18 19:58:59 -     list.RemoveAt(index);
2019-03-18 19:58:59 -     return res;
2019-03-18 19:58:59 - }
2019-03-18 19:58:59 - List<int> arr = new List<int>(){8,6,4,5,2,7,1};
2019-03-18 19:58:59 - MergeSort(arr);
2019-03-18 19:58:59 - foreach(var i in arr)
2019-03-18 19:58:59 - {
2019-03-18 19:58:59 -     Console.Write(i+" ");
2019-03-18 19:58:59 - }
2019-03-18 19:59:46 - public List<int> MergeSort(List<int> arr)
2019-03-18 19:59:46 - {
2019-03-18 19:59:46 -     if(arr.Count<2) return arr;
2019-03-18 19:59:46 -     List<int> left = new List<int>();
2019-03-18 19:59:46 -     List<int> right = new List<int>();
2019-03-18 19:59:46 -     int mid = arr.Count/2;
2019-03-18 19:59:46 -     // Dividing the unsorted list
2019-03-18 19:59:46 -     for (int i = 0; i < mid;i++) 
2019-03-18 19:59:46 -     {
2019-03-18 19:59:46 -         left.Add(arr[i]);
2019-03-18 19:59:46 -     }
2019-03-18 19:59:46 -     for (int i = mid; i < arr.Count; i++)
2019-03-18 19:59:46 -     {
2019-03-18 19:59:46 -         right.Add(arr[i]);
2019-03-18 19:59:46 -     }
2019-03-18 19:59:46 -     left = MergeSort(left);
2019-03-18 19:59:46 -     right = MergeSort(right);
2019-03-18 19:59:46 -     return Merge(left, right);
2019-03-18 19:59:46 - }
2019-03-18 19:59:46 - public List<int> Merge(List<int> left, List<int> right)
2019-03-18 19:59:46 - {
2019-03-18 19:59:46 -     List<int> result = new List<int>();
2019-03-18 19:59:46 -     while(left.Count>0||right.Count>0)
2019-03-18 19:59:46 -     {
2019-03-18 19:59:46 -         if (left.Count > 0 && right.Count > 0)
2019-03-18 19:59:46 -         {
2019-03-18 19:59:46 -             if(left[0]<=right[0])
2019-03-18 19:59:46 -             {
2019-03-18 19:59:46 -                 result.Add(left[0]);
2019-03-18 19:59:46 -                 left.RemoveAt(0);
2019-03-18 19:59:46 -             }
2019-03-18 19:59:46 -             else
2019-03-18 19:59:46 -             {
2019-03-18 19:59:46 -                 result.Add(right[0]);
2019-03-18 19:59:46 -                 right.RemoveAt(0);
2019-03-18 19:59:46 -             }
2019-03-18 19:59:46 -         }
2019-03-18 19:59:46 -         else if(left.Count>0)
2019-03-18 19:59:46 -         {
2019-03-18 19:59:46 -             result.Add(left[0]);
2019-03-18 19:59:46 -             left.RemoveAt(0);
2019-03-18 19:59:46 -         }
2019-03-18 19:59:46 -         else if(right.Count>0){
2019-03-18 19:59:46 -             result.Add(right[0]);
2019-03-18 19:59:46 -             right.RemoveAt(0);        
2019-03-18 19:59:46 -         }            
2019-03-18 19:59:46 -     }
2019-03-18 19:59:46 -     return result;
2019-03-18 19:59:46 - }
2019-03-18 19:59:46 - public int Pop(List<int> list, int index)
2019-03-18 19:59:46 - {
2019-03-18 19:59:46 -     int res = list[index];
2019-03-18 19:59:46 -     list.RemoveAt(index);
2019-03-18 19:59:46 -     return res;
2019-03-18 19:59:46 - }
2019-03-18 19:59:46 - List<int> arr = new List<int>(){8,6,4,5,2,7,1};
2019-03-18 19:59:46 - MergeSort(arr);
2019-03-18 19:59:46 - foreach(var i in arr)
2019-03-18 19:59:46 - {
2019-03-18 19:59:46 -     Console.Write(i+" ");
2019-03-18 19:59:46 - }
2019-03-18 20:01:27 - private List<int> MergeSort(List<int> unsorted)
2019-03-18 20:01:27 - {
2019-03-18 20:01:27 -     if (unsorted.Count <= 1)
2019-03-18 20:01:27 -         return unsorted;
2019-03-18 20:01:27 -     List<int> left = new List<int>();
2019-03-18 20:01:27 -     List<int> right = new List<int>();
2019-03-18 20:01:27 -     int middle = unsorted.Count / 2;
2019-03-18 20:01:27 -     for (int i = 0; i < middle;i++)  //Dividing the unsorted list
2019-03-18 20:01:27 -     {
2019-03-18 20:01:27 -         left.Add(unsorted[i]);
2019-03-18 20:01:27 -     }
2019-03-18 20:01:27 -     for (int i = middle; i < unsorted.Count; i++)
2019-03-18 20:01:27 -     {
2019-03-18 20:01:27 -         right.Add(unsorted[i]);
2019-03-18 20:01:27 -     }
2019-03-18 20:01:27 -     left = MergeSort(left);
2019-03-18 20:01:27 -     right = MergeSort(right);
2019-03-18 20:01:27 -     return Merge(left, right);
2019-03-18 20:01:27 - }
2019-03-18 20:01:27 - private List<int> Merge(List<int> left, List<int> right)
2019-03-18 20:01:27 - {
2019-03-18 20:01:27 -     List<int> result = new List<int>();
2019-03-18 20:01:27 -     while(left.Count > 0 || right.Count>0)
2019-03-18 20:01:27 -     {
2019-03-18 20:01:27 -         if (left.Count > 0 && right.Count > 0)
2019-03-18 20:01:27 -         {
2019-03-18 20:01:27 -             if (left.First() <= right.First())  //Comparing First two elements to see which is smaller
2019-03-18 20:01:27 -             {
2019-03-18 20:01:27 -                 result.Add(left.First());
2019-03-18 20:01:27 -                 left.Remove(left.First());      //Rest of the list minus the first element
2019-03-18 20:01:27 -             }
2019-03-18 20:01:27 -             else
2019-03-18 20:01:27 -             {
2019-03-18 20:01:27 -                 result.Add(right.First());
2019-03-18 20:01:27 -                 right.Remove(right.First());
2019-03-18 20:01:27 -             }
2019-03-18 20:01:27 -         }
2019-03-18 20:01:27 -         else if(left.Count>0)
2019-03-18 20:01:27 -         {
2019-03-18 20:01:27 -             result.Add(left.First());
2019-03-18 20:01:27 -             left.Remove(left.First());
2019-03-18 20:01:27 -         }
2019-03-18 20:01:27 -         else if (right.Count > 0)
2019-03-18 20:01:27 -         {
2019-03-18 20:01:27 -             result.Add(right.First());
2019-03-18 20:01:27 -             right.Remove(right.First());    
2019-03-18 20:01:27 -         }    
2019-03-18 20:01:27 -     }
2019-03-18 20:01:27 -     return result;
2019-03-18 20:01:27 - }
2019-03-18 20:01:27 - List<int> arr = new List<int>(){8,6,4,5,2,7,1};
2019-03-18 20:01:27 - MergeSort(arr);
2019-03-18 20:01:27 - foreach(var i in arr)
2019-03-18 20:01:27 - {
2019-03-18 20:01:27 -     Console.Write(i+" ");
2019-03-18 20:01:27 - }
2019-03-18 20:01:27 - (32,17): error CS0012: The type 'ValueType' is defined in an assembly that is not referenced. You must add a reference to assembly 'System.Runtime, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.
2019-03-18 20:01:27 - (32,33): error CS0012: The type 'ValueType' is defined in an assembly that is not referenced. You must add a reference to assembly 'System.Runtime, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.
2019-03-18 20:01:27 - (34,28): error CS0012: The type 'ValueType' is defined in an assembly that is not referenced. You must add a reference to assembly 'System.Runtime, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.
2019-03-18 20:01:27 - (35,29): error CS0012: The type 'ValueType' is defined in an assembly that is not referenced. You must add a reference to assembly 'System.Runtime, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.
2019-03-18 20:01:27 - (39,28): error CS0012: The type 'ValueType' is defined in an assembly that is not referenced. You must add a reference to assembly 'System.Runtime, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.
2019-03-18 20:01:27 - (40,30): error CS0012: The type 'ValueType' is defined in an assembly that is not referenced. You must add a reference to assembly 'System.Runtime, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.
2019-03-18 20:01:27 - (45,24): error CS0012: The type 'ValueType' is defined in an assembly that is not referenced. You must add a reference to assembly 'System.Runtime, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.
2019-03-18 20:01:27 - (46,25): error CS0012: The type 'ValueType' is defined in an assembly that is not referenced. You must add a reference to assembly 'System.Runtime, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.
2019-03-18 20:01:27 - (50,24): error CS0012: The type 'ValueType' is defined in an assembly that is not referenced. You must add a reference to assembly 'System.Runtime, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.
2019-03-18 20:01:27 - (52,26): error CS0012: The type 'ValueType' is defined in an assembly that is not referenced. You must add a reference to assembly 'System.Runtime, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.
2019-03-18 20:03:09 - private List<int> MergeSort(List<int> unsorted)
2019-03-18 20:03:09 - {
2019-03-18 20:03:09 -     if (unsorted.Count <= 1)
2019-03-18 20:03:09 -         return unsorted;
2019-03-18 20:03:09 -     List<int> left = new List<int>();
2019-03-18 20:03:09 -     List<int> right = new List<int>();
2019-03-18 20:03:09 -     int middle = unsorted.Count / 2;
2019-03-18 20:03:09 -     for (int i = 0; i < middle;i++)  //Dividing the unsorted list
2019-03-18 20:03:09 -     {
2019-03-18 20:03:09 -         left.Add(unsorted[i]);
2019-03-18 20:03:09 -     }
2019-03-18 20:03:09 -     for (int i = middle; i < unsorted.Count; i++)
2019-03-18 20:03:09 -     {
2019-03-18 20:03:09 -         right.Add(unsorted[i]);
2019-03-18 20:03:09 -     }
2019-03-18 20:03:09 -     left = MergeSort(left);
2019-03-18 20:03:09 -     right = MergeSort(right);
2019-03-18 20:03:09 -     return Merge(left, right);
2019-03-18 20:03:09 - }
2019-03-18 20:03:09 - private List<int> Merge(List<int> left, List<int> right)
2019-03-18 20:03:09 - {
2019-03-18 20:03:09 -     List<int> result = new List<int>();
2019-03-18 20:03:09 -     while(left.Count > 0 || right.Count>0)
2019-03-18 20:03:09 -     {
2019-03-18 20:03:09 -         if (left.Count > 0 && right.Count > 0)
2019-03-18 20:03:09 -         {
2019-03-18 20:03:09 -             if (left[0] <= right[0])  //Comparing First two elements to see which is smaller
2019-03-18 20:03:09 -             {
2019-03-18 20:03:09 -                 result.Add(left[0]);
2019-03-18 20:03:09 -                 left.Remove(left[0] );      //Rest of the list minus the first element
2019-03-18 20:03:09 -             }
2019-03-18 20:03:09 -             else
2019-03-18 20:03:09 -             {
2019-03-18 20:03:09 -                 result.Add(right[0]);
2019-03-18 20:03:09 -                 right.Remove(right[0]);
2019-03-18 20:03:09 -             }
2019-03-18 20:03:09 -         }
2019-03-18 20:03:09 -         else if(left.Count>0)
2019-03-18 20:03:09 -         {
2019-03-18 20:03:09 -             result.Add(left[0] );
2019-03-18 20:03:09 -             left.Remove(left[0] );
2019-03-18 20:03:09 -         }
2019-03-18 20:03:09 -         else if (right.Count > 0)
2019-03-18 20:03:09 -         {
2019-03-18 20:03:09 -             result.Add(right[0]);
2019-03-18 20:03:09 -             right.Remove(right[0]);    
2019-03-18 20:03:09 -         }    
2019-03-18 20:03:09 -     }
2019-03-18 20:03:09 -     return result;
2019-03-18 20:03:09 - }
2019-03-18 20:03:09 - List<int> arr = new List<int>(){8,6,4,5,2,7,1};
2019-03-18 20:03:09 - MergeSort(arr);
2019-03-18 20:03:09 - foreach(var i in arr)
2019-03-18 20:03:09 - {
2019-03-18 20:03:09 -     Console.Write(i+" ");
2019-03-18 20:03:09 - }
2019-03-18 20:03:15 - private List<int> MergeSort(List<int> unsorted)
2019-03-18 20:03:15 - {
2019-03-18 20:03:15 -     if (unsorted.Count <= 1)
2019-03-18 20:03:15 -         return unsorted;
2019-03-18 20:03:15 -     List<int> left = new List<int>();
2019-03-18 20:03:15 -     List<int> right = new List<int>();
2019-03-18 20:03:15 -     int middle = unsorted.Count / 2;
2019-03-18 20:03:15 -     for (int i = 0; i < middle;i++)  //Dividing the unsorted list
2019-03-18 20:03:15 -     {
2019-03-18 20:03:15 -         left.Add(unsorted[i]);
2019-03-18 20:03:15 -     }
2019-03-18 20:03:15 -     for (int i = middle; i < unsorted.Count; i++)
2019-03-18 20:03:15 -     {
2019-03-18 20:03:15 -         right.Add(unsorted[i]);
2019-03-18 20:03:15 -     }
2019-03-18 20:03:15 -     left = MergeSort(left);
2019-03-18 20:03:15 -     right = MergeSort(right);
2019-03-18 20:03:15 -     return Merge(left, right);
2019-03-18 20:03:15 - }
2019-03-18 20:03:15 - private List<int> Merge(List<int> left, List<int> right)
2019-03-18 20:03:15 - {
2019-03-18 20:03:15 -     List<int> result = new List<int>();
2019-03-18 20:03:15 -     while(left.Count > 0 || right.Count>0)
2019-03-18 20:03:15 -     {
2019-03-18 20:03:15 -         if (left.Count > 0 && right.Count > 0)
2019-03-18 20:03:15 -         {
2019-03-18 20:03:15 -             if (left[0] <= right[0])  //Comparing First two elements to see which is smaller
2019-03-18 20:03:15 -             {
2019-03-18 20:03:15 -                 result.Add(left[0]);
2019-03-18 20:03:15 -                 left.Remove(left[0] );      //Rest of the list minus the first element
2019-03-18 20:03:15 -             }
2019-03-18 20:03:15 -             else
2019-03-18 20:03:15 -             {
2019-03-18 20:03:15 -                 result.Add(right[0]);
2019-03-18 20:03:15 -                 right.Remove(right[0]);
2019-03-18 20:03:15 -             }
2019-03-18 20:03:15 -         }
2019-03-18 20:03:15 -         else if(left.Count>0)
2019-03-18 20:03:15 -         {
2019-03-18 20:03:15 -             result.Add(left[0] );
2019-03-18 20:03:15 -             left.Remove(left[0] );
2019-03-18 20:03:15 -         }
2019-03-18 20:03:15 -         else if (right.Count > 0)
2019-03-18 20:03:15 -         {
2019-03-18 20:03:15 -             result.Add(right[0]);
2019-03-18 20:03:15 -             right.Remove(right[0]);    
2019-03-18 20:03:15 -         }    
2019-03-18 20:03:15 -     }
2019-03-18 20:03:15 -     return result;
2019-03-18 20:03:15 - }
2019-03-18 20:03:15 - List<int> arr = new List<int>(){8,6,4,5,2,7,1};
2019-03-18 20:03:15 - MergeSort(arr);
2019-03-18 20:03:15 - foreach(var i in arr)
2019-03-18 20:03:15 - {
2019-03-18 20:03:15 -     Console.Write(i+" ");
2019-03-18 20:03:15 - }
2019-03-18 20:03:15 - private List<int> MergeSort(List<int> unsorted)
2019-03-18 20:03:15 - {
2019-03-18 20:03:15 -     if (unsorted.Count <= 1)
2019-03-18 20:03:15 -         return unsorted;
2019-03-18 20:03:15 -     List<int> left = new List<int>();
2019-03-18 20:03:15 -     List<int> right = new List<int>();
2019-03-18 20:03:15 -     int middle = unsorted.Count / 2;
2019-03-18 20:03:15 -     for (int i = 0; i < middle;i++)  //Dividing the unsorted list
2019-03-18 20:03:15 -     {
2019-03-18 20:03:15 -         left.Add(unsorted[i]);
2019-03-18 20:03:15 -     }
2019-03-18 20:03:15 -     for (int i = middle; i < unsorted.Count; i++)
2019-03-18 20:03:15 -     {
2019-03-18 20:03:15 -         right.Add(unsorted[i]);
2019-03-18 20:03:15 -     }
2019-03-18 20:03:15 -     left = MergeSort(left);
2019-03-18 20:03:15 -     right = MergeSort(right);
2019-03-18 20:03:15 -     return Merge(left, right);
2019-03-18 20:03:15 - }
2019-03-18 20:03:15 - private List<int> Merge(List<int> left, List<int> right)
2019-03-18 20:03:15 - {
2019-03-18 20:03:15 -     List<int> result = new List<int>();
2019-03-18 20:03:15 -     while(left.Count > 0 || right.Count>0)
2019-03-18 20:03:15 -     {
2019-03-18 20:03:15 -         if (left.Count > 0 && right.Count > 0)
2019-03-18 20:03:15 -         {
2019-03-18 20:03:15 -             if (left[0] <= right[0])  //Comparing First two elements to see which is smaller
2019-03-18 20:03:15 -             {
2019-03-18 20:03:15 -                 result.Add(left[0]);
2019-03-18 20:03:15 -                 left.Remove(left[0] );      //Rest of the list minus the first element
2019-03-18 20:03:15 -             }
2019-03-18 20:03:15 -             else
2019-03-18 20:03:15 -             {
2019-03-18 20:03:15 -                 result.Add(right[0]);
2019-03-18 20:03:15 -                 right.Remove(right[0]);
2019-03-18 20:03:15 -             }
2019-03-18 20:03:15 -         }
2019-03-18 20:03:15 -         else if(left.Count>0)
2019-03-18 20:03:15 -         {
2019-03-18 20:03:15 -             result.Add(left[0] );
2019-03-18 20:03:15 -             left.Remove(left[0] );
2019-03-18 20:03:15 -         }
2019-03-18 20:03:15 -         else if (right.Count > 0)
2019-03-18 20:03:15 -         {
2019-03-18 20:03:15 -             result.Add(right[0]);
2019-03-18 20:03:15 -             right.Remove(right[0]);    
2019-03-18 20:03:15 -         }    
2019-03-18 20:03:15 -     }
2019-03-18 20:03:15 -     return result;
2019-03-18 20:03:15 - }
2019-03-18 20:03:15 - List<int> arr = new List<int>(){8,6,4,5,2,7,1};
2019-03-18 20:03:15 - MergeSort(arr);
2019-03-18 20:03:15 - foreach(var i in arr)
2019-03-18 20:03:15 - {
2019-03-18 20:03:15 -     Console.Write(i+" ");
2019-03-18 20:03:15 - }
2019-03-18 20:03:15 - private List<int> MergeSort(List<int> unsorted)
2019-03-18 20:03:15 - {
2019-03-18 20:03:15 -     if (unsorted.Count <= 1)
2019-03-18 20:03:15 -         return unsorted;
2019-03-18 20:03:15 -     List<int> left = new List<int>();
2019-03-18 20:03:15 -     List<int> right = new List<int>();
2019-03-18 20:03:15 -     int middle = unsorted.Count / 2;
2019-03-18 20:03:15 -     for (int i = 0; i < middle;i++)  //Dividing the unsorted list
2019-03-18 20:03:15 -     {
2019-03-18 20:03:15 -         left.Add(unsorted[i]);
2019-03-18 20:03:15 -     }
2019-03-18 20:03:15 -     for (int i = middle; i < unsorted.Count; i++)
2019-03-18 20:03:15 -     {
2019-03-18 20:03:15 -         right.Add(unsorted[i]);
2019-03-18 20:03:15 -     }
2019-03-18 20:03:15 -     left = MergeSort(left);
2019-03-18 20:03:15 -     right = MergeSort(right);
2019-03-18 20:03:15 -     return Merge(left, right);
2019-03-18 20:03:15 - }
2019-03-18 20:03:15 - private List<int> Merge(List<int> left, List<int> right)
2019-03-18 20:03:15 - {
2019-03-18 20:03:15 -     List<int> result = new List<int>();
2019-03-18 20:03:15 -     while(left.Count > 0 || right.Count>0)
2019-03-18 20:03:15 -     {
2019-03-18 20:03:15 -         if (left.Count > 0 && right.Count > 0)
2019-03-18 20:03:15 -         {
2019-03-18 20:03:15 -             if (left[0] <= right[0])  //Comparing First two elements to see which is smaller
2019-03-18 20:03:15 -             {
2019-03-18 20:03:15 -                 result.Add(left[0]);
2019-03-18 20:03:15 -                 left.Remove(left[0] );      //Rest of the list minus the first element
2019-03-18 20:03:15 -             }
2019-03-18 20:03:15 -             else
2019-03-18 20:03:15 -             {
2019-03-18 20:03:15 -                 result.Add(right[0]);
2019-03-18 20:03:15 -                 right.Remove(right[0]);
2019-03-18 20:03:15 -             }
2019-03-18 20:03:15 -         }
2019-03-18 20:03:15 -         else if(left.Count>0)
2019-03-18 20:03:15 -         {
2019-03-18 20:03:15 -             result.Add(left[0] );
2019-03-18 20:03:15 -             left.Remove(left[0] );
2019-03-18 20:03:15 -         }
2019-03-18 20:03:15 -         else if (right.Count > 0)
2019-03-18 20:03:15 -         {
2019-03-18 20:03:15 -             result.Add(right[0]);
2019-03-18 20:03:15 -             right.Remove(right[0]);    
2019-03-18 20:03:15 -         }    
2019-03-18 20:03:15 -     }
2019-03-18 20:03:15 -     return result;
2019-03-18 20:03:15 - }
2019-03-18 20:03:15 - List<int> arr = new List<int>(){8,6,4,5,2,7,1};
2019-03-18 20:03:15 - MergeSort(arr);
2019-03-18 20:03:15 - foreach(var i in arr)
2019-03-18 20:03:15 - {
2019-03-18 20:03:15 -     Console.Write(i+" ");
2019-03-18 20:03:15 - }
2019-03-18 20:05:38 - private List<int> MergeSort(List<int> unsorted)
2019-03-18 20:05:38 - {
2019-03-18 20:05:38 -     if (unsorted.Count <= 1)
2019-03-18 20:05:38 -         return unsorted;
2019-03-18 20:05:38 -     List<int> left = new List<int>();
2019-03-18 20:05:38 -     List<int> right = new List<int>();
2019-03-18 20:05:38 -     int middle = unsorted.Count / 2;
2019-03-18 20:05:38 -     for (int i = 0; i < middle;i++)  //Dividing the unsorted list
2019-03-18 20:05:38 -     {
2019-03-18 20:05:38 -         left.Add(unsorted[i]);
2019-03-18 20:05:38 -     }
2019-03-18 20:05:38 -     for (int i = middle; i < unsorted.Count; i++)
2019-03-18 20:05:38 -     {
2019-03-18 20:05:38 -         right.Add(unsorted[i]);
2019-03-18 20:05:38 -     }
2019-03-18 20:05:38 -     left = MergeSort(left);
2019-03-18 20:05:38 -     right = MergeSort(right);
2019-03-18 20:05:38 -     return Merge(left, right);
2019-03-18 20:05:38 - }
2019-03-18 20:05:38 - private List<int> Merge(List<int> left, List<int> right)
2019-03-18 20:05:38 - {
2019-03-18 20:05:38 -     List<int> result = new List<int>();
2019-03-18 20:05:38 -     while(left.Count > 0 || right.Count>0)
2019-03-18 20:05:38 -     {
2019-03-18 20:05:38 -         if (left.Count > 0 && right.Count > 0)
2019-03-18 20:05:38 -         {
2019-03-18 20:05:38 -             if (left.First() <= right.First())  //Comparing First two elements to see which is smaller
2019-03-18 20:05:38 -             {
2019-03-18 20:05:38 -                 result.Add(left.First());
2019-03-18 20:05:38 -                 left.Remove(left.First());      //Rest of the list minus the first element
2019-03-18 20:05:38 -             }
2019-03-18 20:05:38 -             else
2019-03-18 20:05:38 -             {
2019-03-18 20:05:38 -                 result.Add(right.First());
2019-03-18 20:05:38 -                 right.Remove(right.First());
2019-03-18 20:05:38 -             }
2019-03-18 20:05:38 -         }
2019-03-18 20:05:38 -         else if(left.Count>0)
2019-03-18 20:05:38 -         {
2019-03-18 20:05:38 -             result.Add(left.First());
2019-03-18 20:05:38 -             left.Remove(left.First());
2019-03-18 20:05:38 -         }
2019-03-18 20:05:38 -         else if (right.Count > 0)
2019-03-18 20:05:38 -         {
2019-03-18 20:05:38 -             result.Add(right.First());
2019-03-18 20:05:38 -             right.Remove(right.First());    
2019-03-18 20:05:38 -         }    
2019-03-18 20:05:38 -     }
2019-03-18 20:05:38 -     return result;
2019-03-18 20:05:38 - }
2019-03-18 20:05:38 - List<int> arr = new List<int>(){8,6,4,5,2,7,1};
2019-03-18 20:05:38 - MergeSort(arr);
2019-03-18 20:05:38 - foreach(var i in arr)
2019-03-18 20:05:38 - {
2019-03-18 20:05:38 -     Console.Write(i+" ");
2019-03-18 20:05:38 - }
2019-03-18 20:05:38 - (32,17): error CS0012: The type 'ValueType' is defined in an assembly that is not referenced. You must add a reference to assembly 'System.Runtime, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.
2019-03-18 20:05:38 - (32,33): error CS0012: The type 'ValueType' is defined in an assembly that is not referenced. You must add a reference to assembly 'System.Runtime, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.
2019-03-18 20:05:38 - (34,28): error CS0012: The type 'ValueType' is defined in an assembly that is not referenced. You must add a reference to assembly 'System.Runtime, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.
2019-03-18 20:05:38 - (35,29): error CS0012: The type 'ValueType' is defined in an assembly that is not referenced. You must add a reference to assembly 'System.Runtime, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.
2019-03-18 20:05:38 - (39,28): error CS0012: The type 'ValueType' is defined in an assembly that is not referenced. You must add a reference to assembly 'System.Runtime, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.
2019-03-18 20:05:38 - (40,30): error CS0012: The type 'ValueType' is defined in an assembly that is not referenced. You must add a reference to assembly 'System.Runtime, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.
2019-03-18 20:05:38 - (45,24): error CS0012: The type 'ValueType' is defined in an assembly that is not referenced. You must add a reference to assembly 'System.Runtime, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.
2019-03-18 20:05:38 - (46,25): error CS0012: The type 'ValueType' is defined in an assembly that is not referenced. You must add a reference to assembly 'System.Runtime, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.
2019-03-18 20:05:38 - (50,24): error CS0012: The type 'ValueType' is defined in an assembly that is not referenced. You must add a reference to assembly 'System.Runtime, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.
2019-03-18 20:05:38 - (52,26): error CS0012: The type 'ValueType' is defined in an assembly that is not referenced. You must add a reference to assembly 'System.Runtime, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.
2019-03-18 20:10:04 - public List<int> MergeSort(List<int> arr)
2019-03-18 20:10:04 - {
2019-03-18 20:10:04 -     if(arr.Count<2) return arr;
2019-03-18 20:10:04 -     List<int> left = new List<int>();
2019-03-18 20:10:04 -     List<int> right = new List<int>();
2019-03-18 20:10:04 -     int mid = arr.Count/2;
2019-03-18 20:10:04 -     // Dividing the unsorted list
2019-03-18 20:10:04 -     for (int i = 0; i < mid;i++) 
2019-03-18 20:10:04 -     {
2019-03-18 20:10:04 -         left.Add(arr[i]);
2019-03-18 20:10:04 -     }
2019-03-18 20:10:04 -     for (int i = mid; i < arr.Count; i++)
2019-03-18 20:10:04 -     {
2019-03-18 20:10:04 -         right.Add(arr[i]);
2019-03-18 20:10:04 -     }
2019-03-18 20:10:04 -     left = MergeSort(left);
2019-03-18 20:10:04 -     right = MergeSort(right);
2019-03-18 20:10:04 -     return Merge(left, right);
2019-03-18 20:10:04 - }
2019-03-18 20:10:04 - public List<int> Merge(List<int> left, List<int> right)
2019-03-18 20:10:04 - {
2019-03-18 20:10:04 -     List<int> result = new List<int>();
2019-03-18 20:10:04 -     while(left.Count>0||right.Count>0)
2019-03-18 20:10:04 -     {
2019-03-18 20:10:04 -         if (left.Count > 0 && right.Count > 0)
2019-03-18 20:10:04 -         {
2019-03-18 20:10:04 -             if(left[0]<=right[0])
2019-03-18 20:10:04 -             {
2019-03-18 20:10:04 -                 result.Add(left[0]);
2019-03-18 20:10:04 -                 left.RemoveAt(0);
2019-03-18 20:10:04 -             }
2019-03-18 20:10:04 -             else
2019-03-18 20:10:04 -             {
2019-03-18 20:10:04 -                 result.Add(right[0]);
2019-03-18 20:10:04 -                 right.RemoveAt(0);
2019-03-18 20:10:04 -             }
2019-03-18 20:10:04 -         }
2019-03-18 20:10:04 -         else if(left.Count>0)
2019-03-18 20:10:04 -         {
2019-03-18 20:10:04 -             result.Add(left[0]);
2019-03-18 20:10:04 -             left.RemoveAt(0);
2019-03-18 20:10:04 -         }
2019-03-18 20:10:04 -         else if(right.Count>0){
2019-03-18 20:10:04 -             result.Add(right[0]);
2019-03-18 20:10:04 -             right.RemoveAt(0);        
2019-03-18 20:10:04 -         }            
2019-03-18 20:10:04 -     }
2019-03-18 20:10:04 -     return result;
2019-03-18 20:10:04 - }
2019-03-18 20:10:04 - public int Pop(List<int> list, int index)
2019-03-18 20:10:04 - {
2019-03-18 20:10:04 -     int res = list[index];
2019-03-18 20:10:04 -     list.RemoveAt(index);
2019-03-18 20:10:04 -     return res;
2019-03-18 20:10:04 - }
2019-03-18 20:10:04 - List<int> arr = new List<int>(){8,6,4,5,2,7,1};
2019-03-18 20:10:04 - MergeSort(arr);
2019-03-18 20:10:04 - foreach(var i in arr)
2019-03-18 20:10:04 - {
2019-03-18 20:10:04 -     Console.Write(i+" ");
2019-03-18 20:10:04 - }
2019-03-18 20:10:19 - public List<int> MergeSort(List<int> arr)
2019-03-18 20:10:19 - {
2019-03-18 20:10:19 -     if(arr.Count<2) return arr;
2019-03-18 20:10:19 -     List<int> left = new List<int>();
2019-03-18 20:10:19 -     List<int> right = new List<int>();
2019-03-18 20:10:19 -     int mid = arr.Count/2;
2019-03-18 20:10:19 -     // Dividing the unsorted list
2019-03-18 20:10:19 -     for (int i = 0; i < mid;i++) 
2019-03-18 20:10:19 -     {
2019-03-18 20:10:19 -         left.Add(arr[i]);
2019-03-18 20:10:19 -     }
2019-03-18 20:10:19 -     for (int i = mid; i < arr.Count; i++)
2019-03-18 20:10:19 -     {
2019-03-18 20:10:19 -         right.Add(arr[i]);
2019-03-18 20:10:19 -     }
2019-03-18 20:10:19 -     left = MergeSort(left);
2019-03-18 20:10:19 -     right = MergeSort(right);
2019-03-18 20:10:19 -     return Merge(left, right);
2019-03-18 20:10:19 - }
2019-03-18 20:10:19 - public List<int> Merge(List<int> left, List<int> right)
2019-03-18 20:10:19 - {
2019-03-18 20:10:19 -     List<int> result = new List<int>();
2019-03-18 20:10:19 -     while(left.Count>0||right.Count>0)
2019-03-18 20:10:19 -     {
2019-03-18 20:10:19 -         if (left.Count > 0 && right.Count > 0)
2019-03-18 20:10:19 -         {
2019-03-18 20:10:19 -             if(left[0]<=right[0])
2019-03-18 20:10:19 -             {
2019-03-18 20:10:19 -                 result.Add(left[0]);
2019-03-18 20:10:19 -                 left.RemoveAt(0);
2019-03-18 20:10:19 -             }
2019-03-18 20:10:19 -             else
2019-03-18 20:10:19 -             {
2019-03-18 20:10:19 -                 result.Add(right[0]);
2019-03-18 20:10:19 -                 right.RemoveAt(0);
2019-03-18 20:10:19 -             }
2019-03-18 20:10:19 -         }
2019-03-18 20:10:19 -         else if(left.Count>0)
2019-03-18 20:10:19 -         {
2019-03-18 20:10:19 -             result.Add(left[0]);
2019-03-18 20:10:19 -             left.RemoveAt(0);
2019-03-18 20:10:19 -         }
2019-03-18 20:10:19 -         else if(right.Count>0){
2019-03-18 20:10:19 -             result.Add(right[0]);
2019-03-18 20:10:19 -             right.RemoveAt(0);        
2019-03-18 20:10:19 -         }            
2019-03-18 20:10:19 -     }
2019-03-18 20:10:19 -     return result;
2019-03-18 20:10:19 - }
2019-03-18 20:10:19 - public int Pop(List<int> list, int index)
2019-03-18 20:10:19 - {
2019-03-18 20:10:19 -     int res = list[index];
2019-03-18 20:10:19 -     list.RemoveAt(index);
2019-03-18 20:10:19 -     return res;
2019-03-18 20:10:19 - }
2019-03-18 20:10:19 - List<int> arr = new List<int>(){8,6,4,5,2,7,1};
2019-03-18 20:10:19 - list = MergeSort(arr);
2019-03-18 20:10:19 - foreach(var i in list)
2019-03-18 20:10:19 - {
2019-03-18 20:10:19 -     Console.Write(i+" ");
2019-03-18 20:10:19 - }
2019-03-18 20:10:19 - (67,1): error CS0103: The name 'list' does not exist in the current context
2019-03-18 20:10:19 - (68,18): error CS0103: The name 'list' does not exist in the current context
2019-03-18 20:10:28 - public List<int> MergeSort(List<int> arr)
2019-03-18 20:10:28 - {
2019-03-18 20:10:28 -     if(arr.Count<2) return arr;
2019-03-18 20:10:28 -     List<int> left = new List<int>();
2019-03-18 20:10:28 -     List<int> right = new List<int>();
2019-03-18 20:10:28 -     int mid = arr.Count/2;
2019-03-18 20:10:28 -     // Dividing the unsorted list
2019-03-18 20:10:28 -     for (int i = 0; i < mid;i++) 
2019-03-18 20:10:28 -     {
2019-03-18 20:10:28 -         left.Add(arr[i]);
2019-03-18 20:10:28 -     }
2019-03-18 20:10:28 -     for (int i = mid; i < arr.Count; i++)
2019-03-18 20:10:28 -     {
2019-03-18 20:10:28 -         right.Add(arr[i]);
2019-03-18 20:10:28 -     }
2019-03-18 20:10:28 -     left = MergeSort(left);
2019-03-18 20:10:28 -     right = MergeSort(right);
2019-03-18 20:10:28 -     return Merge(left, right);
2019-03-18 20:10:28 - }
2019-03-18 20:10:28 - public List<int> Merge(List<int> left, List<int> right)
2019-03-18 20:10:28 - {
2019-03-18 20:10:28 -     List<int> result = new List<int>();
2019-03-18 20:10:28 -     while(left.Count>0||right.Count>0)
2019-03-18 20:10:28 -     {
2019-03-18 20:10:28 -         if (left.Count > 0 && right.Count > 0)
2019-03-18 20:10:28 -         {
2019-03-18 20:10:28 -             if(left[0]<=right[0])
2019-03-18 20:10:28 -             {
2019-03-18 20:10:28 -                 result.Add(left[0]);
2019-03-18 20:10:28 -                 left.RemoveAt(0);
2019-03-18 20:10:28 -             }
2019-03-18 20:10:28 -             else
2019-03-18 20:10:28 -             {
2019-03-18 20:10:28 -                 result.Add(right[0]);
2019-03-18 20:10:28 -                 right.RemoveAt(0);
2019-03-18 20:10:28 -             }
2019-03-18 20:10:28 -         }
2019-03-18 20:10:28 -         else if(left.Count>0)
2019-03-18 20:10:28 -         {
2019-03-18 20:10:28 -             result.Add(left[0]);
2019-03-18 20:10:28 -             left.RemoveAt(0);
2019-03-18 20:10:28 -         }
2019-03-18 20:10:28 -         else if(right.Count>0){
2019-03-18 20:10:28 -             result.Add(right[0]);
2019-03-18 20:10:28 -             right.RemoveAt(0);        
2019-03-18 20:10:28 -         }            
2019-03-18 20:10:28 -     }
2019-03-18 20:10:28 -     return result;
2019-03-18 20:10:28 - }
2019-03-18 20:10:28 - public int Pop(List<int> list, int index)
2019-03-18 20:10:28 - {
2019-03-18 20:10:28 -     int res = list[index];
2019-03-18 20:10:28 -     list.RemoveAt(index);
2019-03-18 20:10:28 -     return res;
2019-03-18 20:10:28 - }
2019-03-18 20:10:28 - List<int> arr = new List<int>(){8,6,4,5,2,7,1};
2019-03-18 20:10:28 - List<int>list = MergeSort(arr);
2019-03-18 20:10:28 - foreach(var i in list)
2019-03-18 20:10:28 - {
2019-03-18 20:10:28 -     Console.Write(i+" ");
2019-03-18 20:10:28 - }
